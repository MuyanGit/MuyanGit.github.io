{"meta":{"title":"MuyanGit","subtitle":"言念君子，温其如玉","description":"尽小者大，慎微者著","author":"MuyanGit","url":"https://muyangit.github.io","root":"/"},"pages":[{"title":"","date":"2021-11-09T18:13:05.709Z","updated":"2021-11-09T18:13:05.709Z","comments":true,"path":"index.html","permalink":"https://muyangit.github.io/index.html","excerpt":"","text":"hojunBlog - Just A NoteBook HJ 首页 归档 标签 视频资源 RSS Feed 帮助中心 hojun ·2018-01-24 tesseract-OCR字库练习 tesseract-OCR字库练习 hojun ·2018-01-11 Python玩转冲顶大会 Python玩转冲顶大会 hojun ·2018-01-10 snowfall.jquery.js实现樱花飘落效果 · js snowfall.jquery.js实现樱花飘落效果 hojun ·2018-01-08 python玩转跳一跳 · python python玩转跳一跳 hojun ·2017-12-30 每日签到 每日签到 hojun ·2017-12-25 圣诞快乐！ 圣诞快乐！ hojun ·2017-11-15 Lozad.js学习使用 · js · hexo Lozad懒加载 hojun ·2017-10-23 hexo 使用说明 hexo 使用说明 hojun ·2017-10-22 PHP模拟登陆 · php · 模拟登陆 PHP模拟登陆 hojun ·2017-10-16 excel笔记 excel笔记 123&hellip;5下一页 关于本站&nbsp;&nbsp·&nbsp;&nbsp 帮助中心&nbsp;&nbsp·&nbsp;&nbsp 视频资源&nbsp;&nbsp·&nbsp;&nbsp 友情链接&nbsp;&nbsp·&nbsp;&nbsp 本站点采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议，已建立天 ©2017 基于Hexo搭建 ，主题&nbspJSimple ，感谢github提供免费优质的强力驱动 //太卡了不要了 // var cnzz_protocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");document.write(unescape(\"%3Cspan id='cnzz_stat_icon_1262747754'%3E%3C/span%3E%3Cscript src='\" + cnzz_protocol + \"s22.cnzz.com/z_stat.php%3Fid%3D1262747754%26online%3D1%26show%3Dline' type='text/javascript'%3E%3C/script%3E\")); var _hmt = _hmt || []; (function() { var hm = document.createElement(\"script\"); hm.src = \"https://hm.baidu.com/hm.js?15e55c3816abfbc912d5cb0d9000a2d4\"; var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(hm, s); })(); $(function () { SimpleCore.init({ buildingTime: '04/24/2017', current: $('.post-tags').length > 0 ? 'post' : 'archive', customImg: '/images/customImg.png', tipImg: '/images/tipImg.png', }); const observer = lozad(); observer.observe(); //飘雪效果 if($(\"title\").html() == '圣诞快乐！ - hojunBlog'){ $(document).snowfall('clear'); $(document).snowfall({round:true, minSize:1, maxSize:5, flakeCount:100}); } //樱花效果 if($(\"title\").html() == 'snowfall.jquery.js实现樱花飘落效果 - hojunBlog'){ $(document).snowfall('clear'); if (document.body.clientWidth>600) { $(document).snowfall({image:\"/images/sakura/1.png\", flakeCount:20, minSpeed:1, minSize:8, maxSize:15,}); $(document).snowfall({image:\"/images/sakura/1.png\", flakeCount:20, minSpeed:1, minSize:8, maxSize:15,}); $(document).snowfall({image:\"/images/sakura/2.png\", flakeCount:20, minSpeed:1, minSize:8, maxSize:15,}); $(document).snowfall({image:\"/images/sakura/4.png\", flakeCount:20, minSpeed:1, minSize:8, maxSize:15,}); } else { $(document).snowfall({image:\"/images/sakura/1.png\", flakeCount:10, minSpeed:1, minSize:8, maxSize:15,}); $(document).snowfall({image:\"/images/sakura/1.png\", flakeCount:10, minSpeed:1, minSize:8, maxSize:15,}); $(document).snowfall({image:\"/images/sakura/2.png\", flakeCount:10, minSpeed:1, minSize:8, maxSize:15,}); $(document).snowfall({image:\"/images/sakura/4.png\", flakeCount:10, minSpeed:1, minSize:8, maxSize:15,}); } } });"},{"title":"","date":"2017-06-18T15:39:18.000Z","updated":"2021-11-09T19:17:58.321Z","comments":true,"path":"about/MuyanGit.html","permalink":"https://muyangit.github.io/about/MuyanGit.html","excerpt":"","text":"\" 你好，好友or陌生人？ 欢迎来到的我的个人博客 搭建这个博客站的初衷仅是为了写下知识点 因为时间总是会记不清楚了 或许写的文字能够帮助到更多的人 那就用博客记录并分享吧 想不想和我一起沐浴 在知识的海洋里 &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ——by hojun&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 双鱼座/好奇如猫症患者&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; \" 爱看书也爱远行 心情在路上","author":"MuyanGit"},{"title":"关于此博客搭建","date":"2017-06-18T15:39:18.000Z","updated":"2021-11-09T19:17:44.726Z","comments":true,"path":"about/index.html","permalink":"https://muyangit.github.io/about/index.html","excerpt":"","text":"第一步 环境参照简书这篇文章 20分钟教你使用hexo搭建github博客咳咳，对于小白好像挺烦的样子。需要git账号，本地电脑安装git,node.js,hexo等等。有机会再补上windows教程吧。不过和mac也差不了。 第二步 blog模板在HEXO官网Themes可以自己挑选喜欢的模板。该博客使用的模板为JSimple关于该模板使用注意 1.建议使用作者博客备份，在上面稍加修改地址：https://github.com/shuoit/blog 2.注意模板依赖 比如JSimple的依赖为 1234567891011121314&quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.2.2&quot;, &quot;hexo-git-backup&quot;: &quot;^0.1.2&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.11&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;, &quot;hexo-server&quot;: &quot;^0.2.0&quot;, &quot;hexo-deployer-git&quot;: &quot;0.2.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-json-content&quot;: &quot;^2.2.0&quot;&#125; 修改依赖后记得cmd到博客目录下 1npm install","author":"MuyanGit"},{"title":"友链","date":"2017-04-26T05:40:53.000Z","updated":"2021-11-09T19:54:30.147Z","comments":true,"path":"links/index.html","permalink":"https://muyangit.github.io/links/index.html","excerpt":"","text":"申请友链可以在下方留言告诉博主：举个黄瓜*@(献黄瓜)* 网址：https://muyangit.github.io/ 名称：hojun 描述：言念君子，温其如玉 头像：https://cdn.jsdelivr.net/gh/MuyanGit/ImageHosting/images/favicon.ico","author":"MuyanGit"},{"title":"喜欢的音乐","date":"2018-09-22T00:50:24.000Z","updated":"2021-11-09T19:17:44.726Z","comments":false,"path":"music/index.html","permalink":"https://muyangit.github.io/music/index.html","excerpt":"","text":"古风 千秋令 整首歌是比照“通史”的写法一条线贯通下来。歌曲中所涉及的具体历史时期包括：夏、商、西周、春秋、战国、秦、西汉、东汉、三国、西晋、东晋、南朝、北朝、隋、唐、南唐（五代十国）、北宋、南宋、明。 国语 起风了 从前初识这世间 万般流连 看着天边似在眼前 也甘愿赴汤蹈火去走它一遍 如今走过这世间 万般流连 翻过岁月不同侧脸 措不及防闯入你的笑颜 日漫 紫罗兰永恒花园 我们仍未知道那天所看见的花的名字 四月是你的谎言 外语 其他","author":"MuyanGit"},{"title":"","date":"2021-11-09T15:20:06.645Z","updated":"2020-05-07T15:17:21.000Z","comments":true,"path":"dist/catch-the-cat.js","permalink":"https://muyangit.github.io/dist/catch-the-cat.js","excerpt":"","text":"!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=3)}([function(t,e,n){\"use strict\";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,\"__esModule\",{value:!0});var i,s=n(1),a=n(20),l=n(22),d=n(23),h=n(24),u=n(25),f=n(2),p=n(26),c=n(27);!function(t){t.PLAYING=\"playing\",t.WIN=\"win\",t.LOSE=\"lose\"}(i||(i={}));var k=function(t){function e(e,n,o){var r=t.call(this,{key:\"MainScene\"})||this;return r.w=e,r.h=n,r.r=o,r.dx=2*r.r,r.dy=r.r*Math.sqrt(3),r}return r(e,t),Object.defineProperty(e.prototype,\"blocks\",{get:function(){return this.data.get(\"blocks\")},set:function(t){this.data.set(\"blocks\",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"blocksData\",{get:function(){var t=[];return this.blocks.forEach(function(e,n){t[n]=[],e.forEach(function(e,o){t[n][o]=e.isWall})}),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"cat\",{get:function(){return this.data.get(\"cat\")},set:function(t){this.data.set(\"cat\",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"statusBar\",{get:function(){return this.data.get(\"status_bar\")},set:function(t){this.data.set(\"status_bar\",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"creditText\",{get:function(){return this.data.get(\"credit_text\")},set:function(t){this.data.set(\"credit_text\",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"state\",{get:function(){return this.data.get(\"state\")},set:function(t){switch(t){case i.PLAYING:break;case i.LOSE:this.setStatusText(f.default(\"猫已经跑到地图边缘了，你输了\"));break;case i.WIN:this.setStatusText(f.default(\"猫已经无路可走，你赢了\"));break;default:return}this.data.set(\"state\",t)},enumerable:!0,configurable:!0}),e.getNeighbours=function(t,e){var n,o,r,i,s={i:t-1,j:e},a={i:t+1,j:e};0==(1&e)?(n={i:t-1,j:e-1},o={i:t,j:e-1},r={i:t-1,j:e+1},i={i:t,j:e+1}):(n={i:t,j:e-1},o={i:t+1,j:e-1},r={i:t,j:e+1},i={i:t+1,j:e+1});var l=[];return l[0]=s,l[1]=n,l[2]=o,l[3]=a,l[4]=i,l[5]=r,l},e.prototype.preload=function(){var t=this.r/s.default.catStepLength;for(var e in s.default.textures)this.load.addFile(new c.default(this.load,e,s.default.textures[e],{scale:t}))},e.prototype.create=function(){this.createAnimations(),this.createBlocks(),this.createCat(),this.createStatusText(),this.createResetButton(),this.createCreditText(),this.reset(),this.game.solver&&(this.cat.solver=this.game.solver)},e.prototype.getPosition=function(t,e){return{x:3*this.r+(0==(1&e)?this.r:this.dx)+t*this.dx,y:3*this.r+this.r+e*this.dy}},e.prototype.getBlock=function(t,e){return t>=0&&t=0&&e"},{"title":"","date":"2021-11-09T15:20:06.646Z","updated":"2020-05-07T15:17:21.000Z","comments":true,"path":"dist/index.html","permalink":"https://muyangit.github.io/dist/index.html","excerpt":"","text":"Catch The Cat * { padding: 0; margin: 0 } body { background-color: #eeeeee; } #catch-the-cat { width: 100%; margin-top: 32px; text-align: center; } window.game = new CatchTheCatGame({ w: 11, h: 11, r: 20, backgroundColor: 0xffffff, parent: 'catch-the-cat', statusBarAlign: 'center', credit: ' ' });"},{"title":"关于此博客搭建","date":"2017-06-18T15:39:18.000Z","updated":"2021-11-09T19:17:44.726Z","comments":true,"path":"help/index.html","permalink":"https://muyangit.github.io/help/index.html","excerpt":"","text":"第一步 环境参照简书这篇文章 20分钟教你使用hexo搭建github博客咳咳，对于小白好像挺烦的样子。需要git账号，本地电脑安装git,node.js,hexo等等。有机会再补上windows教程吧。不过和mac也差不了。 第二步 blog模板在HEXO官网Themes可以自己挑选喜欢的模板。该博客使用的模板为JSimple关于该模板使用注意 1.建议使用作者博客备份，在上面稍加修改地址：https://github.com/shuoit/blog 2.注意模板依赖 比如JSimple的依赖为 1234567891011121314&quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.2.2&quot;, &quot;hexo-git-backup&quot;: &quot;^0.1.2&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.11&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;, &quot;hexo-server&quot;: &quot;^0.2.0&quot;, &quot;hexo-deployer-git&quot;: &quot;0.2.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-json-content&quot;: &quot;^2.2.0&quot;&#125; 修改依赖后记得cmd到博客目录下 1npm install","author":"MuyanGit"},{"title":"喜欢的视频","date":"2017-06-18T15:39:18.000Z","updated":"2021-11-09T19:17:44.726Z","comments":true,"path":"video/index.html","permalink":"https://muyangit.github.io/video/index.html","excerpt":"","text":"燃·Unbroken 原创 手把手教你搭建属于自己的hexo+github博客 整套视频地址https://www.bilibili.com/video/av24897960更多推荐视频","author":"MuyanGit"},{"title":"关于此博客搭建","date":"2017-06-18T15:39:18.000Z","updated":"2021-11-09T19:17:44.726Z","comments":true,"path":"rss/index.html","permalink":"https://muyangit.github.io/rss/index.html","excerpt":"","text":"第一步 环境参照简书这篇文章 20分钟教你使用hexo搭建github博客咳咳，对于小白好像挺烦的样子。需要git账号，本地电脑安装git,node.js,hexo等等。有机会再补上windows教程吧。不过和mac也差不了。 第二步 blog模板在HEXO官网Themes可以自己挑选喜欢的模板。该博客使用的模板为JSimple关于该模板使用注意 1.建议使用作者博客备份，在上面稍加修改地址：https://github.com/shuoit/blog 2.注意模板依赖 比如JSimple的依赖为 1234567891011121314&quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.2.2&quot;, &quot;hexo-git-backup&quot;: &quot;^0.1.2&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.11&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;, &quot;hexo-server&quot;: &quot;^0.2.0&quot;, &quot;hexo-deployer-git&quot;: &quot;0.2.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-json-content&quot;: &quot;^2.2.0&quot;&#125; 修改依赖后记得cmd到博客目录下 1npm install","author":"MuyanGit"},{"title":"标签云","date":"2017-04-26T03:30:12.000Z","updated":"2021-11-09T19:17:44.726Z","comments":true,"path":"tags/index.html","permalink":"https://muyangit.github.io/tags/index.html","excerpt":"","text":"","author":"MuyanGit"},{"title":"","date":"2021-11-09T15:20:06.659Z","updated":"2020-05-07T15:17:21.000Z","comments":true,"path":"dist/phaser.min.js","permalink":"https://muyangit.github.io/dist/phaser.min.js","excerpt":"","text":"!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(\"Phaser\",[],e):\"object\"==typeof exports?exports.Phaser=e():t.Phaser=e()}(window,function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},i.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p=\"\",i(i.s=1360)}([function(t,e){function i(t,e,i){var n=i?t[e]:Object.getOwnPropertyDescriptor(t,e);return!i&&n.value&&\"object\"==typeof n.value&&(n=n.value),!(!n||!function(t){return!!t.get&&\"function\"==typeof t.get||!!t.set&&\"function\"==typeof t.set}(n))&&(void 0===n.enumerable&&(n.enumerable=!0),void 0===n.configurable&&(n.configurable=!0),n)}function n(t,e){var i=Object.getOwnPropertyDescriptor(t,e);return!!i&&(i.value&&\"object\"==typeof i.value&&(i=i.value),!1===i.configurable)}function s(t,e,s,r){for(var a in e)if(e.hasOwnProperty(a)){var h=i(e,a,s);if(!1!==h){if(n((r||t).prototype,a)){if(o.ignoreFinals)continue;throw new Error(\"cannot override final property '\"+a+\"', set Class.ignoreFinals = true to skip\")}Object.defineProperty(t.prototype,a,h)}else t.prototype[a]=e[a]}}function r(t,e){if(e){Array.isArray(e)||(e=[e]);for(var i=0;i>8|0))/255,(255&(0|t))/255]},getComponentCount:function(t,e){for(var i=0,n=0;n"}],"posts":[{"title":"英文文本分词之工具NLTK","slug":"英文文本分词之工具NLTK","date":"2021-11-18T07:36:54.000Z","updated":"2022-05-23T15:37:32.947Z","comments":true,"path":"2021/11/18/cl3sojxgn00405cbh7avwf8tc/","link":"","permalink":"https://muyangit.github.io/2021/11/18/cl3sojxgn00405cbh7avwf8tc/","excerpt":"","text":"文文本分词之工具NLTK 安装NLTK 停用词和标点符号包放置 验证 安装NLTK12pip install nltk1 分词需要用到两个包：stopwords和punkt,需要下载： 12345import nltknltk.download(&#x27;stopwords&#x27;)nltk.download(&#x27;punkt&#x27;)1234 如果你能运行成功，那么恭喜，但多半要和我一样，被墙，然后下载失败。于是乎，需要手动下载，这里我已经打包好了，百度提取即可。 123链接：https://pan.baidu.com/s/1ddVRG86W-dyk2O6TsIMXAw 提取码：nltk 12 此处也是要感激广大网友的无私分享和帮助！！！ 停用词和标点符号包放置言归正传，下载解压后要注意，stopwords里面还有个stopwords文件，punkt文件里面还有个punkt文件，我们需要的是里面的这两个文件，而不是最外围的同名文件，虽然包含的内容一样，但是python读取的时候路径会出错。将里面的stopwords和punkt文件夹分别移动到python安装目录下的两个子路径中，比如我的路径是F:\\python38\\Lib\\nltk_data\\corpora和F:\\python38\\Lib\\nltk_data\\tokenizers。需要说明的是，我的F:\\python38\\Lib路径下并没有nltk_data这个文件，没有？没有就让他有！新建文件夹，重命名即可。然后在nltk_data中再新建两个文件夹：corpora和tokenizers。然后把停用词和标点分别移动到这两个文件里即可，亦即：corpora\\stopwords和tokenizers\\punkt。 验证此处提供一段验证代码，明日开始nltk分词之旅！ 12345678910111213141516from nltk.tokenize import word_tokenizefrom nltk.corpus import stopwordspunctuations = [&#x27;,&#x27;, &#x27;.&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;?&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;[&#x27;, &#x27;]&#x27;, &#x27;&amp;&#x27;, &#x27;!&#x27;, &#x27;*&#x27;, &#x27;@&#x27;, &#x27;#&#x27;, &#x27;$&#x27;, &#x27;%&#x27;]data = &quot;All work and no play makes jack dull boy. All work and no play makes jack a dull boy.&quot;words = word_tokenize(data)words = [word for word in words if word not in punctuations] # 去除标点符号stopWords = set(stopwords.words(&#x27;english&#x27;))wordsFiltered = []for w in words: if w not in stopWords: wordsFiltered.append(w)print(wordsFiltered)123456789101112131415 完结，可以愉快地听歌了。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"NET.core在vscode配置","slug":"NET-core在vscode配置","date":"2021-11-16T14:01:12.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/11/16/cl3sojxf3000p5cbh66ze6e1h/","link":"","permalink":"https://muyangit.github.io/2021/11/16/cl3sojxf3000p5cbh66ze6e1h/","excerpt":"","text":"如何在多个.NET Core SDK 版本之间进行切换(global.json) _ The Will Will Web 如何在多個 .NET Core SDK 版本之間進行切換 (global.json)分享2018/04/20 05:41 Will 保哥 .NET Core 由於同一台電腦可以安裝多個版本的 .NET Core SDK，每個版本的 SDK 都會包含完整的工具組、執行環境、組件庫與編譯器等等，所以蠻多人詢問過我這個問題：「當安裝了許多不同版本的 .NET Core SDK 之後，要如何才能使用舊版 dotnet 命令，執行 dotnet new 或 dotnet build 之類的命令。」這部分其實並不困難，只要設定 global.json 即可。 在 .NET Core 2.0 版以前，要查詢目前電腦所有安裝過的 SDK 版本，如果在 Windows 作業系統，可以透過控制台的「應用程式與功能」查看安裝過的 .NET Core SDK 版本，或是透過檔案總管開啟 C:\\Program Files\\dotnet\\sdk 資料夾，查看有哪些版本。如果在 Linux 作業系統下，路徑則在 /usr/share/dotnet/sdk 目錄下。 但是從 .NET Core SDK 2.1 開始，預設的 dotnet 命令就包含了 dotnet –list-sdks 命令，直接可以列出所有已安裝過的版本。 查詢已經安裝過 SDK 版本號是非常重要的，當你想透過 global.json 切換 SDK 版本的時候，必須手動輸入這些已安裝的版本號。 首先，我們先來示範如何快速建立 global.json 檔案： \\1. 先利用 dotnet new globaljson 快速建立這個檔案 預設這個檔案會記錄當前目錄要使用的 .NET Core SDK 版本 預設的 SDK 會等同於目前執行 dotnet 命令時所用的 SDK 版本一致 \\2. 然後將 global.json 檔案內的 “version” 修改為特定 SDK 版本即可 如下圖示 或者是你也可以利用 –sdk-version 參數，直接給定 SDK 版本，如下圖示： 1dotnet new globaljson --sdk-version 2.1.805 請注意：在執行 dotnet 命令的時候，它會自動找尋當前目錄與上層目錄的 global.json 檔案，這裡的上層目錄會一直往上找，找到根目錄為止！如果都找不到 global.json 就會預設選用目前所有已安裝 .NET Core SDK 的最新版。 一般來說，每一個透過 .NET Core 開發的專案，都不太需要 global.json 檔案的存在，因為隨著每次 .NET Core 版本升級，可以讓該專案永遠以「最新版 SDK」進行建置或發行。但是如果你還是擔心會有破壞性更新出現的話，這時你就可以建立一個 global.json 定義檔，將使用的 .NET Core SDK 鎖定在特定版本，以確保應用系統的穩定。 相關連結 global.json reference | Microsoft Docs global.json 參考 | Microsoft Docs set 限制解除 首页新闻博问专区闪存班级注册登录 LineZero’s Blog做自己！简单即幸福即快乐。 博客园 首页 订阅 管理 随笔 - 100 文章 - 0 评论 - 1036 阅读 - 110万 使用VS Code从零开始开发调试.NET 5使用VS Code 从零开始开发调试.NET 5。无需安装VS 2019即可开发调试.NET 5应用。 VS Code 全称是 Visual Studio Code，Visual Studio Code是一个轻量级的跨平台Web集成开发环境，可以运行在 Linux，Mac 和Windows下！ 本篇为VS Code 开发调试.NET 5教程，在Windows下做实际操作，但同样适用于其它系统。 环境安装本文演示开发环境: WIN10 x64 Visual Studio Code 1.55.1 .NET 5.0 SDK Windows x64 Installer: https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.202-windows-x64-installer 更多系统版本下载：https://dotnet.microsoft.com/download VSCode : https://code.visualstudio.com/ VSCode C#插件： 打开扩展搜索C#， 选择C# 安装。 安装好插件以后重启VS Code。 创建项目首先确保 .NET Core SDK 安装成功。 dotnet –version 输出如下： 5.0.202 然后就可以创建项目。 dotnet new console -o myapp cd myapp dotnet run 整个命令执行完成，项目就创建好了。 dotnet new会默认执行 dotnet restore ，只需要dotnet run即可。 使用 VS Code 开发使用 VS Code 打开myapp文件夹，打开Program.cs 文件 如果是首次打开需耐心等待插件的安装。安装成功如下图： 然后稍微等待一下，会出现如上图所示，提示 Required assets to build and debug are missing from ‘myapp’. Add them?，选择Yes 即可。 插件会自动生成.vscode文件夹，并为我们配置好 launch.json 。 使用 VS Code 调试接下来切换到调试窗口就可以进行调试，点击调试按钮 下断点成功断下。 F10 单步跳过 F11 单步调试 F5 执行. 也可以选择附加调试，如下： 代码加入 Console.ReadKey(); 然后在终端中执行 dotnet .\\bin\\Debug\\net5.0\\myapp.dll 接着在调试中切换为 .NET Core Attach 点击调试按钮，选择 dotnet.exe 在VS Code中插入断点，然后终端输入任意键既可继续，程序也能正常走到调试状态。 可以很方便的编写代码，C#插件为开发提供智能提示功能。这样不用安装VS 2019 也可以开发 .NET 5。 VS Code插件外观类插件主题插件 GitHub Theme 更多主题可以搜索Theme Icon 图标插件： vscode-icons 开发类插件Visual Studio IntelliCode 编码智能提示 REST Client 接口请求神器 示例： 1 1POST https://example.com/comments` `HTTP/1.1content-type: application/json` `&#123; &quot;name&quot;: &quot;sample linezero&quot;, “time”: “Wed, 21 Oct 2020 18:27:50 GMT”``} 1234567891011121314151617181920212223Thunder Client 像PostMan 一样请求接口![img](https://img2020.cnblogs.com/blog/443844/202104/443844-20210411154311106-1437423367.png)vscode-solution-explorer 像VS一样操作项目![img](https://img2020.cnblogs.com/blog/443844/202104/443844-20210411160530623-1597839623.png) ASP.NET Core 3.1 新书发布 《[ASP.NET Core项目开发实战入门](https://item.jd.com/12961032.html)》 [京东](https://item.jd.com/12961032.html) [当当](http://product.dangdang.com/29122210.html) [淘宝](https://s.taobao.com/search?q=9787121393846)GitHub：https://github.com/linezero博客示例代码GitHub：https://github.com/linezero/Blog 项目名字(name)里有 python 的in:name python 名字(name)里有 python 的并且 stars 大于 3000 的in:name python starts:&gt;3000 名字(name)里有 python 的并且 stars 大于 3000 、forks 大于 200 的in:name python starts:&gt;3000 forks:&gt;200 详情(readme)里面有 python 的并且 stars 大于 3000 的in:readme python starts:&gt;3000 描述(description)里面有 python 的并且 stars 大于 3000 的in:description python starts:&gt;3000 描述(description)里面有 python 的并且是 python 语言的in:description python language:python 描述(description)里面有 python 的并且 2019-12-20 号之后有更新过的in:description python pushed:&gt;2019-12-20 123456789```cmd注意重启 查看源码-版本-项目还原","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":".NET Core","slug":"NET-Core","permalink":"https://muyangit.github.io/tags/NET-Core/"}],"author":"MuyanGit"},{"title":"redis入门","slug":"redis入门","date":"2021-11-13T08:10:13.000Z","updated":"2022-05-23T15:37:33.103Z","comments":true,"path":"2021/11/13/cl3sojxfx002h5cbhcqegee7o/","link":"","permalink":"https://muyangit.github.io/2021/11/13/cl3sojxfx002h5cbhcqegee7o/","excerpt":"","text":"12345678910111213141516171819方法二：给Redis服务端设置密码第二种是给Redis Server设置密码，并且客户端配置正确的密码。可以通过命令行修改密码：进入安装目录D:\\MySoftware\\DEV\\Dev_env\\Redis-x64-3.2.100&gt;redis-cli.exe修改密码为1127.0.0.1:6379&gt; config set requirepass 1OK127.0.0.1:6379&gt; Ctrl + cD:\\MySoftware\\DEV\\Dev_env\\Redis-x64-3.2.100&gt;redis-cli.exe127.0.0.1:6379&gt; auth 123456#测试错误密码(error) ERR invalid password127.0.0.1:6379&gt; auth 1OK也可以通过修改配置文件来修改密码，redis.windows.conf配置文件，搜索requirepass，找到注释密码行，去掉注释，设置密码：requirepass tenny //注意，行前不能有空格 修改密码 Redis下载和安装（Windows系统）图1：Redis 安装 下载完成后，打开相应的文件夹，您会看到如下图所示的文件目录： 图2：Window 安装 Redis 创建Redis临时服务1) 启动服务端程序如上图所示，双击 Redis 服务端启动程序 redis -server.exe，您会看到以下界面： 图3：启动 Redis 服务端程序 上图中显示一些 Redis 的相关信息，比如 Redis 的版本号以及默认端口号(6379)。注意，为了实现后续操作，请您保持服务端开启状态，否则客户端无法正常工作。 2) 启动客户端程序启动服务端后，双击客户端启动程序 redis -cli.exe，得到如下界面： 图4：Redis客户端启动 得到如上界面，说明 Redis 本地客户端与服务端连接成功。 命令创建Redis服务上述方式虽然简单快捷，但是显然不是程序员的操作，下面介绍，通过命令启动 Redis 服务端，并将 Redis 服务添加到 Windows 资源管理器，实现开机后自动启动。 1) 注册Redis服务通过 CMD 命令行工具进入 Redis 安装目录，将 Redis 服务注册到 Windows 服务中，执行以下命令： 1redis-server.exe --service-install redis.windows.conf --loglevel verbose 执行完后，得到以下输出，说明注册成功。 12[1868] 07 Jan 15:00:08.223 # Granting read/write access to &#x27;NT AUTHORITY\\NetworkService&#x27; on: &quot;D:\\Redis-x64-5.0.10&quot; &quot;D:\\Redis-x64-5.0.10\\&quot;[1868] 07 Jan 15:00:08.230 # Redis successfully installed as a service. 2) 启动Redis服务执行以下命令启动 Redis 服务，命令如下： 1redis-server --service-start 如下图所示： 图5：命令启动 Redis 服务 注意：此时 Redis 已经被添加到 Windows 服务中，因此不会再显示 Redis 服务端的相应的信息，如下图所示： 图6：Windows 服务管理界面 3) 启动Redis客户端在 CMD 命令行输出 redis -cli 命令启动客户端，如下所示： 图7：启动 Redis 客户端 4) 检查是否连接成功测试客户端和服务端是否成功连接。输出PING命令，若返回PONG则证明成功连接。如下所示： 图8：测试客户端是否连接 通过上面的操作，我们完成了 Redis 的安装。当然，您也可以将 Redis 加入到环境变量中，如下所示： 图9：环境变量配置 注意：根据自己的安装路径添加环境变量。 总结下面对安装过程中涉及到的命令进行总结，主要包括以下命令： 12345安装服务：redis-server --service-install卸载服务：redis-server --service-uninstall开启服务：redis-server --service-start停止服务：redis-server --service-stop服务端启动时重命名：redis-server --service-start --service-name Redis1 修改密码今天在启动项目时，用到了Redis缓存数据库，但是却出现了报错信息：ERR Client sent AUTH, but no password is set。 12Caused by: io.lettuce.core.RedisCommandExecutionException: ERR Client sent AUTH, but no password is set1 原因产生这个问题的原因异常信息里已经说明，就是Redis服务器没有设置密码，但客户端向其发送了AUTH（authentication，身份验证）请求携带着密码，导致报错。既然是没有设置密码导致的报错，那我们就把Redis服务器给设置上密码就好了。一共有2种方式设置密码： 一、命令行方式1、先进入Redis服务器 12C:\\Program Files (x86)\\Redis-x64-3.2.100&gt;redis-cli.exe1 2、查看是否设置了密码 123127.0.0.1:6379&gt; auth 123456(error) ERR Client sent AUTH, but no password is set12 3、报错，说明没有设置密码，然后再执行配置命令 1234127.0.0.1:6379&gt; config set requirepass rootOK123 4、返回OK后即代表配置成功，这个时候再执行查看密码命令 123redis 127.0.0.1:6379&gt; AUTH 123456Ok12 返回OK，就说明已经配置成功了。这种配置方式存在一个很严重的问题，就是当我们将Redis服务器关掉之后，这些配置就会失效，下次再启动服务器，需要重新设置！ 二、修改配置文件还有一种方式就是一劳永逸的方式，就是直接修改配置文件里的参数。在redis.windows.conf（我的是这个配置文件）或者redis.conf（我看网上有说是这个配置文件的）的配置文件中找到requirepass这个参数，设置参数密码，然后保存配置文件，重启Redis。 123# requirepass foobaredrequirepass 123456 //123456是设置的密码12 本来这种方式非常简单，但是在实际过程中，却遇见了一些问题，那就是配置不生效，明明配置文件里都已经配置了密码，但是还会报错，后来在Redis启动时发现，Redis报错了： 1234 Warning: no config file specified, using the default config. In order to specify a config file use C:\\Program Files (x86)\\Redis-x64-3.2.100\\redis-server.exe /path/to/redis.conf123 后来查阅之后才知道，原来Redis启动时需要指定配置文件，否则还会使用默认配置，而我在Windows里启动.exe应用程序时，还是习惯性的双击应用程序启动，导致Redis一直使用的是默认配置。这样我们就需要在命令行窗口通过命令行的方式来启动并指定配置文件： 12C:\\Program Files (x86)\\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf1 这样，我们的Redis服务器的密码就正式配置完成了。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"用python写个颜值评分器筛选最美主播","slug":"用python写个颜值评分器筛选最美主播","date":"2021-11-12T12:10:38.000Z","updated":"2022-05-23T15:37:32.957Z","comments":true,"path":"2021/11/12/cl3sojxgm003x5cbhbxqs9l7d/","link":"","permalink":"https://muyangit.github.io/2021/11/12/cl3sojxgm003x5cbhbxqs9l7d/","excerpt":"","text":"用python写个颜值评分器筛选最美主播 更新时间：2021年08月26日 17:16:59 作者：Dragon少年 这篇文章主要介绍了我如何用python写颜值评分器，本文给大家介绍的非常详细，对大家的学习或工作具有一定的参考借鉴价值，需要的朋友可以参考下 目录 前言 一、核心功能设计 获取主播直播封面图 主播颜值评分 二、实现步骤 1. 获取主播名称和照片 2. 主播颜值评分 前言晚上回家闲来无事，想打开某直播平台，看看小姐姐直播。看着一个个多才多艺的小姐姐，眼花缭乱，好难抉择。究竟看哪个小姐姐直播好呢？ 今天我们就一起来做个颜值评分器，爬取小姐姐们的直播照片，对每位小姐姐的颜值进行打分排序，选出最靓的star。 一、核心功能设计总体来说，我们需要做的是获取直播颜值区的主播小姐姐的正在直播的全部主播名称和封面图并保存下来，用百度AI提供的人脸识别接口，进行颜值评分排序，选出颜值最高的。 拆解需求，大致可以整理出核心功能如下： 获取主播直播封面图 打开直播颜值区模块对页面进行分析 发送网络请求，解析数据 保存数据 主播颜值评分 百度人脸识别接口 遍历主播照片，调用颜值检测接口对主播颜值进行打分 对评分进行排序 二、实现步骤1. 获取主播名称和照片首先我们选择的是某牙直播，进入首页打开颜值区，按F12可以进入开发者模式。 12345678910111213# 1.找到数据所在url地址（系统分析网页性质）url = &quot;https://www.huya.com/g/2168&quot;headers = &#123; &#x27;User-Agent&#x27;: &#x27;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 &#x27; &#x27;(KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&#x27; &#125;# 2. 发送网络请求-请关闭代理response = requests.get(url=url, headers=headers)html_data = response.textprint(html_data) 不难发现所有的小姐姐直播封面对应的都是在li标签里面。我们只要解析获取这些li标签数据就可以了。 接着我们需要拿到直播小姐姐的封面图片，通过分析上面li标签里面的内容，可以发现下面有个a标签，里面的img标签中的data-original不就是我们要的小姐姐图片嘛！ 接下来我们想要获取主播小姐姐的名字怎么办呢？点开li标签继续分析，可以看到下面有个span标签，其中的i标签内容就是小姐姐直播的名字。 网页结构我们上面已经分析好了，那么我们就可以来动手爬取我们所需要的数据了。获取到所有的数据资源之后，把图片保存下来即可。文件的下载保存的方式比较多，我用的是通过 with open打开文件的方式 ，比较简单。 1234567891011121314151617181920# 3. 数据解析selector = parsel.Selector(html_data)lis = selector.xpath(&#x27;//li[@class=&quot;game-live-item&quot;]&#x27;) # 所有li标签for li in lis: img_name = li.xpath(&#x27;.//span[@class=&quot;avatar fl&quot;]/i/text()&#x27;).get() # 主播名字 img_url = li.xpath(&#x27;.//a/img/@data-original&#x27;).get() # 主播图片地址 # print(img_name, img_url) # 请求图片数据 img_data = requests.get(url=img_url).content # 图片数据 # 4. 数据保存 # 准备文件名 file_name = img_name + &#x27;.jpg&#x27; with open(&#x27;DATA\\颜值检测\\img\\\\&#x27; + file_name, mode=&#x27;wb&#x27;) as f: f.write(img_data) print(&#x27;正在保存:&#x27;, file_name) 这样小姐姐的直播名称和照片都可以保存下来了，效果如下： 2. 主播颜值评分我们调用的是百度开放的人脸识别接口 – 百度AI开放平台链接。 这里面我们可以创建一个人脸识别应用，其中的API Key及Secret Key后面我们调用人脸识别检测接口时会用到。 接下来我们可以看看官方提供的API帮助文档，里面介绍的很详细。包括如何调用请求URL数据格式，向API服务地址使用POST发送请求，必须在URL中带上参数access_token，可通过后台的API Key和Secret Key生成。这里面的API Key和Secret Key就是我们上面提到的。 那我们要的打分颜值分数是哪个呢？提供返回结果参数，可以看到里面有个beauty就是我们要的颜值分数。 这样颜值检测的接口流程基本就已经清楚了，可以进行代码实现了。 其中获取token的时候，需要用到client_id 和 client_secret ，这两个就是上面创建人脸识别应用时提供的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# 获取tokendef get_token(): # client_id 为官网获取的AK， client_secret 为官网获取的SK #host = &#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=【官网获取的AK】&amp;client_secret=【官网获取的SK】&#x27; host = &#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=AbaIWY4rKccoMtvgGDF2GLQF&amp;client_secret=BD5UCMxMS50bWbW7XabDIcMxPTxogdE5&#x27; response = requests.get(host) if response: # print(response.json()) return response.json()[&#x27;access_token&#x27;]# 颜值检测接口def face_input(file_path): with open(file_path, &#x27;rb&#x27;) as file: data = base64.b64encode(file.read()) img = data.decode() request_url = &quot;https://aip.baidubce.com/rest/2.0/face/v3/detect&quot; params = &quot;&#123;\\&quot;image\\&quot;:\\&quot;%s\\&quot;,\\&quot;image_type\\&quot;:\\&quot;BASE64\\&quot;,\\&quot;face_field\\&quot;:\\&quot;beauty\\&quot;&#125;&quot; % img access_token = get_token() request_url = request_url + &quot;?access_token=&quot; + access_token headers = &#123;&#x27;content-type&#x27;: &#x27;application/json&#x27;&#125; response = requests.post(request_url, data=params, headers=headers) if response: beauty = response.json()[&#x27;result&#x27;][&#x27;face_list&#x27;][0][&#x27;beauty&#x27;] # pprint.pprint(response.json()) return beautypath = &#x27;DATA\\颜值检测\\img&#x27;img_list = os.listdir(path)# print(img_list)score_dict =&#123;&#125;for img in img_list: try: # 提取主播名字 name = img.split(&#x27;.&#x27;)[0] # 构建图片路径 img_path = path + &#x27;//&#x27; + img # 调用颜值检测接口 face_score = face_input(img_path) # print(face_score) score_dict[name] = face_score except: print(f&#x27;正在检测&#123;name&#125;| 检测失败&#x27;) else: print(f&#x27;正在检测&#123;name&#125;| \\t\\t 颜值打分为：&#123;face_score&#125;&#x27;)sorted_score = sorted(score_dict.items(), key=lambda x: x[1], reverse=True)# print(sorted_score)for i, j in enumerate(sorted_score): print(f&#x27;小姐姐名字是：&#123;sorted_score[i][0]&#125; | 颜值名次是：第&#123;i+1&#125;名 | 颜值分数是：&#123;sorted_score[i][1]&#125;&#x27;) 可以看到result字段里面的beauty就是代表对小姐姐的颜值评分。效果如下： 调用颜值检测接口已经写好了，下面我们要遍历之前保存的所有小姐姐直播照片，对每个进行颜值打分。 123456789101112131415161718192021222324252627path = &#x27;DATA\\颜值检测\\img&#x27;img_list = os.listdir(path)# print(img_list)score_dict =&#123;&#125;for img in img_list: try: # 提取主播名字 name = img.split(&#x27;.&#x27;)[0] # 构建图片路径 img_path = path + &#x27;//&#x27; + img # 调用颜值检测接口 face_score = face_input(img_path) # print(face_score) score_dict[name] = face_score except: print(f&#x27;正在检测&#123;name&#125;| 检测失败&#x27;) else: print(f&#x27;正在检测&#123;name&#125;| \\t\\t 颜值打分为：&#123;face_score&#125;&#x27;)sorted_score = sorted(score_dict.items(), key=lambda x: x[1], reverse=True)# print(sorted_score)for i, j in enumerate(sorted_score): print(f&#x27;小姐姐名字是：&#123;sorted_score[i][0]&#125; | 颜值名次是：第&#123;i+1&#125;名 | 颜值分数是：&#123;sorted_score[i][1]&#125;&#x27;) 最后我们就只需要按照颜值分数进行降序排列，就可以选出颜值最高的小姐姐啦~ 1sorted_score ``=` `sorted``(score_dict.items(), key``=``lambda` `x: x[``1``], reverse``=``True``)``# print(sorted_score)` `for` `i, j ``in` `enumerate``(sorted_score):`` ``print``(f``&#x27;小姐姐名字是：&#123;sorted_score[i][0]&#125; | 颜值名次是：第&#123;i+1&#125;名 | 颜值分数是：&#123;sorted_score[i][1]&#125;&#x27;``) 通过颜值检测，这样就可以找到颜值最高的小姐姐了，颜值打分有90分以上。今天我们就到这里，明天继续努力！不说了，赶紧看直播去~ 如果本篇博客有任何错误，请批评指教，不胜感激 ！ 到此这篇关于用python写个颜值评分器筛选最美主播的文章就介绍到这了,更多相关python颜值评分器内容请搜索脚本之家以前的文章或继续浏览下面的相关文章希望大家以后多多支持脚本之家！","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"win永久激活数字证书+启动盘制作","slug":"win永久激活数字证书","date":"2021-11-11T08:38:19.000Z","updated":"2022-05-23T15:37:33.050Z","comments":true,"path":"2021/11/11/cl3sojxg4002u5cbh3h67d8or/","link":"","permalink":"https://muyangit.github.io/2021/11/11/cl3sojxg4002u5cbh3h67d8or/","excerpt":"","text":"下载HWIDGen_v61.01_CHS.exe 12345678910Win+R 输入：slmgr.vbs -dlv 显示：最为详尽的激活信息，包括：激活ID、安装ID、激活截止日期slmgr.vbs -dli 显示：操作系统版本、部分产品密钥、许可证状态slmgr.vbs -xpr 显示：是否永久激活注意：可能部分国产杀毒软件会报毒，请关闭杀毒再使用此工具激活系统，否则可能会激活 Windows 10 失败。 WinSetupFromUSB制作多系统U盘引导启动*2016年06月06日 17:29:14* *epsilon1* *阅读数 18591* *版权声明：本文为博主原创文章，未经博主允许不得转载。 https://blog.csdn.net/qq_20480611/article/details/51597018\\* *重装系统有各种方式，比较常见的有做系统引导U盘、刻录PE、硬盘一键安装等。但是有很多缺点，国内大部分用的Ghost系统，内含各种捆绑软件，系统极其不安全、稳定，另外制作U盘启动也只能做一个系统的安装盘，如果想换个系统还要另外刻录，费时费力。* 0x00 简介 *WinSetupFromUSB是一款制作从usb磁盘(u盘和移动硬盘)启动安装操作系统的强大工具，支持各种windows、pe、linux操作系统。Windows纯净镜像请在**MSDN我告诉你**下载。各种Linux镜像请在各自官网下载。（所有镜像都是ISO文件）* 0x01 软件下载 *请访问官网下载最新版本**http://www.winsetupfromusb.com* 0x02 操作步骤 *准备好一个大容量U盘（资料请备份好），容量越大越好，因为这个软件的优势就是可以写入多个系统并引导启动，打开软件，请按照如下截图勾选，请参照说明。* ** 1windows镜像选--&gt; msdn中的择 初始发行 版本，可以直接写入，不要选择update版本 123456***\\*步骤说明：\\**** ***\\*\\*******\\*1、第一次使用需要勾选格式化U盘（之后使用就不需要了）\\**** ***\\--&gt; 之后可以直接增加写入各版本或系统镜像\\*******\\*2、格式化选择FAT32，如果系统镜像大于4G\\*******\\*请选择NTFS\\**** ***\\*\\*******\\*3、勾选对应系统类型\\**** ***\\*\\*******\\*4、选择系统镜像\\**** ***\\*\\*******\\*5、点击开始格式化并写入镜像到U盘\\**** *必要说明：* ***1、首次使用需要格式化，之后请不要勾选Auto Format* ***2、可以多次使用，意味着多个相同类型系统需要分多次操作* 0x03 删除引导记录 *如果系统镜像出现问题无法引导或者想删除多余的引导项，可以在官网找到完整的操作过程：**http://www.winsetupfromusb.com/faq/* *，这里做简要描述：* ***1、Windows 7 及以上版本：* ***删除/WINSETUP/下面对应的系统目录，然后使用工具BOOTICE编辑/boot/bcd和/efi/microsoft/boot/bcd 删除不需要的引导记录。* ****** *2、Linux：* ***删除/ISO下面的对应文件，然后使用文本工具编辑根目录下的menu.lst文件，将下面的代码删除：（首行title 后面是镜像名称）* ** 0x04 手动添加纪录 *1、Windows：* ***目前我还不知道如何添加Windows的引导记录* *2、Linux：* ***如上所述，既然我们可以通过修改文本文件删除Linux引导，那么同样可以反过来添加引导。只需要按照格式复制一份引导记录即可，注意修改其中的镜像名称，然后把对应镜像复制到ISO目录下。* 0x05 模拟测试 *启动镜像刻录完成后就可以测试了，如果都用真机未免费时，这里先用自带的Qemu测试引导记录是否存在：* ***选择FBinstTool，然后点击Qemu测试：* **** 0x06 注意事项 *1、上面提到刻录多个同类型系统需要分开多次操作，但是我在制作过程中发现第二次竟然无法写入，Google说系统语言改成English就可以了。* ** *2、低版本可能会谜一样的出现找不到MBR的问题：* *****真是把我坑惨了！知道为了刻录那么多系统我重新格式化了多少遍吗！每次刻录Windows都显示这个问题，Google都找不到解决方法，然后我果断去官网，发现已经更新到1.6版本了，于是用最新的就好了。* *VMware Workstation 虚拟机使用无线wifi上网配置**参考文档：* *转载/VMware Workstation环境下的Linux网络设置/适用于无线网络* *VMware Workstation 在嵌入式开发中经常会遇到，但是显示大多数人使用开发环境是Win10 + 无线网卡，针对这种情况，需要配置虚拟机的上网环境使用的是NAT模式，将配置过程进行描述：* *1. 打开Win10网络配置，操作如下：* *2. 在虚拟机菜单中进行配置，选择编辑-&gt;虚拟网络编辑器 ,按照以下方法进行配置：* *3. 设置Linux系统的网络适配器，使用NAT模式，如下操作：* *4. 进入linux 系统中进行配置，点击系统-&gt;网络设置，并进行如下设置：* *5. 重启Linux系统，完成配置过程；* *单文件* *B**ios设置* *启用功能*","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"Windows上使用bat实现备份一个月内的数据库数据到文件","slug":"Windows上使用bat实现备份一个月内的数据库数据到文件","date":"2021-11-11T08:12:33.000Z","updated":"2022-05-23T15:37:33.062Z","comments":true,"path":"2021/11/11/cl3sojxfm001m5cbh68l6afrm/","link":"","permalink":"https://muyangit.github.io/2021/11/11/cl3sojxfm001m5cbh68l6afrm/","excerpt":"","text":"Windows上使用bat实现备份一个月内的数据库数据到文件 霸道流氓气质 2021-08-15 16:07:12 32 收藏 分类专栏： 架构之路 文章标签： bat 版权 脚本内容： 123456789101112131415161718192021222324@echo offsetlocal enabledelayedexpansion::备份数据库名字set dataBase=fzysset dataBaseTwo=fzys-nacos::间隔时间set INTERVAL=10 :Again::每7天重置一次for /l %%i in (1,1,7) do ( echo %date% %time:~0,8% ::文件名 set FileName=%dataBase%_%%i.sql echo !FileName! &quot;C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump&quot; -h 127.0.0.1 -uroot -p123456 %dataBase%&gt; &quot;D:\\\\dataBak\\\\!FileName!&quot; set FileNameTwo=%dataBaseTwo%_%%i.sql echo !FileNameTwo! &quot;C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump&quot; -h 127.0.0.1 -uroot -p123456 %dataBaseTwo%&gt; &quot;D:\\\\dataBak\\\\!FileNameTwo!&quot; timeout %INTERVAL%)goto Again 1、注意这里的间隔时间为10秒，保存近7次的记录，如果要一天备份一次，备份一个月的，要将INTERVAL设置为86400，将下面的for循环 的7改为30，这样就会每天备份一次，累计备份30天内的。 2、这里是备份两个数据库的数据，数量可以根据自己需要修改。 用批处理文件自动备份文件及文件夹，并自动删除n天前的文件123456789101112131415161718 @echo off rem 格式化日期 rem date出来的日期是&quot;2006-02-22 星期三&quot;，不能直接拿来使用，所以应该先格式化一下 rem 变成我们想要的。date:~0,4的意思是从0开始截取4个字符 set d=%date:~0,4%%date:~5,2%%date:~8,2% rem 设定压缩程序路径，这里用的是WINRAR的rar.exe进行打包的 set path=C:\\Program Files\\WinRAR rem 设定要备份的目录 set srcDir=D:\\databasc rem 设定备份文件所在目录 set dstDir=E:\\temp\\backup rem 设定备份文件的前缀,目前为temp,前缀为backup set webPrefix= rem 如果文件不存在,开始备份 if not exist %dstDir%%webPrefix%%d%.rar start Rar a -r %dstDir%%webPrefix%%d%.rar %srcDir% @echo on ·``` 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859 @echo off rem ****************************** rem * 按时间删除文件目录的批处理 * rem ****************************** rem 设置临时目录的路径 set tempDir=%tmp%\\remove_%date:~0,10% if not exist %tempDir% md %tempDir% rem 设置处理日期的脚本文件的路径 set scriptFile=%tempDir%\\get_date.vbs rem 获得要保留的天数 set days=%~1 if &quot;%days%&quot; == &quot;&quot; goto printUsage rem 获得目标目录的路径 set dirPath=%~2 if &quot;%dirPath%&quot; == &quot;&quot; set dirPath=. rem 获得要操作的文件形式 set fileSpec=%~3 if &quot;%fileSpec%&quot; == &quot;&quot; set fileSpec=*.* rem 生成计算日期的脚本文件并获得删除的截止日期 echo d=date()-%1 &gt; %scriptFile% echo s=right(&quot;0000&quot; ^&amp; year(d),4) ^&amp; &quot;-&quot; ^&amp; right(&quot;00&quot; ^&amp; month(d),2) ^&amp; &quot;-&quot; ^&amp; right(&quot;00&quot; ^&amp; day(d),2) &gt;&gt; %scriptFile% echo wscript.echo s &gt;&gt; %scriptFile% for /f %%i in (&#x27;cscript /nologo %scriptFile%&#x27;) do set lastDate=%%i rem 处理目标目录里的每个对象 for /f &quot;tokens=1,2,3* delims=&lt;&gt; &quot; %%i in (&#x27;dir &quot;%dirPath%\\%fileSpec%&quot; /a /-c /tc&#x27;) do call :proc &quot;%%i&quot; &quot;%%j&quot; &quot;%%k&quot; &quot;%%l&quot; goto :done rem 处理目标目录里对象的过程 :proc rem 获得对象的创建日期并判断是否为有效格式 set fileDate=%~1 echo %fileDate% | findstr &quot;[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]&quot; &gt; nul if errorlevel 1 goto end rem 获得对象的类型 set fileType=%~3 if &quot;%fileType%&quot; == &quot;&quot; goto end rem 获得对象的名称 set fileName=%~4 if &quot;%fileName%&quot; == &quot;&quot; goto end if &quot;%fileName%&quot; == &quot;.&quot; goto end if &quot;%fileName%&quot; == &quot;..&quot; goto end if &quot;%fileName%&quot; == &quot;字节&quot; goto end if &quot;%fileName%&quot; == &quot;可用字节&quot; goto end rem 判断对象日期是否小于或等于删除的截止日期 if &quot;%fileDate:~0,10%&quot; leq &quot;%lastDate%&quot; ( echo deleting &quot;%fileName%&quot; ... if &quot;%fileType%&quot; == &quot;DIR&quot; ( rd /s /q &quot;%dirPath%\\%fileName%&quot; ) else ( del /q /f &quot;%dirPath%\\%fileName%&quot; ) ) goto end :error echo An error occurred during backuping. :done rd /s /q %tempDir% goto end :printUsage echo Usage: %0 ^&lt;Days^&gt; [Work directory] [Target file specification (can include wildcards)] goto end :end Windows自动备份（每天、每月最后一天、每个周日），自动清除备份命令直接上BAT文件的内容了，完整代码如下。 备份效果：保留最新7天的网站备份、最新4个周末的网站备份，每个月底的备份永久保留。 使用的WinRAR做文件压缩，请自行安装并注意命令中WinRAR的路劲、备份文件夹、存放路劲、3个异地存放路劲，根据应用需要调整。 将该BAT文件配置到Windows“任务计划程序”中，频率为每天固定时间运行（比如23点），即可实现自动备份。 下面是关于备份命令的几点简单说明（详细参数或用法请自行查询详细资料了解）： 命令中::代表注释 set后定义的是变量名及值 %%之间加变量名，是取变量的值，%date:~0,4%指的是取系统时间中的前四位即年份数字 WinRAR压缩，排除了带.log的文件 xcopy即复制命令，/d指比较目标和原目录，目标目录为空则复制所有，否则只复制更新过的，/y指禁止提示确认要覆盖已存在的目标文件 FORFILES命令，/P指定Path ，表明要从哪里开始搜索；/M指按照条件搜索文件，默认是*.* ；/C指在每个文件上运行指定的Command 。带有空格的命令字符串必须用引号括起来。默认的Command 是”cmd /c echo @file”；/D指选择日期大于或等于(+ )（或者小于或等于(- )）指定日期的文件，不带时间参数则代表与当前日期比较 代码中判断是否是周日，使用的是“日”这个字，考虑的是中文环境，英文环境请自行修改 闰年判断已经调整为标准的闰年判断条件（条件1：公历年份是4的倍数，且不是100的倍数；条件2：公历年份是整百数的，必须是400的倍数），%%代表取余 &gt;&gt;用来向文件中写日志 新补充：set /a m=%date:5,2%*1 这一行有BUG，8月份带出的数字是08，默认识别为八进制，且为不识别的八进制数字。错误信息：无效数字。数字常数只能是十进制(17)，十六位进制(0x11)或 八进制(021)。调整为：set m=%date:5,2% 即可。因为后面已经有if %m:0,1%==0 set /a m=%m:1,1%*1 这句处理0开头的情况。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879@echo off::年月日字符串set str_date=%date:~0,4%%date:~5,2%%date:~8,2%::星期几set str_week_val=%date:~-1%::本地要备份的文件夹路径set str_webpath_local=D:\\wwwroot::本地备份文件存放路径set str_path_local=D:\\web_bak::网站压缩包名称前缀set str_rar_name=MH_WEB::异地 备份路径set str_path_day=z:\\最新7天网站备份::异地 备份路径set str_path_weekend=z:\\最新4个周末的网站备份::异地 备份路径set str_path_month=z:\\每个月底的网站备份::取两位月份数字set m=%date:~5,2%::第一位为0则只取个位数if %m:~0,1%==0 set /a m=%m:~1,1%*1::取四位年份数字（这个命令用不到5位数那年吧）set /a x=%date:~0,4%::闰年判断条件1 %%代表取余set /a y=%x%*1%%4set /a y2=%x%*1%%100::闰年判断条件2 %%代表取余set /a y3=%x%*1%%400::默认2月份只有28天set ld=28::满足闰年条件1if %y%==0 ( if %y2% NEQ 0 set ld=29)::满足闰年条件2if %y3%==0 set ld=29for %%i in (1 3 5 7 8 10 12)do (if %m%==%%i set /a ld=31)for %%i in (4 6 9 11)do (if %m%==%%i set /a ld=30)::echo 日期：%ld%::pause::当月月底的年月日字符串set str_monthend_val=%date:~0,4%%date:~5,2%%ld%%c:cd C:\\Program Files\\WinRAR\\echo %time%开始压缩 &gt;&gt;%str_path_local%\\%str_date%_log.bakrar a -u -x*.log* %str_path_local%\\%str_rar_name%%str_date%.rar %str_webpath_local%echo %time%结束压缩 &gt;&gt;%str_path_local%\\%str_date%_log.bakecho. &gt;&gt;%str_path_local%\\%str_date%_log.bakecho %time%开始复制 &gt;&gt;%str_path_local%\\%str_date%_log.bakif &quot;%str_date%&quot;==&quot;%str_monthend_val%&quot; ( xcopy %str_path_local%\\%str_rar_name%%str_date%.rar %str_path_month% /d/y) else (if &quot;%str_week_val%&quot;==&quot;日&quot; ( xcopy %str_path_local%\\%str_rar_name%%str_date%.rar %str_path_weekend% /d/y ::删除4周前的rar文件 FORFILES /P %str_path_weekend% /M *.rar /D -22 /C &quot;cmd /c echo %time% deleting..@file.. &amp;del @file&quot;&gt;&gt;%str_path_local%\\%str_date%_del.bak) else ( xcopy %str_path_local%\\%str_rar_name%%str_date%.rar %str_path_day% /d/y ::删除7天前的rar文件 FORFILES /P %str_path_day% /M *.rar /D -7 /C &quot;cmd /c echo %time% deleting..@file.. &amp;del @file&quot;&gt;&gt;%str_path_local%\\%str_date%_del.bak))echo %time%结束复制 &gt;&gt;%str_path_local%\\%str_date%_log.bakecho. &gt;&gt;%str_path_local%\\%str_date%_log.bak::删除本地1天前的rar文件FORFILES /P %str_path_local% /M *.rar /D -1 /C &quot;cmd /c echo %time% deleting..@file.. &amp;del @file&quot;&gt;&gt;%str_path_local%\\%str_date%_del.bak::删除本地7天前的bak记录文件FORFILES /P %str_path_local% /M *.bak /D -7 /C &quot;cmd /c echo %time% deleting..@file.. &amp;del @file&quot;&gt;&gt;%str_path_local%\\%str_date%_del.bak 本文首发于我的CSDN博客：https://blog.csdn.net/n_ithero/article/details/104037999 Windows自动压缩文件夹，备份并上传到网盘 贰狐 2019-12-09 / 0 评论 / 2,118 阅读 / 未收录，点击推送 12/09 日常生活中有一些需要定期备份的bot目录，但是手动备份太麻烦了，如果用Windows的计划任务搭配bat脚本进行自动备份，并上传到网盘呢？ 首先你需要有一个Onedrive或百度网盘。我比较推荐Onedrive是因为可以白嫖。当然，用百度网盘，然后设置某个目录为自动同步的文件夹也是可以的。 微软为每个账号提供空间为5GB的Onedrive，其实也够用了。 如果不够用可以白嫖↓ 申请OneDrive 5T 网盘便民方法和邮箱免费office365教育版A1子号（5Tonedrive网盘），可以自助申请 之后安装一下 7-Zip 和 Onedrive 大功告成，然后复制下面的代码，按说明替换中间的目录，保存成auto_backup.bat 注意：所有目录中不得包含中文 123456789101112131415@echo off::设置7z的命令行程序路径set zip7=C:\\Program Files\\7-Zip\\7z.exe::设置压缩包保存路径，即你的onedrive本地路径set Save=D:\\Onedrive\\OneDrive - User\\BMX_backup::当天日期，备份文件名set curdate=%date:~0,4%%date:~5,2%%date:~8,2%_%time:~0,2%%time:~3,2%%time:~6,2%::设置要打包压缩的文件夹set zipfile=D:\\Mirai_bmx ::备份命令 -xr!.svn过滤\\data\\image\\文件夹 mx0是存储模式压缩&quot;%zip7%&quot; a -tzip &quot;%Save%\\cq_bmx_%curdate%.zip&quot; &quot;%zipfile%&quot; -mx0 -xr&quot;!*\\data\\image\\&quot;::删除超过7天的备份--start--forfiles /p &quot;%Save%&quot; /m *.zip -d -7 /c &quot;cmd /c del /f @path&quot; 到这里其实就可以直接设置计划任务，每天定时运行了 不过由于我这里需要对酷Q进行备份，运行中的程序是无法被压缩的。 并且程序长时运行也可能出现问题，所以我们做一个自动重启的步骤。 保存下列代码放在上述代码前面，用于强行结束Mirai（如果是骰子请设置自动保存，不然可能会丢失数据）。 123C:\\Windows\\system32\\taskkill.exe /f /im MiraiOK_windows_386.exeC:\\Windows\\system32\\taskkill.exe /f /im MiraiOK.exeC:\\Windows\\system32\\taskkill.exe /f /im java.exe&lt;/div&gt; 如果是XQ的话，可以用，同样调用Taskkill，但是由于在某些系统上无法执行中文bat，所以需要加CHCP。不过XQ注意定时清理image目录，不然压缩时候会爆炸，几个G的图片在那压缩，可就麻烦了。 123456789echo offCHCP 65001echo -------------------------echo 重启中，请稍后...echo -------------------------C:\\Windows\\system32\\taskkill.exe /f /im 先驱.exe保存下列代码，替换目录成bot的启动快捷方式，用于在备份后顺序启动（而不是开备份脚本的同时就打开了bot）。就起名叫start_mirai.bat吧start D:\\Mirai_bmx\\Mirai_bmx.lnk 之后给这两个bat做一个控制开关，复制并替换上面两个脚本的存放位置，起名叫switch_mirai.bat 1C:/auto_backup/auto_backup.bat&amp;&amp;;C:/auto_backup/start_mirai.bat 然后将 switch_mirai.bat 放入计划任务或是启动项中 启动项目录可以通过Win+R打开[运行]后输入 shell:startup 来快速打开。 可以在Onedrive网页中将备份的目录设置为共享，这样就能在异地直接下载了！ %time:~6,2% 版权属于： 贰狐Blog - 一个笨蛋的博客 本文链接： Windows自动压缩文件夹，备份并上传到网盘 申请OneDrive 5T 网盘便民方法和邮箱免费office365教育版A1子号（5Tonedrive网盘），可以自助申请 之后安装一下 7-Zip 和 Onedrive 大功告成，然后复制下面的代码，按说明替换中间的目录，保存成auto_backup.bat 注意：所有目录中不得包含中文 123456789101112131415@echo off::设置7z的命令行程序路径set zip7=C:\\Program Files\\7-Zip\\7z.exe::设置压缩包保存路径，即你的onedrive本地路径set Save=D:\\Onedrive\\OneDrive - User\\BMX_backup::当天日期，备份文件名set curdate=%date:~0,4%%date:~5,2%%date:~8,2%_%time:~0,2%%time:~3,2%%time:~6,2%::设置要打包压缩的文件夹set zipfile=D:\\Mirai_bmx ::备份命令 -xr!.svn过滤\\data\\image\\文件夹 mx0是存储模式压缩&quot;%zip7%&quot; a -tzip &quot;%Save%\\cq_bmx_%curdate%.zip&quot; &quot;%zipfile%&quot; -mx0 -xr&quot;!*\\data\\image\\&quot;::删除超过7天的备份--start--forfiles /p &quot;%Save%&quot; /m *.zip -d -7 /c &quot;cmd /c del /f @path&quot; 到这里其实就可以直接设置计划任务，每天定时运行了 不过由于我这里需要对酷Q进行备份，运行中的程序是无法被压缩的。 并且程序长时运行也可能出现问题，所以我们做一个自动重启的步骤。 保存下列代码放在上述代码前面，用于强行结束Mirai（如果是骰子请设置自动保存，不然可能会丢失数据）。 123C:\\Windows\\system32\\taskkill.exe /f /im MiraiOK_windows_386.exeC:\\Windows\\system32\\taskkill.exe /f /im MiraiOK.exeC:\\Windows\\system32\\taskkill.exe /f /im java.exe&lt;/div&gt; 如果是XQ的话，可以用，同样调用Taskkill，但是由于在某些系统上无法执行中文bat，所以需要加CHCP。不过XQ注意定时清理image目录，不然压缩时候会爆炸，几个G的图片在那压缩，可就麻烦了。 123456789echo offCHCP 65001echo -------------------------echo 重启中，请稍后...echo -------------------------C:\\Windows\\system32\\taskkill.exe /f /im 先驱.exe保存下列代码，替换目录成bot的启动快捷方式，用于在备份后顺序启动（而不是开备份脚本的同时就打开了bot）。就起名叫start_mirai.bat吧start D:\\Mirai_bmx\\Mirai_bmx.lnk 之后给这两个bat做一个控制开关，复制并替换上面两个脚本的存放位置，起名叫switch_mirai.bat 1C:/auto_backup/auto_backup.bat&amp;&amp;;C:/auto_backup/start_mirai.bat 然后将 switch_mirai.bat 放入计划任务或是启动项中 启动项目录可以通过Win+R打开[运行]后输入 shell:startup 来快速打开。 可以在Onedrive网页中将备份的目录设置为共享，这样就能在异地直接下载了！ 参考资料windows bat脚本7zip压缩文件夹，过滤文件夹 - 黑夜的白羊如何设置2个bat文件严格按照顺序执行 - 百度知道 画图模式文本 7天之前的所有文件空文件文件夹删除 12345678@echo offset DestFolder=&quot;F:\\本地仓库\\GitbakCloud189&quot;forfiles /p %DestFolder% /s /d -7 /c &quot;cmd /c del/f/s/q @path&quot;for /f &quot;delims=&quot; %%a in (&#x27;dir /ad /b /s %DestFolder%^|sort /r&#x27;) do ( rd &quot;%%a&quot;&gt;nul 2&gt;nul &amp;&amp;echo 空目录&quot;%%a&quot;成功删除！ )pause echo 任务完成!","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"bat","slug":"bat","permalink":"https://muyangit.github.io/tags/bat/"}],"author":"MuyanGit"},{"title":"bat批处理实现守护进程 Windows使用bat批处理实现守护进程脚本分享","slug":"bat批处理实现守护进程-Windows使用bat批处理实现守护进程脚本分享","date":"2021-11-10T19:34:10.000Z","updated":"2022-05-23T15:37:33.106Z","comments":true,"path":"2021/11/11/cl3sojxfq001v5cbheleradcb/","link":"","permalink":"https://muyangit.github.io/2021/11/11/cl3sojxfq001v5cbheleradcb/","excerpt":"","text":"想了解Windows使用bat批处理实现守护进程脚本讲解的相关内容吗，在本文为您仔细讲解bat批处理实现守护进程的相关知识和一些Code实例，欢迎阅读和指正，我们先划重点：Windows,bat,批处理,守护进程,脚本，下面大家一起来学习吧。 本文转自网络，由于找不到原作者，因而无法知道出处。如果有幸让原作者看到，请联系我加上。先转载至此。 最近几天加班加疯掉了，天天晚上没法睡。开发部的一个核心程序总是会自己宕机，然后需要手工去起，而这个服务的安全级别又很高，只有我可以操作，搞得我晚上老没法睡，昨晚实在受不了了，想起以前在hp-ux下写的shell守护进程，这回搞个windows下的bat版守护程序吧，当时晚上思路已经很迟钝了，就叫了个兄弟让他写了，上去后运行效果不错，至少昨晚我安心睡了7小时。 早上来把程序改完善一些，增加了记录等功能。 实现： 检查是否有notepad，要用的话就算成自己的进程名，如果进程宕了就过会自动重启（会在当前目录下生成一个start.bat） 1234567891011121314151617181920212223242526272829303132333435@echo offset _task=notepad.exeset _svr=c:\\windows\\notepad.exeset _des=start.bat:checkstartfor /f &quot;tokens=5&quot; %%n in (&#x27;qprocess.exe ^| find &quot;%_task%&quot; &#x27;) do ( if %%n==%_task% (goto checkag) else goto startsvr) :startsvrecho %time% echo ********程序开始启动********echo 程序重新启动于 %time% ,请检查系统日志 &gt;&gt; restart_service.txtecho start %_svr% &gt; %_des%echo exit &gt;&gt; %_des%start %_des%set/p=.&lt;nulfor /L %%i in (1 1 10) do set /p a=.&lt;nul&amp;ping.exe /n 2 127.0.0.1&gt;nulecho .echo Wscript.Sleep WScript.Arguments(0) &gt;%tmp%\\delay.vbs cscript //b //nologo %tmp%\\delay.vbs 10000 del %_des% /Qecho ********程序启动完成********goto checkstart:checkagecho %time% 程序运行正常,10秒后继续检查.. echo Wscript.Sleep WScript.Arguments(0) &gt;%tmp%\\delay.vbs cscript //b //nologo %tmp%\\delay.vbs 10000 goto checkstart set 限制解除 首页 博客 下载 问答 社区 搜索 登入 Windwos bat进程守护 解决 kafka2.8.0 Failed to clean up log for __consumer_offsetsDon’t Look Down 2021-10-23 23:36:03 77 收藏 分类专栏： kafka 文章标签： kafka window 1024程序员节 windwos环境下使用kafka2.8.0，出现 ERROR Failed to clean up log for __consumer_offsets-） 问题参考 原因 解决： bat 进程守护运行 无黑窗口运行模式 问题参考123456ERROR Failed to clean up log for __consumer_offsets-42 in dir C:\\tmp\\kafka-logs due to IOException (kafka.server.LogDirFailureChannel)java.nio.file.FileSystemException: C:\\tmp\\kafka-logs\\__consumer_offsets-42\\00000000000000000000.timeindex.cleaned -&gt;C:\\tmp\\kafka-logs\\__consumer_offsets-42\\00000000000000000000.timeindex.swap: 另一个程序正在使用此文件，进程无法访问。....java.nio.file.FileSystemException12345 Windows Kafka ERROR Failed to clean up log for __consumer_offsets[Kafka错误]—–kafka在window下出现另一个程序正在使用此文件,进程无法访问的错误 原因kafka日志清理策略触发，在window环境下，在打开需要清理的日志的同时，对该文件进行重命名操作是不被允许的（linux环境下可以），从而导致kafka宕机。 方案一：修改日志清理策略，将日志清理时间修改为无穷（-1），使kafka数据日志永久存储 缺点：（1）磁盘空间会不断增大方案二：在window上搭建虚拟机（docker同理，且更麻烦），然后在虚拟机中部署kafka 缺点：（1）运维人员需要懂点linux运维知识（2）增加内存消耗方案三：上面文章中有写到重新打补丁包，我试过在2.8.0-2.13.0版本中重新打包，结果还是不行。 解决： bat 进程守护运行用bat脚本对kafka的运行 进行守护，每10秒检查端口运行状态，运行异常时，重新启动 2.注意：重启时 会清空kafka的日志文件 kafka_run_daemon.bat 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657@echo off:: 执行的命令set _startBat=D:\\software\\kafka\\start.bat:: 日志所在位置set _kafkaLogs=D:\\software\\kafka\\tmp:checkstart:: 端口方式进行检查netstat -ano | findstr 0.0.0.0 | findstr :19092 | findstr LISTENING &gt; nulif %ERRORLEVEL% EQU 0 ( echo 运行正常GOTO checkag ) else ( echo 没有运行GOTO startsvr ) :startsvrecho %time% kafka运行状态异常、正在重新启动:: 检查 zookeeperecho %time% 检查zookeeper状态netstat -ano | findstr 0.0.0.0 | findstr :12181 | findstr LISTENING &gt; nulif %ERRORLEVEL% EQU 0 ( echo %time% zookeeper正在运行FOR /F &quot;tokens=5&quot; %%P IN (&#x27;netstat -a -n -o ^| findstr :12181&#x27;) DO TaskKill.exe /PID %%P -t -f echo %time% zookeeper结束完成 ) else ( echo %time% zookeeper没有运行):: 删除tmp zookeepr和kafka的运行日志echo %time% 删除tmp zookeepr和kafka的运行日志rd/s/q %_kafkaLogs%echo %time% 日志清理完成:: 开始启动echo %time% 开始启动start %_startBat%set/p=.&lt;nulfor /L %%i in (1 1 10) do set /p a=.&lt;nul&amp;ping.exe /n 2 127.0.0.1&gt;nulecho .echo Wscript.Sleep WScript.Arguments(0) &gt;%tmp%\\delay.vbs cscript //b //nologo %tmp%\\delay.vbs 40000 ::计划40秒完成启动echo %time% 启动操作完成，检查存活状态GOTO checkstart:checkagecho %time% 程序运行正常,10秒后继续检查...echo Wscript.Sleep WScript.Arguments(0) &gt;%tmp%\\delay.vbs cscript //b //nologo %tmp%\\delay.vbs 10000 GOTO checkstart1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556 start.bat 卡夫卡启动脚本 12345start .\\bin\\windows\\zookeeper-server-start.bat .\\config\\zookeeper.propertiestimeout 10start .\\bin\\windows\\kafka-server-start.bat .\\config\\server.propertiesexit1234 使用方法 ，将两个bat复制到kafka根目录，配置好bat 里面的日志位置（此处将kafka和zookeeper都放在同一tem文件夹），直接运行 kafka_run_daemon.bat，也可添加到系统服务中去 本地测试，挂掉后可以正常重启： 无黑窗口运行模式在上面的进程守护基础之上 run_zookeeper.vbs 12345Dim WinScriptHostSet WinScriptHost = CreateObject(&quot;WScript.Shell&quot;) WinScriptHost.Run &quot;.\\bin\\windows\\zookeeper-server-start.bat .\\config\\zookeeper.properties&quot;, 0, True Set WinScriptHost = Nothing1234 run_kafka.vbs 12345Dim WinScriptHostSet WinScriptHost = CreateObject(&quot;WScript.Shell&quot;) WinScriptHost.Run &quot;.\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties&quot;, 0, True Set WinScriptHost = Nothing1234 start_vbs.bat 12345start wscript runZookeeper.vbstimeout 10start wscript runKafka.vbsexit1234 run_zookeeper.vbs和run_kafka.vbs复制到kafka根目录， **修改 *kafka_run_daemon.bat*脚本中的_startBat=start_vbs.bat运行kafka_run_daemon.bat后 kafka和zookeeper不会出现黑窗口。 这不是好的解决办法 ~~有其他解决办法的话，望看到的大哥们告知一下。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"Typora使用了0号显卡，怀疑是导致其卡顿的原因Typora启动加速","slug":"Typora使用了0号显卡，怀疑是导致其卡顿的原因Typora启动加速","date":"2021-11-10T15:34:13.000Z","updated":"2022-05-23T15:37:33.076Z","comments":true,"path":"2021/11/10/cl3sojxfd00175cbh1d9sbucp/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxfd00175cbh1d9sbucp/","excerpt":"","text":"Typora使用了0号显卡，怀疑是导致其卡顿的原因。 于是决定关闭GPU, 找到Typora的配置文件 大概在如下所示位置 c:\\Users\\AppData\\Roaming\\Typora\\conf\\conf.user.json打开后修改flags, 保存并重启typora，就不再使用GPU了: “flags”: [[“disable-gpu”]]禁用GPU之后，软件启动的时候比之前慢，但是打开之后不卡顿了。 怀疑是跟Chromium，GPU驱动有冲突。 有兴趣的同学可以试一下换1号GPU支持来试一下。 12345678910111213141516171819202122232425262728/** For advanced users. */&#123; &quot;defaultFontFamily&quot;: &#123; &quot;standard&quot;: null, //String - Defaults to &quot;Times New Roman&quot;. &quot;serif&quot;: null, // String - Defaults to &quot;Times New Roman&quot;. &quot;sansSerif&quot;: null, // String - Defaults to &quot;Arial&quot;. &quot;monospace&quot;: null // String - Defaults to &quot;Courier New&quot;. &#125;, &quot;autoHideMenuBar&quot;: false, //Boolean - Auto hide the menu bar unless the `Alt` key is pressed. Default is false. // Array - Search Service user can access from context menu after a range of text is selected. Each item is formatted as [caption, url] &quot;searchService&quot;: [ [&quot;Search with Google&quot;, &quot;https://google.com/search?q=%s&quot;] ], // Custom key binding, which will override the default ones. // see https://support.typora.io/Shortcut-Keys/#windows--linux for detail &quot;keyBinding&quot;: &#123; // for example: // &quot;Always on Top&quot;: &quot;Ctrl+Shift+P&quot; // All other options are the menu items &#x27;text label&#x27; displayed from each typora menu &#125;, &quot;monocolorEmoji&quot;: false, //default false. Only work for Windows &quot;maxFetchCountOnFileList&quot;: 500, &quot;flags&quot;: [[&quot;disable-gpu&quot;]] // default [], append Chrome launch flags, e.g: [[&quot;disable-gpu&quot;], [&quot;host-rules&quot;, &quot;MAP * 127.0.0.1&quot;]]&#125;","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"https://muyangit.github.io/tags/Typora/"}],"author":"MuyanGit"},{"title":"更改Chrome浏览器安装位置的方法谷歌mklink","slug":"更改Chrome浏览器安装位置的方法谷歌mklink","date":"2021-11-10T15:12:09.000Z","updated":"2022-05-23T15:37:32.995Z","comments":true,"path":"2021/11/10/cl3sojxgb003d5cbh16trgu4e/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxgb003d5cbh16trgu4e/","excerpt":"","text":"123456rd/s/q &quot;C:\\Program Files\\Google\\Chrome&quot;rd/s/q &quot;C:\\Program Files (x86)\\Google&quot; rd/s/q &quot;C:\\Users\\HI\\AppData\\Local\\Google&quot;mklink /d &quot;C:\\Program Files\\Google\\Chrome&quot; &quot;D:\\MySoftware\\Browsers\\Google\\Chrome&quot;mklink /d &quot;C:\\Program Files (x86)\\Google&quot; &quot;D:\\MySoftware\\Browsers\\Google&quot;mklink /d &quot;C:\\Users\\HI\\AppData\\Local\\Google&quot; &quot;D:\\MySoftware\\Browsers\\Google\\PersonData&quot; 谷歌浏览器移盘及mklink 命令使用不把安装的谷歌浏览器程序本身从C:盘移到D:盘上，而是把缓存文件、设置等移到别的盘 如果要移动安装的谷歌浏览器程序本身，把”%ProgramFiles(x86)%\\Google\\Chrome”剪切到D:盘，这样就变成了绿色版了，通过快捷方式运行即可。但这样有个问题，浏览器升级是个麻烦事，另外还要设置将点击网址时关联到这个浏览器上。 如果保持程序本身在C:盘，改缓冲区、临时文件夹等，可以这样： mklink命令将原缓存文件夹变为一个快捷方式，指向新定义的目录。如将”%LOCALAPPDATA%\\Google\\Chrome”下的”User Data”文件夹，通过管理员身份下的mklink命令改为指向D:下的某个文件夹 也可通过运行参数：–disk-cache-dir=D:\\XXXXXX 具体操作1.把C:\\Users\\用户名\\AppData\\Local\\Google\\Chrome下的Chrome文件夹删除或者改名； 2.打开CMD，运行 1mklink /j &quot;C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome&quot; D:\\Google\\Chrome 注意：C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome的 Chrome 文件夹先改成其它名字 比如 Chrome2, 然后当软链接创建完成后,就把这个Chrome2下面的所有东西复制到 “D:\\Google\\Chrome” 下面,然后再回去删除这个 Chrome2 ,创建软链接时,一定要保证 D:\\Google\\Chrome 这个文件夹是一个空的,里面不能有任何东西 3.效果图： image 4.带 /J 参数，创建目录联接。而且这个命令无需管理员权限。完成后C盘中这个文件不是快捷方式，相当于一个虚拟的文件夹，而这个文件夹真正存储位置是 D:\\Google\\Chrome，同样可以正常在C盘 Google\\Chrome目录下进行存储文件不占用这个文件夹的空间。 参考：https://www.cnblogs.com/yzw625/p/15498480.html#scroller-0)","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://muyangit.github.io/tags/Chrome/"}],"author":"MuyanGit"},{"title":"NodeJs 的安装及配置环境变量","slug":"NodeJs-的安装及配置环境变量","date":"2021-11-10T14:40:08.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/11/10/cl3sojxf5000s5cbhgklp1p7s/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxf5000s5cbhgklp1p7s/","excerpt":"","text":"set 限制解除 NodeJs 的安装及配置环境变量Alisone_li 2021-01-04 10:56:24 NodeJs 的安装及配置环境变量 一、Node.js 下载与安装 二、Node.js环境变量配置 三、国内镜像网站配置 一、Node.js 下载与安装下载 在 Node官网 上，下载对应的安装包这里下载的是 64位window系统 的安装文件 node-v14.15.3-x64 安装 点击安装文件，开始安装 node.js 点击 Next (下一步) 初次安装已安装NodeJs，再次安装 勾选同意选项(I accept the terms …)，并点击 Next (下一步) 选择node.js的安装目录，这里选择安装在E盘 接着一直点击 Next (下一步) 到下面的界面 点击 Install (安装) 点击 Finish，完成安装 使用 window + R 快捷键，启动 cmd命令行 验证 node.js 是否安装成功出现以上情况，即表示安装成功 二、Node.js环境变量配置 在上面已经完成了 node.js 的安装，即使不进行此步骤的环境变量配置也不影响node.js的使用 但是，若不进行环境变量配置，那么在使用命令安装 node.js全局模块 （如：npm install -g vue）时，会默认安装到C盘的路径 (C:\\Users\\hua\\AppData\\Roaming\\npm) 中 因此，需要配置 全局安装模块 node_global 以及 缓存目录 node_cache 的环境变量； 在node.js的安装目录中，新建两个文件夹 node_global 和 node_cache，分别用来存放安装的全局模块和全局缓存信息 创建完两个文件夹后，在cmd窗口中输入以下命令（两个路径即是两个文件夹的路径）： 12345# 设置全局模块安装路径npm config set prefix &quot;E:\\leading\\NodeJs\\info\\node_global&quot;# 设置全局缓存存放路径npm config set cache &quot;E:\\leading\\NodeJs\\info\\node_cache&quot; 命令执行，效果如图： 设置电脑环境变量，环境变量界面打开顺序：右键 “我的电脑”=》属性=》高级系统设置=》环境变量 ，具体实行过程，请看下图： 进入环境变量对话框，在【系统变量】中新建环境变量 NODE_PATH，值为 E:\\leading\\NodeJs\\info\\node_global\\node_modules，其中 E:\\leading\\NodeJs\\info\\node_global 是新创建的全局模块安装路径 eg: 修改【用户变量】中的 path 变量，将 C:\\Users\\86135\\AppData\\Roaming\\npm 修改为E:\\leading\\NodeJs\\info\\node_global eg: 修改前修改后 点击确定后，配置完成。 测试是否配置成功，在cmd窗口中输入以下指令 全局安装Vue模块 12npm install -g vue # -g 表示全局安装 执行效果，如图所示：vue 模块安装目录，如图所示：可以看出，node.js环境变量配置成功。 至此，node.js安装和环境变量配置全部完成。 注意 配置完，一定要重启，否则不生效 配置完，一定要重启，否则不生效 配置完，一定要重启，否则不生效 三、国内镜像网站配置配置国内镜像，解决模块安装缓慢或者失败的问题。 一般配置 淘宝npm镜像 直接切换 在 cmd 命令行中，通过命令配置淘宝镜像 12 npm install -g cnpm --registry=https://registry.npm.taobao.org1 使用淘宝镜像下载模块，即，将 npm 替换成 cnpm 即可 12 cnpm install # module_name1 切换工具 上述切换镜像的方式比较麻烦。这里推荐一款切换镜像的工具：nrm 使用 1npm 全局安装 1nrm 12npm install nrm -g 执行命令，效果如下： 通过 1nrm ls 命令，查看npm的仓库列表，带 1* 的就是当前选中的镜像仓库： 12nrm ls 执行命令，效果如下： 通过 1nrm use taobao 来指定要使用的镜像源： 12nrm use taobao 执行命令，效果如下： 最后，通过 1nrm test npm 来测试速度： 12nrm test npm 执行命令，效果如下：","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"NodeJs","slug":"NodeJs","permalink":"https://muyangit.github.io/tags/NodeJs/"}],"author":"MuyanGit"},{"title":"python安装教程（windows） - 知乎","slug":"python安装教程（windows）-知乎","date":"2021-11-10T14:37:04.000Z","updated":"2022-05-23T15:37:33.089Z","comments":true,"path":"2021/11/10/cl3sojxfw002f5cbh025b0xf3/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxfw002f5cbh025b0xf3/","excerpt":"","text":"首发于高级测试之路 python安装教程（windows） 杨和光 1、下载python（官网和云盘） A.官网下载 网址： Python Releases for Windowswww.python.org/downloads/windows/ 打开网址，点击Downloads-windows，如图操作： 选择自己需要的版本，点击： 选择适合自己windows的版本，x86-64是64位版本，x86是32位版本： executable installer 是可执行的安装版本，下载到本地后双击可以直接安装 下载完成后即可安装 B.云盘下载 链接：https://pan.baidu.com/s/1DV1rAUnr5Q8GmZkOnwgQAQ 提取码：drh8 2、安装python 选中自定义安装 勾选中“Add python3.7 to path”,可自动增加环境变量，不需要手动添加 直接下一步 修改路径 3、测试安装是否成功 win+R 运行cmd,输入“python” 安装成功后可输入“print”测试，如果打印成功，代表安装成功了哦 恭喜你，安装成功了！","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"python","slug":"python","permalink":"https://muyangit.github.io/tags/python/"}],"author":"MuyanGit"},{"title":"Windows Terminal 完美配置 PowerShell 7.1 - 知乎","slug":"Windows-Terminal-完美配置-PowerShell-7-1-知乎","date":"2021-11-10T12:24:13.000Z","updated":"2022-05-23T15:37:33.076Z","comments":true,"path":"2021/11/10/cl3sojxfn001p5cbhabl9fnjr/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxfn001p5cbhabl9fnjr/","excerpt":"","text":"首发于修辞与编程 Windows Terminal 完美配置 PowerShell 7.1 littleNewton 700 人赞同了该文章 坑边闲话：忆往昔岁月，不堪回首，伟大的 Windows 竟然拿不出一个像样的终端模拟器。mintty.exe 和 封装后的 cmder 之流，总是有各种问题，而且不兼容 emoji 字符。后来，全网 Windows 用户随着一个华丽的广告沸腾了，微软宣布了终端软件 Windows Terminal 的开发进程，而且开源！如今，Windows Terminal 正式版已经陪伴我们走过了很长一段时间，其稳定性和易用性已经非常不错，关键是颜值相当高。如果你是一个追求完美与和谐的 User，那么请跟上我的步伐，我们重新起航！ 重要提醒：本文的所有配置经过无数网友的多重考验，请勿在配置过程中突发奇想而走弯路，一定要认真阅读每一个段落、每一个句子！ 图 1：常规展示 图 2：在 git 目录下的效果。 1. 安装 Windows Terminal相信这一步对大多数人不构成任何困难，去 Microsoft Store 搜索下载就是了。 12代理打开后，可能无法安装 配置 12345678NICE! 安装成功，问题主要集中在两点：1。字体选择时，字体Fira Code NF中间加了空格，导致程序配置识别不了，改FiraCode NF正常了；2。最后的配置时，按下面的评论一切ok# 设置 PowerShell 主题Set-Theme Paradox由于oh-my-push已经更新，这个语句不识别了。需要换成Set-PoshPrompt -Theme Paradox 修改后的配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274/* * Author: 刘鹏 * Email: littleNewton6@gmail.com * Date: 2020, Nov. 30 * &lt;Alt&gt; + Settings，打开默认设置 * 参考文档：https://aka.ms/terminal-documentation * DESCRIPTION: 配置 Windows Terminal 的选项文件 * TAB_SIZE = 8 *字体空格，已经修改 *显示cmd，方便cmd的管理员操作--&gt; 该p7终端会多线程并发执行 命令&amp;命令 */ &#123; &quot;$schema&quot;: &quot;https://aka.ms/terminal-profiles-schema&quot;, &quot;defaultProfile&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;, // 全局主题 &quot;theme&quot;: &quot;system&quot;, &quot;alwaysShowTabs&quot;: true, &quot;tabWidthMode&quot;: &quot;equal&quot;, &quot;confirmCloseAllTabs&quot;: false, // 位置 // (1) 1920x1080 - (320, 65) // (2) 5120x2880 - (1275,692) &quot;initialPosition&quot;: &quot;135,140&quot;, &quot;initialCols&quot;: 135, &quot;initialRows&quot;: 45, // 禁止自动生成 &quot;disabledProfileSources&quot;: [ &quot;Windows.Terminal.Azure&quot; ], // ======================== PROFILES 配置 BEGIN ======================== &quot;profiles&quot;: [ // ======================== PWSH7 配置 BEGIN ======================== &#123; // 键标记 &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;, &quot;name&quot;: &quot;PowerShell Core 7.1.0&quot;, &quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;, // 行为 &quot;closeOnExit&quot;: true, &quot;commandline&quot;: &quot;C:/Program Files/PowerShell/7/pwsh.exe -nologo&quot;, &quot;hidden&quot;: false, &quot;historySize&quot;: 9001, &quot;snapOnInput&quot;: true, &quot;startingDirectory&quot;: &quot;.&quot;, // 外观 &quot;icon&quot;: &quot;D:/Users/newton/Software/develop/shell/pwsh-7.1.ico&quot;, &quot;acrylicOpacity&quot;: 0.5, &quot;cursorColor&quot;: &quot;#FFFFFF&quot;, &quot;cursorShape&quot;: &quot;bar&quot;, &quot;fontFace&quot;: &quot;FiraCode NF&quot;, &quot;fontSize&quot;: 11, &quot;padding&quot;: &quot;5, 5, 20, 25&quot;, &quot;useAcrylic&quot;: false, // 颜色主题 &quot;colorScheme&quot;: &quot;Homebrew&quot; &#125;, // ======================== PWSH7 配置 END ======================== // ======================== WSL 配置 BEGIN ======================== &#123; // 键标记 &quot;guid&quot;: &quot;&#123;07b52e3e-de2c-5db4-bd2d-ba144ed6c273&#125;&quot;, &quot;name&quot;: &quot;Ubuntu-20.04&quot;, &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;, // 行为 &quot;closeOnExit&quot;: true, &quot;commandline&quot;: &quot;wsl.exe -d Ubuntu-20.04&quot;, &quot;hidden&quot;: false, &quot;historySize&quot;: 9001, &quot;snapOnInput&quot;: true, &quot;startingDirectory&quot;: &quot;.&quot;, // 外观 &quot;acrylicOpacity&quot;: 0.5, &quot;cursorColor&quot;: &quot;#FFFFFF&quot;, &quot;cursorShape&quot;: &quot;bar&quot;, &quot;fontFace&quot;: &quot;FiraCode NF&quot;, &quot;fontSize&quot;: 11, &quot;padding&quot;: &quot;5, 5, 20, 25&quot;, &quot;useAcrylic&quot;: false, // 颜色主题 &quot;colorScheme&quot;: &quot;Homebrew&quot; &#125;, // ======================== WSL 配置 END ======================== // ======================== PWSH5 配置 BEGIN ======================== &#123; // 键标记 &quot;guid&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;, &quot;name&quot;: &quot;Windows PowerShell&quot;, // 行为 &quot;closeOnExit&quot;: true, &quot;commandline&quot;: &quot;powershell.exe&quot;, &quot;hidden&quot;: true, &quot;historySize&quot;: 9001, &quot;snapOnInput&quot;: true, &quot;startingDirectory&quot;: &quot;.&quot;, // 外观 &quot;acrylicOpacity&quot;: 0.5, &quot;cursorColor&quot;: &quot;#FFFFFF&quot;, &quot;cursorShape&quot;: &quot;bar&quot;, &quot;fontFace&quot;: &quot;FiraCode NF&quot;, &quot;fontSize&quot;: 11, &quot;padding&quot;: &quot;5, 5, 20, 25&quot;, &quot;useAcrylic&quot;: false, // 颜色主题 &quot;colorScheme&quot;: &quot;Homebrew&quot; &#125;, // ======================== PWSH5 配置 END ======================== // ======================== CMD 配置 BEGIN ======================== &#123; // 键标记 &quot;guid&quot;: &quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;, &quot;name&quot;: &quot;cmd&quot;, // 行为 &quot;commandline&quot;: &quot;cmd.exe&quot;, //不隐藏CMD &quot;hidden&quot;: false, // 字体 &quot;fontFace&quot;: &quot;FiraCode NF&quot;, &quot;fontSize&quot;: 11 &#125;, // ======================== CMD 配置 END ======================== // ======================== AZURE 配置 BEGIN ======================== &#123; &quot;guid&quot;: &quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;, &quot;name&quot;: &quot;Azure Cloud Shell&quot;, &quot;hidden&quot;: true, &quot;source&quot;: &quot;Windows.Terminal.Azure&quot; &#125; // ======================== AZURE 配置 END ======================== ], // ======================== PROFILES 配置 END ======================== // ======================== COLOR SCHEME 配置 BEGIN ======================== &quot;schemes&quot;: [ &#123; &quot;name&quot;: &quot;Homebrew&quot;, &quot;black&quot;: &quot;#000000&quot;, &quot;red&quot;: &quot;#FC5275&quot;, &quot;green&quot;: &quot;#00a600&quot;, &quot;yellow&quot;: &quot;#ffff00&quot;, &quot;blue&quot;: &quot;#6666e9&quot;, &quot;purple&quot;: &quot;#ff00ff&quot;, &quot;cyan&quot;: &quot;#00a6b2&quot;, &quot;white&quot;: &quot;#bfbfbf&quot;, &quot;brightBlack&quot;: &quot;#666666&quot;, &quot;brightRed&quot;: &quot;#ff6060&quot;, &quot;brightGreen&quot;: &quot;#00d900&quot;, &quot;brightYellow&quot;: &quot;#fdff73&quot;, &quot;brightBlue&quot;: &quot;#00a2ff&quot;, &quot;brightPurple&quot;: &quot;#ff08ff&quot;, &quot;brightCyan&quot;: &quot;#53ffff&quot;, &quot;brightWhite&quot;: &quot;#e5e5e5&quot;, &quot;background&quot;: &quot;#283033&quot;, &quot;foreground&quot;: &quot;#00ff00&quot; &#125; ], // ======================== COLOR SCHEME 配置 END ======================== // ======================== HOTKEY 配置 BEGIN ======================== &quot;keybindings&quot;: [ // ======================== 1. 界面视图 配置 BEGIN ======================== // 1.1 调节字体大小 &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;adjustFontSize&quot;, &quot;delta&quot;: 1 &#125;, &quot;keys&quot;: &quot;ctrl+=&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;adjustFontSize&quot;, &quot;delta&quot;: -1 &#125;, &quot;keys&quot;: &quot;ctrl+-&quot; &#125;, &#123; &quot;command&quot;: &quot;resetFontSize&quot;, &quot;keys&quot;: &quot;ctrl+0&quot; &#125;, // ======================== 1. 界面视图 配置 END ======================== // ======================== 2. PANE 分割 配置 BEGIN ======================== // 2.1 水平、竖直分割 &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;splitPane&quot;, &quot;split&quot;: &quot;horizontal&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+-&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;splitPane&quot;, &quot;split&quot;: &quot;vertical&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+plus&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;splitPane&quot;, &quot;split&quot;: &quot;auto&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+|&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;splitPane&quot;, &quot;split&quot;: &quot;auto&quot;, &quot;splitMode&quot;: &quot;duplicate&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+d&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;splitPane&quot;, &quot;split&quot;: &quot;horizontal&quot;, &quot;profile&quot;: &quot;Ubuntu-20.04&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+u&quot; &#125;, // 2.2 按下 Alt 键，同时按下方向键，在多个 pane 之间切换 &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;: &quot;down&quot; &#125;, &quot;keys&quot;: &quot;alt+down&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;: &quot;left&quot; &#125;, &quot;keys&quot;: &quot;alt+left&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;: &quot;right&quot; &#125;, &quot;keys&quot;: &quot;alt+right&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;: &quot;up&quot; &#125;, &quot;keys&quot;: &quot;alt+up&quot; &#125;, // 2.3 按下 Alt + Shift，同时按下方向键，调整当前 pane 的大小 &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;: &quot;down&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+down&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;: &quot;left&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+left&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;: &quot;right&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+right&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;: &quot;up&quot; &#125;, &quot;keys&quot;: &quot;alt+shift+up&quot; &#125;, // 2.4 关闭 pane &#123; &quot;command&quot;: &quot;closePane&quot;, &quot;keys&quot;: &quot;alt+shift+w&quot; &#125;, // ======================== 2. PANE 分割 配置 BEGIN ======================== // ======================== 3. 关于标签 配置 BEGIN ======================== // 3.1 新建默认标签页 &#123; &quot;command&quot;: &quot;newTab&quot;, &quot;keys&quot;: [&quot;ctrl+n&quot;]&#125;, // 3.2 新建 N 号 profile 的标签 &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 0 &#125;, &quot;keys&quot;: &quot;ctrl+shift+1&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 1 &#125;, &quot;keys&quot;: &quot;ctrl+shift+2&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 2 &#125;, &quot;keys&quot;: &quot;ctrl+shift+3&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 3 &#125;, &quot;keys&quot;: &quot;ctrl+shift+4&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 4 &#125;, &quot;keys&quot;: &quot;ctrl+shift+5&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 5 &#125;, &quot;keys&quot;: &quot;ctrl+shift+6&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 6 &#125;, &quot;keys&quot;: &quot;ctrl+shift+7&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 7 &#125;, &quot;keys&quot;: &quot;ctrl+shift+8&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;newTab&quot;, &quot;index&quot;: 8 &#125;, &quot;keys&quot;: &quot;ctrl+shift+9&quot; &#125;, // 3.3 切换到第 N 个标签页 &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 0 &#125;, &quot;keys&quot;: &quot;ctrl+alt+1&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 1 &#125;, &quot;keys&quot;: &quot;ctrl+alt+2&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 2 &#125;, &quot;keys&quot;: &quot;ctrl+alt+3&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 3 &#125;, &quot;keys&quot;: &quot;ctrl+alt+4&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 4 &#125;, &quot;keys&quot;: &quot;ctrl+alt+5&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 5 &#125;, &quot;keys&quot;: &quot;ctrl+alt+6&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 6 &#125;, &quot;keys&quot;: &quot;ctrl+alt+7&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 7 &#125;, &quot;keys&quot;: &quot;ctrl+alt+8&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 8 &#125;, &quot;keys&quot;: &quot;ctrl+alt+9&quot; &#125;, // 3.4 -&gt; &lt;- 标签页间切换 &#123; &quot;command&quot;: &quot;nextTab&quot;, &quot;keys&quot;: &quot;ctrl+tab&quot; &#125;, &#123; &quot;command&quot;: &quot;prevTab&quot;, &quot;keys&quot;: &quot;ctrl+shift+tab&quot; &#125;, &#123; &quot;command&quot;: &quot;duplicateTab&quot;, &quot;keys&quot;: &quot;ctrl+shift+d&quot; &#125;, // 3.5 关闭标签页 &#123; &quot;command&quot;: &quot;closeTab&quot;, &quot;keys&quot;: &quot;ctrl+w&quot;&#125;, // ======================== 3. 关于标签 配置 END ======================== // ======================== 4. 杂项热键 配置 BEGIN ======================== // 4.1 搜索 &#123; &quot;command&quot;: &quot;find&quot;, &quot;keys&quot;: &quot;ctrl+f&quot; &#125;, // 4.2 打开 settings.json &#123; &quot;command&quot;: &quot;openSettings&quot;, &quot;keys&quot;: &quot;ctrl+;&quot; &#125;, // 4.3 复制、粘贴 &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;copy&quot;, &quot;singleLine&quot;: false &#125;, &quot;keys&quot;: &quot;ctrl+shift+c&quot; &#125;, &#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;copy&quot;, &quot;singleLine&quot;: false &#125;, &quot;keys&quot;: &quot;ctrl+insert&quot; &#125;, &#123; &quot;command&quot;: &quot;paste&quot;, &quot;keys&quot;: &quot;ctrl+shift+v&quot; &#125;, &#123; &quot;command&quot;: &quot;paste&quot;, &quot;keys&quot;: &quot;shift+insert&quot; &#125;, // 4.4 上下滚动、上下整页滚动 &#123; &quot;command&quot;: &quot;scrollDown&quot;, &quot;keys&quot;: &quot;ctrl+shift+down&quot; &#125;, &#123; &quot;command&quot;: &quot;scrollUp&quot; , &quot;keys&quot;: &quot;ctrl+shift+up&quot; &#125;, &#123; &quot;command&quot;: &quot;scrollDownPage&quot;, &quot;keys&quot;: &quot;ctrl+shift+pgdn&quot; &#125;, &#123; &quot;command&quot;: &quot;scrollUpPage&quot;, &quot;keys&quot;: &quot;ctrl+shift+pgup&quot; &#125; // ======================== 4. 杂项热键 配置 END ======================== ] // ======================== HOTKEY 配置 END ========================&#125; 该项难度系数：0 2. 安装字体这里仅推荐一款字体：Fira Code Nerd Font。该字体支持 ligature 连字功能，而且是一款专门为代码显示准备的字体，该字体也支持很多有趣的特殊字符，非常适合在终端里使用。该字体开源，广受海内外程序员好评！ 单击此处从 GitHub 下载。 装上该字体，即可进入下一步。 需要的字体如图： 12如上图若不行：解压下图全部放置文件夹--&gt; C:\\Windows\\Fonts\\ 12如上图若不行：解压后全部放置文件夹--&gt; C:\\Windows\\Fonts\\ 该项难度系数：1 （或许有人登 Github 有网络问题，请自行解决。） 3. 1安装新款 Powershell Core首先声明，我们这儿用的 Powershell 与 Windows 自带的 Powershell 是完全不同的两个东西，除了功能相似和名字相同，两者内在已经天差地别。 现阶段 Windows 10 自带的 Powershell 错误提示冗长，颜值低，速度慢，总之就是不太值得去用了。 那么 Powershell Core 是什么呢？这是伟大的 .Net Core 跨平台战略的一个重要组成部分，微软设想，要让强大的 .Net 在所有平台上通用，让这么强大的 Powershell 在所有平台上都能用，古老的 bash 可以退休了！ 基于以上愿景，微软开始了漫长而辉煌的征程。 在 https://github.com/PowerShell/PowerShell/releases 这个GitHub 链接里，有目前 Powershell 的最新版，我建议你从 release 里选个最新的 preview 版本。经过测试，这些预览版都相当稳定。 直接单击此处下载 x86-64 Windows 64 位 .msi 安装包。 该项难度系数：1 难度同样来自于访问 Github。 3.2. 添加 Powershell 启动参数在 powershell 中输入 1notepad.exe $Profile 紧接着在弹出的页面中输入下面这一长串代码，保存并关闭。这个 Profile 配置文件与 .zshrc / .bashrc 文件一样，都是控制启动前参数的。 12345打开PowerShell 7 （X64）打开配置文件--&gt; ：notepad.exe $Profile或者code $Profile 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141&lt;# * FileName: Microsoft.PowerShell_profile.ps1 * Author: 刘 鹏 * Email: littleNewton6@outlook.com * Date: 2021, Aug. 21 * Copyright: No copyright. You can use this code for anything with no warranty.#&gt;#------------------------------- Import Modules BEGIN -------------------------------# 引入 posh-gitImport-Module posh-git# 引入 oh-my-poshImport-Module oh-my-posh# 引入 ps-read-lineImport-Module PSReadLine# 设置 PowerShell 主题# Set-PoshPrompt ysSet-PoshPrompt paradox#------------------------------- Import Modules END -------------------------------#------------------------------- Set Hot-keys BEGIN -------------------------------# 设置预测文本来源为历史记录Set-PSReadLineOption -PredictionSource History# 每次回溯输入历史，光标定位于输入内容末尾Set-PSReadLineOption -HistorySearchCursorMovesToEnd# 设置 Tab 为菜单补全和 IntellisenseSet-PSReadLineKeyHandler -Key &quot;Tab&quot; -Function MenuComplete# 设置 Ctrl+d 为退出 PowerShellSet-PSReadlineKeyHandler -Key &quot;Ctrl+d&quot; -Function ViExit# 设置 Ctrl+z 为撤销Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo# 设置向上键为后向搜索历史记录Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward# 设置向下键为前向搜索历史纪录Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward#------------------------------- Set Hot-keys END -------------------------------#------------------------------- Functions BEGIN -------------------------------# Python 直接执行$env:PATHEXT += &quot;;.py&quot;# 更新系统组件function Update-Packages &#123; # update pip Write-Host &quot;Step 1: 更新 pip&quot; -ForegroundColor Magenta -BackgroundColor Cyan $a = pip list --outdated $num_package = $a.Length - 2 for ($i = 0; $i -lt $num_package; $i++) &#123; $tmp = ($a[2 + $i].Split(&quot; &quot;))[0] pip install -U $tmp &#125; # update TeX Live $CurrentYear = Get-Date -Format yyyy Write-Host &quot;Step 2: 更新 TeX Live&quot; $CurrentYear -ForegroundColor Magenta -BackgroundColor Cyan tlmgr update --self tlmgr update --all # update Chocolotey Write-Host &quot;Step 3: 更新 Chocolatey&quot; -ForegroundColor Magenta -BackgroundColor Cyan choco outdated&#125;#------------------------------- Functions END -------------------------------#------------------------------- Set Alias BEGIN -------------------------------# 1. 编译函数 makefunction MakeThings &#123; nmake.exe $args -nologo&#125;Set-Alias -Name make -Value MakeThings# 2. 更新系统 os-updateSet-Alias -Name os-update -Value Update-Packages# 3. 查看目录 ls &amp; llfunction ListDirectory &#123; (Get-ChildItem).Name Write-Host(&quot;&quot;)&#125;Set-Alias -Name ls -Value ListDirectorySet-Alias -Name ll -Value Get-ChildItem# 4. 打开当前工作目录function OpenCurrentFolder &#123; param ( # 输入要打开的路径 # 用法示例：open C:\\ # 默认路径：当前工作文件夹 $Path = &#x27;.&#x27; ) Invoke-Item $Path&#125;Set-Alias -Name open -Value OpenCurrentFolder#------------------------------- Set Alias END -------------------------------#------------------------------- Set Network BEGIN -------------------------------# 1. 获取所有 Network Interfacefunction Get-AllNic &#123; Get-NetAdapter | Sort-Object -Property MacAddress&#125;Set-Alias -Name getnic -Value Get-AllNic# 2. 获取 IPv4 关键路由function Get-IPv4Routes &#123; Get-NetRoute -AddressFamily IPv4 | Where-Object -FilterScript &#123;$_.NextHop -ne &#x27;0.0.0.0&#x27;&#125;&#125;Set-Alias -Name getip -Value Get-IPv4Routes# 3. 获取 IPv6 关键路由function Get-IPv6Routes &#123; Get-NetRoute -AddressFamily IPv6 | Where-Object -FilterScript &#123;$_.NextHop -ne &#x27;::&#x27;&#125;&#125;Set-Alias -Name getip6 -Value Get-IPv6Routes#------------------------------- Set Network END ------------------------------- 另外，如果你喜欢我的主题，可以用 Everything.exe 搜索 paradox.omp.json 这个文件，把它替换为这个链接里的文件。 4. 安装 Powershell 插件这一步是灵魂。 直接上代码：管理员打开刚装好的新版 powershell，逐行输入命令。 12345678# 1. 安装 PSReadline 包，该插件可以让命令行很好用，类似 zshInstall-Module -Name PSReadLine -Scope CurrentUser# 2. 安装 posh-git 包，让你的 git 更好用Install-Module posh-git -Scope CurrentUser# 3. 安装 oh-my-posh 包，让你的命令行更酷炫、优雅Install-Module oh-my-posh -Scope CurrentUser 安装过程可能有点慢，好像卡住了一样，但是请耐心等待几分钟。等不及的同学自行搜索科学方法访问 GitHub. win键盘 –&gt; pwsh–&gt; 如图 安装时系统会提问是否继续，不用管它直接输入 A 并回车即可。 该项难度系数：0 5. 配置 Windows Terminal这一项是灵魂。 只有新款 Powershell 而没有 Windows Terminal，好比吃肉不放盐。 简单点，直接上配置代码，遇到不懂的地方，自己读注释。记得将此设置默认配置（代码已经给出）。 123456789101112131415161718192021222324252627// 默认的配置就是我们的新 powershell（重要！！！）&quot;defaultProfile&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;,&#123; // 键标记 &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;, &quot;name&quot;: &quot;PowerShell Core 7.1.0.5&quot;, &quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;, // 行为 &quot;closeOnExit&quot;: true, &quot;commandline&quot;: &quot;C:/Program Files/PowerShell/7-preview/pwsh.exe -nologo&quot;, &quot;hidden&quot;: false, &quot;historySize&quot;: 9001, &quot;snapOnInput&quot;: true, &quot;startingDirectory&quot;: &quot;.&quot;, // 外观 &quot;icon&quot;: &quot;D:/Users/newton/Documents/Softwares/software_windows/develop/shell/pwsh.ico&quot;, &quot;acrylicOpacity&quot;: 0.5, &quot;cursorColor&quot;: &quot;#FFFFFF&quot;, &quot;cursorShape&quot;: &quot;bar&quot;, &quot;fontFace&quot;: &quot;Fira Code&quot;, &quot;fontSize&quot;: 11, &quot;padding&quot;: &quot;5, 5, 20, 25&quot;, &quot;useAcrylic&quot;: false, // 颜色主题 &quot;colorScheme&quot;: &quot;Homebrew&quot;&#125;, 同时附上 Homebrew 配色，该配色经过我改良。 123456789101112131415161718192021&#123; &quot;name&quot;: &quot;Homebrew&quot;, &quot;black&quot;: &quot;#000000&quot;, &quot;red&quot;: &quot;#FC5275&quot;, &quot;green&quot;: &quot;#00a600&quot;, &quot;yellow&quot;: &quot;#999900&quot;, &quot;blue&quot;: &quot;#6666e9&quot;, &quot;purple&quot;: &quot;#b200b2&quot;, &quot;cyan&quot;: &quot;#00a6b2&quot;, &quot;white&quot;: &quot;#bfbfbf&quot;, &quot;brightBlack&quot;: &quot;#666666&quot;, &quot;brightRed&quot;: &quot;#e50000&quot;, &quot;brightGreen&quot;: &quot;#00d900&quot;, &quot;brightYellow&quot;: &quot;#e5e500&quot;, &quot;brightBlue&quot;: &quot;#0000ff&quot;, &quot;brightPurple&quot;: &quot;#e500e5&quot;, &quot;brightCyan&quot;: &quot;#00e5e5&quot;, &quot;brightWhite&quot;: &quot;#e5e5e5&quot;, &quot;background&quot;: &quot;#283033&quot;, &quot;foreground&quot;: &quot;#00ff00&quot;&#125;, 特别注意，用其他配色可能降低颜值。 Note: 由于 Windows Terminal 的配置非常复杂，整个文件很长，可直接参考这个链接。 该项难度系数：0 需要懂点 json，还需要会配置 Windows Terminal。 6. 添加右键菜单这一步是灵魂中的灵魂。 这里涉及修改注册表，小白请勿手残改坏注册表，强烈建议事前建立系统还原点！ Github 上面已经有 powershell 脚本了，可以用管理员身份运行该脚本 + 某些参数以实现配置右键菜单。 原版 Github 仓库 我修改后的脚本仓库 （建议用这个） 建议下载我这个，然后在管理员模式的 powershell 7 里运行： 1.\\install.ps1 mini 记住一定要以管理员身份在 powershell 7 里面运行该脚本。 ![img](data:image/svg+xml;utf8,)图 3： 用我修改后的脚本安装之后的效果如图 目前发现问题：该脚本会读取 Windows Terminal 的 profile，然后把其中的非隐藏项目添加到右键菜单（默认视图），这之后如果你修改了 profile，那么需要用 uninstall.ps1 脚本先清除右键菜单，然后重新 install 一遍。 后续字体需要修改哦 PowerShell、CMD 和 Windows Terminal 的美化配置方法[ 1. 安装字体（附件中有所需要的字体文件） 推荐使用 FiraCode NF 和更纱黑体。 FiraCode NF 下载地址： Github - FiraCode NFgithub.com/ryanoasis/nerd-fonts/releases 下载 FiraCode NF Retina 字体 将.zip 文件下载到本地，然后打开该压缩文件，将“Fira Code Regular Nerd Font Complete Mono Windows Compatible.otf”文件解压到本地并重命名为“FiraCode NF.OTF”，右击后选择“为所有用户安装”。 更纱黑体下载地址： Github - 更纱黑体github.com/be5invis/Sarasa-Gothic/releases 下载更纱黑体 将 .7z 文件下载到本地，然后打开该压缩文件，将“sarasa-mono-sc-regular.ttf”文件解压到本地并重命名为“Sarasa Mono SC.TTF”，右击后选择“为所有用户安装”。 2. 设置默认字体设置默认字体是设置的 PowerShell 和 CMD 的默认字体。 2.1 设置 CMD 的默认字体（附件中有注册表.reg 文件，可以直接导入） 按快捷键 Win+R 打开“运行”窗口，输入“regedit”后回车打开“注册表编辑器”，然后进入目录[HKEY_CURRENT_USER\\Console%SystemRoot%_system32_cmd.exe]，在右侧空白处鼠标右击–&gt;新建–&gt;字符串值，并重命名为“FaceName”，双击打开后输入“Sarasa Mono SC”并“确定”。 设置 CMD 的默认字体 2.2 设置 PowerShell 的默认字体（System32）进入目录[HKEY_CURRENT_USER\\Console%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe]，在右侧空白处鼠标右击–&gt;新建–&gt;字符串值，并重命名为“FaceName”，双击打开后输入“Sarasa Mono SC”并“确定”。 设置 PowerShell 的默认字体 2.3 设置 PowerShell 的默认字体（SysWOW64）进入目录[HKEY_CURRENT_USER\\Console%SystemRoot%_SysWOW64_WindowsPowerShell_v1.0_powershell.exe]，在右侧空白处鼠标右击–&gt;新建–&gt;字符串值，并重命名为“FaceName”，双击打开后输入“Sarasa Mono SC”并“确定”。 设置 PowerShell 的默认字体 3. 注册字体注册字体的作用当 PowerShell 设置 Sarasa Mono SC 字体后支持显示 Emoji。 进入目录[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink]，在右侧空白处鼠标右击–&gt;新建–&gt;字符串值，并重命名为“Sarasa Mono SC”，双击打开后输入如下值（最后一行需要留一个空段落）： BSSYM7.ttf,Bookshelf Symbol 7 HOLOMDL2.ttf,HoloLens MDL2 Assets MARLETT.ttf,Marlett REFSPCL.ttf,MS Reference Specialty MTEXTRA.ttf,MT Extra SEGMDL2.ttf,Segoe MDL2 Assets SEGUIEMJ.ttf,Segoe UI Emoji SEGUIHIS.ttf,Segoe UI Historic SEGUISYM.ttf,Segoe UI Symbol SYMBOL.ttf,Symbol WEBDINGS.ttf,Webdings WINGDING.ttf,Wingdings WINGDNG2.ttf,Wingdings 2 WINGDNG3.ttf,Wingdings 3 [请删掉此行文字保留空段落] 并“确定”。 ![img](data:image/svg+xml;utf8,)注册字体 重启电脑。 4. 设置 PowerShell按快捷键 Win+R 打开“运行”窗口，输入“PowerShell”后回车打开“Windows PowerShell”，在标题栏右击，选择“属性”。 4.1 字体切换到“字体”，找到“等距更纱黑体 SC”并选中，然后“大小”设置成“20”。 ![img](data:image/svg+xml;utf8,)设置 PowerShell 字体 4.2 颜色（附件中有完整的设置截图，可以对照截图来挨个设置各个颜色块的颜色值） 切换到“颜色”。 4.2.1 屏幕文字 选中“屏幕文字”，然后点击下方选中的颜色块，再在“选定的颜色值”的“红(R) 蓝(H) 绿(L)”中依次输入“147，161，161”，“不透明度”选择“90”。 ![img](data:image/svg+xml;utf8,)设置 PowerShell 颜色-屏幕文字 4.2.2 屏幕背景 选中“屏幕背景”，然后点击下方选中的颜色块，再在“选定的颜色值”的“红(R) 蓝(H) 绿(L)”中依次输入“253，246，227”。 ![img](data:image/svg+xml;utf8,)设置 PowerShell 颜色-屏幕背景 注：为了能在后面的操作中看清 PowerShell 命令，请单独设置一下这个颜色块的颜色值，设置后“屏幕背景”仍然选择第一个颜色块。 ![img](data:image/svg+xml;utf8,)单独设置此颜色块 4.3 终端切换到“终端”，“光标形状”选中“竖条”。 ![img](data:image/svg+xml;utf8,)设置 PowerShell 终端 点击“确定”，然后关闭 PowerShell 再重新打开，设置生效。 ![img](data:image/svg+xml;utf8,)PowerShell 设置生效 5. 设置 CMD方法跟上方大致相同，不再赘述。 ![img](data:image/svg+xml;utf8,)CMD 设置生效 6. 安装 Windows Terminal看到这里您可能会感觉到，怎么美化了 PowerShell 还是达不到心理的预期值（还是丑），这里向大家推荐使用微软官方出品的 Windows 终端工具——Windows Terminal。 下载地址：Windows Terminal（会调用本地的 Windows 10 应用商店进行安装） 喜欢尝鲜可以安装预览版（已支持图形化设置界面），下载地址： 6.1 配置 Windows Terminal6.1.1 安装 Git （附件中有 Git 的安装包） 下载地址： 安装步骤没有什么特殊的，基本默认然后点下一步就可以了，实在不放心可以看这个教程： 6.1.2 配置 Git 环境变量 依次进入开始菜单–&gt;控制面板–&gt;系统–&gt;高级系统设置–&gt;高级–&gt;环境变量，在“系统变量”中找到“Path”并双击打开，点击“新建”，输入你的 Git 安装目录，比如我的是“C:\\Program Files\\Git”，回车，一直点击“确定”。 ![img](data:image/svg+xml;utf8,)配置 Git 环境变量 6.1.3 配置 Git 的用户名和邮箱 打开 Git Bash，依次执行以下命令进行用户名和邮箱的配置（注意有无引号）： 12git config --global user.name &quot;你的用户名&quot;git config --global user.email 你的邮箱 ![img](data:image/svg+xml;utf8,)配置 Git 的用户名和邮箱 配置完成后可以执行以下命令进行查看： 1git config --list ![img](data:image/svg+xml;utf8,)查看 Git 配置的用户名和邮箱 如果你不嫌烦的话呢，也可以对 Git Bash 的界面进行美化设置，而且可以设置成中文，右击标题栏，选择“Options”，切换到“Window”，在“UI Language”里选择“zn_CH”，这里不再赘述。 ![img](data:image/svg+xml;utf8,)设置 Git Bash 界面语言 6.1.4 修改执行策略权限 按快捷键 Win+X+A，以管理员身份运行“Windows PowerShell”，先查看执行策略权限状态，执行以下命令： 1Get-ExecutionPolicy -List ![img](data:image/svg+xml;utf8,)查看执行策略权限状态 可以看到“CurrentUser”和“LocalMachine”的执行策略权限无法运行未签名的脚本。 ① 修改 CurrentUser 的执行策略权限，执行以下命令： 1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser ![img](data:image/svg+xml;utf8,)修改 CurrentUser 的执行策略权限 输入“A”，回车。 ② 修改 LocalMachine 的执行策略权限，执行以下命令： 1Set-ExecutionPolicy RemoteSigned ![img](data:image/svg+xml;utf8,)修改 LocalMachine 的执行策略权限 输入“A”，回车。 再次查看执行策略权限状态，执行以下命令： 1Get-ExecutionPolicy -List ![img](data:image/svg+xml;utf8,)查看执行策略权限状态 现在 PowerShell 可以运行未签名的脚本了。 6.1.5 安装 oh-my-posh ① 安装 posh-git，执行以下命令： 1Install-Module posh-git ![img](data:image/svg+xml;utf8,)安装 oh-my-posh 输入“Y”，回车。 ![img](data:image/svg+xml;utf8,)安装 oh-my-posh 输入“A”，回车。 ② 安装 oh-my-posh，执行以下命令： 1Install-Module oh-my-posh ![img](data:image/svg+xml;utf8,) 输入“A”，回车。 6.1.6 导入 oh-my-posh 依次执行以下命令： 123Import-Module posh-gitImport-Module oh-my-poshSet-PoshPrompt -Theme PowerLine ![img](data:image/svg+xml;utf8,) 6.1.7 新建配置文件 （附件中有已经编辑好了的 Microsoft.PowerShell_profile.ps1 文件） 打开文件资源管理器，进入文件夹 C:\\Users[你的用户名]\\Documents\\WindowsPowerShell，没有“WindowsPowerShell”文件夹就新建一个，然后在此文件夹内新建文本文档，编辑以下内容： 123Import-Module posh-gitImport-Module oh-my-poshSet-PoshPrompt -Theme PowerLine 另存为“Microsoft.PowerShell_profile.ps1”文件。 ![img](data:image/svg+xml;utf8,)主题加载配置文件 6.1.8 美化配置 （附件中有已经配置好了的 settings.json 文件，直接覆盖源文件即可。背景图片和图标也在其内，配置时请注意文件所在路径） 打开文件资源管理器，进入文件夹 C:\\Users[你的用户名]\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState（预览版的配置文件所在目录 C:\\Users[你的用户名]\\AppData\\Local\\Packages\\Microsoft.WindowsTerminalPreview_8wekyb3d8bbwe\\LocalState），然后右击“settings.json”文件，“打开方式”选择“记事本”，以下摘选的是会影响外观的配置项（请根据自己需要进行增删改）。 1234567891011121314151617181920212223242526272829303132333435363738394041424344&quot;defaults&quot;: //默认配置 &#123; // Put settings here that you want to apply to all profiles. &quot;colorScheme&quot; : &quot;Ubuntu&quot;, // 主题 &quot;useAcrylic&quot; : true, // 毛玻璃特效 &quot;acrylicOpacity&quot;: 0.5, // 不透明度 &quot;cursorColor&quot; : &quot;#E6FF00&quot;, // 光标颜色 &quot;cursorShape&quot; : &quot;bar&quot;, // 光标类型 &quot;fontFace&quot; : &quot;FiraCode NF Retina&quot;, // 字体名称 &quot;fontSize&quot; : 12, // 字体大小 &quot;icon&quot; : &quot;C:\\\\Users\\\\Pictures\\\\Java.png&quot;, // 图标 &quot;backgroundImage&quot;: &quot;C:\\\\Users\\\\Pictures\\\\colorful.jpg&quot;, // 背景图片 &quot;backgroundImageOpacity&quot;: 0.25, // 背景图片的不透明度 &quot;tabTitle&quot; : &quot;开始学习啦&quot;, //标签名称 &quot;startingDirectory&quot; : &quot;C:\\\\Users\\\\JavaLearning&quot;, // 起始文件夹路径 &quot;closeOnExit&quot; : true, // 输入exit退出命令窗口 &quot;padding&quot; : &quot;10, 10, 10, 10&quot;, // 内容距离界面的内部距离 &quot;snapOnInput&quot; : true, // 嗅探输入 &quot;historySize&quot; : 8001 // 历史大小 &#125;,&quot;schemes&quot;: [ // 主题（此处设置的主题是“Ubuntu”） &#123; &quot;name&quot;: &quot;Ubuntu&quot;, &quot;black&quot;: &quot;#2e3436&quot;, &quot;red&quot;: &quot;#cc0000&quot;, &quot;green&quot;: &quot;#4e9a06&quot;, &quot;yellow&quot;: &quot;#c4a000&quot;, &quot;blue&quot;: &quot;#3465a4&quot;, &quot;purple&quot;: &quot;#75507b&quot;, &quot;cyan&quot;: &quot;#06989a&quot;, &quot;white&quot;: &quot;#d3d7cf&quot;, &quot;brightBlack&quot;: &quot;#555753&quot;, &quot;brightRed&quot;: &quot;#ef2929&quot;, &quot;brightGreen&quot;: &quot;#8ae234&quot;, &quot;brightYellow&quot;: &quot;#fce94f&quot;, &quot;brightBlue&quot;: &quot;#729fcf&quot;, &quot;brightPurple&quot;: &quot;#ad7fa8&quot;, &quot;brightCyan&quot;: &quot;#34e2e2&quot;, &quot;brightWhite&quot;: &quot;#eeeeec&quot;, &quot;background&quot;: &quot;#300a24&quot;, &quot;foreground&quot;: &quot;#eeeeec&quot; &#125;], 想预览其它主题，请访问： 想下载其它主题，请访问：主题下载（请不要直接覆盖 settings.json 文件，请编辑俩 .json 将内容复制到 settings.json 内的指定位置即可） 6.2 查看效果附上效果图： ![img](data:image/svg+xml;utf8,) 7. 附件下载链接：https://dustinwinvip.lanzoui.com/b01oqqcej 密码：mhzd 编辑于 10-29","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"Terminal","slug":"Terminal","permalink":"https://muyangit.github.io/tags/Terminal/"}],"author":"MuyanGit"},{"title":"新电脑还原hexo博客","slug":"新电脑还原hexo博客","date":"2021-11-10T12:24:13.000Z","updated":"2022-05-23T15:37:33.028Z","comments":true,"path":"2021/11/10/cl3sojxgc003g5cbh4geua9dc/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxgc003g5cbh4geua9dc/","excerpt":"","text":"2.下载hexo backup 或者直接从旧电脑拷贝为了省事，我建议删除node_modules文件夹，然后把剩余的文件全部备份。 git clone -b backup &#x67;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#46;&#122;&#104;&#x6c;&#x68;&#x36;&#46;&#x63;&#x6e;:****/*****.github.io.git 执行完了以后看一下你的文件夹里应该已经出现node_modules文件夹了。 克隆backup–&gt; 然后删除 .git文件夹1234567891011121314151617181920克隆backup--&gt; 然后删除 .git文件夹cmd管理员中进行操作npm install &amp; npm install hexo-deployer-git --save &amp; npm install hexo-git-backup --save&amp;npm remove hexo-renderer-stylus&amp;npm add hexo-renderer-stylus #deployer或许需要更新npm i hexo-deployer-git@3.0.0修改根目录_config，替换主题，配置备份与还原仓库粘贴md文件到_postcmd 非 管理员 中进行操作查看hexo cl &amp; hexo g &amp; hexo s发布与备份hexo cl &amp; hexo g &amp; hexo d &amp; hexo b &amp; hexo sok 解决了哦ok 后面可以不用看啦 1234567891011121314151617181920212223命令调试```npx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo snpx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo gnpx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo clnpx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo d哪个有问题就重装哪个&gt; 刚写完准备睡觉，发现 `hexo s` 不报 warning 了，但是启动后又报了 😶使用上边刚说的那个命令，发现这其实是 [nib@1.1.2](https://www.npmjs.com/package/nib) 这个包里的 stylus 引起的问题，nib 里的 dependencies 如下：```&#123; &quot;stylus&quot;: &quot;0.54.5&quot;&#125;```已经有人给 nib 提 issue 了，但看它最后一次更新已经是 4 years ago 了，估计是指望不上它更新了，那我们自己来解决吧！在 package.json 里增加 `resolutions` 来覆盖版本定义```&quot;resolutions&quot;: &#123; &quot;stylus&quot;: &quot;^0.54.8&quot;&#125;然后重新 `yarn install` 一下就好了。 bat脚本启动git bash窗口，并执行命令-一键清理生成发布备份+ bash在gitbash执行日志不乱码+ 1start &quot;&quot; &quot;D:\\MySoftware\\DEV\\VersionCtrl\\Git\\bin\\sh.exe&quot; --login -i -l -c &#x27;bash bolg_backup.sh&#x27; ​ 12345@echo OFF::重装系统后注意两处盘符的修改G:cd G:\\MuyanGitBlog\\MuyanGit\\杂项\\博客备份\\start D:\\MySoftware\\DEV\\VersionCtrl\\Git\\git-bash.exe -c &quot;bash bolg_backup.sh&quot; 1234567891011#!/bin/bash#重装系统后注意两处盘符的修改##exec 1&gt;&gt;G:\\MuyanGitBlog\\MuyanGit\\杂项\\博客备份\\log.txt 2&gt;&amp;1##cd G:/MuyanGitBlog/MuyanGit exec 3&gt;&amp;1 4&gt;&amp;2trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; 0 1 2 3exec 1&gt;&gt;log.txt 2&gt;&amp;1# Everything below will go to the file &#x27;log.txt&#x27;:# 执行的命令主体echo 开始运行备份命令—————————————— &amp;&amp; echo `date`······备份进行中 &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo b &amp;&amp; echo MuyanGit博客备份 &amp;&amp; echo 结束运行备份命令—————————————— &amp;&amp; echo `date`······备份结束中 1 插件解释： 123456#发布插件 npm install hexo-deployer-git --save #备份插件npm install hexo-git-backup --savenpm install lineno --save 下载完以后，你就可以在新电脑上正常使用了。写一个新文章，试试hexo clean git check hexo d打开博客，你的文章就更新啦。 123然后进入文件，打开gitbash或者cmd，安装依赖（就是把你之前删除的node_modules文件装回来）cd backup npm install 12345678910111213141516npm remove hexo-renderer-stylus &amp; npm add hexo-renderer-stylusnpm install hexo-deployer-git --save下载完以后，你就可以在新电脑上正常使用了。写一个新文章，试试hexo cleanhexo ghexo d打开博客，你的文章就更新啦。若出现问题解决 Hexo 在使用 Node.js 14 时的 Accessing non-existent property &#x27;xxx&#x27; of module exports inside ···npm remove hexo-renderer-stylusnpm add hexo-renderer-stylus更新：npm update **** 2`解决 Hexo 在使用 Node.js 14 时的 Accessing non-existent property ‘xxx’ of module exports inside circular dependency 问题 _–&gt; https://www.haoyizebo.com/posts/710984d0/今天把博客迁移到了新域名，顺便把 node.js、Hexo 和主题都升了下级。 当习惯的运行 hexo s 命令时，发现多了些 warnings，如下： 123456789$ hexo -s (node:87224) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:87224) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:87224) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency(node:87224) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(node:87224) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:87224) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependencyCopy 说实话我对 node.js 没啥了解，但是单词还是认识几个，看起来像是循环依赖的问题。（习惯性想起了一道面试题：Spring 是如何解决循环依赖的？） 这些 warnings 其实对 Hexo 程序运行没啥影响，只是看起来不舒服罢了。 但出于好奇和洁癖，就去 google 了一下。这里来总结一下原因及解决方案。 原因其实就是 #29935 这个 pr 被合到 node.js 14.0.0 里边了，所以从 node.js 14 开始，这个问题就在网上不断被讨论了。 大家的解决办法也是五花八门，其中一个比较有代表性的是把 node 降级，降到 12 就不会报这个 warning 了 1234brew uninstall nodebrew install node@12brew link --overwrite --force node@12Copy 但这样解决问题显然不是我的风格，继续翻 Github 上的 issues，发现具体到 Hexo 这里的 warning是由于 stylus 导致的，幸运的是 3 天前 stylus 在 0.54.8 版本修复了这个问题（见 pr #2538 ）。 所以对于 Hexo 用户来说，重新装一下 hexo-renderer-stylus 就可以愉快的 hexo s 了 123npm remove hexo-renderer-stylusnpm add hexo-renderer-stylusCopy 至于其他的 package 导致的 warnings，可以使用如下方式来看看具体是哪个 package 导致的 1234npx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo snpx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo gnpx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo clnpx cross-env NODE_OPTIONS=&quot;--trace-warnings&quot; hexo d UPDATE，接昨天说的： 刚写完准备睡觉，发现 hexo s 不报 warning 了，但是启动后又报了 😶 使用上边刚说的那个命令，发现这其实是 nib@1.1.2 这个包里的 stylus 引起的问题，nib 里的 dependencies 如下： 1234&#123; &quot;stylus&quot;: &quot;0.54.5&quot;&#125;Copy 已经有人给 nib 提 issue 了，但看它最后一次更新已经是 4 years ago 了，估计是指望不上它更新了，那我们自己来解决吧！ 在 package.json 里增加 resolutions 来覆盖版本定义 1234&quot;resolutions&quot;: &#123; &quot;stylus&quot;: &quot;^0.54.8&quot;&#125;Copy 然后重新 yarn install 一下就好了。 至此 hexo 就可以和 node.js 14 开始愉快的旅程了~ 参考： module: warn on using unfinished circular dependency Fix for Node v14 ‘Accessing non-existent property’ errors #2538 NodeJS 14 warnings #2534 Warning: Accessing non-existent property ‘lineno’ of module exports inside circular dependency #4257 选择性依赖项解决 备份·1· hexo-deployer-git –save·fatal: ‘github’ does not appear to be a git repositoryfatal: Could not read from remote repository. config.yml–&gt; github修改为分支名****Origin 备份·3·1`go get或git clone时 报git@github.com: Permission denied (publickey) 解决办法一、现象 二、原因分析Permission denied (publickey) 没有权限的publickey ，出现这错误一般是以下两种原因 客户端与服务端未生成 ssh key 客户端与服务端的ssh key不匹配 三、解决办法我们新生成一个ssh key就可以了 依次执行如下命令 1、打开git bash， 右击桌面空白处，选择【git bash】 2、进入ssh 路径下 cd ~/.ssh 3、生成新的ssh key 输入如下命令，&#121;&#111;&#117;&#114;&#x65;&#x6d;&#97;&#x69;&#108;&#64;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;改为自己的邮箱 ssh-keygen -t rsa -C “&#x79;&#111;&#x75;&#x72;&#101;&#x6d;&#x61;&#105;&#108;&#x40;&#x65;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;“ 然后回车，途中会让你选择生成的ssh key的存放目录和输入密码，不用管，直接回车。 这里有个坑，需要把原来生成的ssh key文件删除，否则不会生成新key的时候，会报文件已存在而导致无法生成新的key。一般ssh key的文件路径都是【C:\\Users\\username.ssh\\id_rsa】，其中username是你这个用户的用户名。如果没找到，可以先执行如下命令，回车后，系统会告诉你路径。 4、执行命令 ssh -v &#x67;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d; 最后会出现 &#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#x6d;: Permission denied (publickey). 5、执行命令 ssh-agent -s 知识点： ssh-agent的角色就是帮忙存储、查找并发送对应的指纹而已，也就是说它是一个连接的转发人，扮演的是一个代理的角色。 使用ssh-agent后，可以通过ssh-add命令向ssh-agent注册本机的私钥，ssh-agent会自动推导出这个私钥的指纹(实际上是ssh-add计算的)保存在自己的小本本里(内存)，以后只要ssh连接某主机(某用户)，将自动转发给ssh-agent，ssh-agent将自动从它的小本本里查找私钥的指纹并将其发送给服务端(sshd端)。如此一来，ssh客户端就无需再指定使用哪个私钥文件去连接。 6、将新生成的ssh key添加到ssh-agent ssh-add ~/.ssh/id_rsa 坑： 如果这时出现【Could not open a connection to your authentication agent.】 则先执行下【eval ssh-agent -s】，再执行【ssh-add ~/.ssh/id_rsa】就可以了 7、创建ssh key 打开刚刚生成的id_rsa.pub文件，复制里面的内容 进入你的github账号：https://github.com/settings/keys settings→SSH and GPG keys→new SSH key， title随便取一个名字，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。 坑： 如果添加key失败，提示【Key is invalid. You must supply a key in OpenSSH public key format】格式错误。 则在bash下执行命令【cat id_rsa.pub】然后复制key，再去github上添加 8、验证 ssh &#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d; 成功了 9、再次执行git get，成功了 重要：第一次使用gitbash提交哦-方便输入私人口令来建立连接 备份4· 使用代理 1在开启shadowsocks的前提下，手动配置git的代理。git客户端输入如下两个命令就可以了。git config --global http.proxy http://127.0.0.1:1080git config --global https.proxy http://127.0.0.1:1080http://也可以改成sockets5://,但是区别在于：socks5不支持通过pubkey免密登录github，每次提交代码只能输入用户名和密码。http可以支持免密登录。取消代理：git config --global --unset http.proxy git config --global --unset https.proxy 其实方案一和方案二是同一种方法，不过方案二更加具体一点罢了，大部分问题都可以用方案二解决，当方案二无效时，考虑使用方案一。 最近换电脑了。今晚有空正好把我的hexo搬过来了，在这里分享一下换电脑以后如何转移hexo。 我们要知道，在我们的hexo博客文件中有一个.gitignore，这个文件就是在你同步的时候不把某些文件上传到github上，所以我们直接从github下拉文件到新电脑是行不通的。 1.git安装–&gt; https://blog.csdn.net/qq_36667170/article/details/118163563为了省事，我建议删除node_modules文件夹，然后把剩余的文件全部备份。 2.新电脑准备工作2.1 准备好gitgit下载链接：https://git-scm.com/downloads 安装：一路右键安装 打开gitbash设置用户，注意这个不是登录，是给你的电脑设置一个用户，等你上传的时候，告诉远程仓库是谁上传的而已。 1git config --global user.name &quot;你的名字&quot;（注意前边是“- -global”，有两个横线）git config --global user.email &quot;你的邮箱&quot;执行：ssh-keygen -t rsa -C &quot;yourmail@163.com&quot; 敲四下，使用默认的名称 rsa_id或者ssh-keygen -t rsa -f C:/Users/asus/.ssh/随便名字_id_rsa -C &quot;yourmail@xxx.com&quot; 敲三下，使用自定义名称。将生成好的 .pub 文件内容添加到码云的个人设 =》SSH公钥打开 `cmd` ，输入命令，查看git版本：git --version### 二、查看是否配置了git用户名和邮箱1. 查看用户名git config user.name1. 查看用户邮箱git config user.email如果没有配置，那么需要配置用户名和邮箱：1. 配置用户名：git config --global user.name &quot;xxx&quot;1. 配置用户邮箱git config --global user.email &quot;xxx&quot;#### 2、查看 ssh文件是否配置成功ssh -T git@github.com输出： Hi danygitgit! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.``` 恭喜你，你的设置已经成功了。### 六、修改git的remote url 如果之前添加的是 `HTTPS` 协议的github仓库地址，那么每次push或者pull仍然需要密码，所以，我们需要将其修改为 `ssh` 协议的，这样，就不需要这么麻烦了。#### 1、查看当前的 remote url 首先进入本地仓库，右键 -&gt; `Git Bash Here` git remote -v复制代码输出： origin https://github.com/danygitgit/document-library.git (fetch)输出： origin https://github.com/danygitgit/document-library.git (push) 如果是以上的结果那么说明此项目是使用 `https` 协议进行访问的（如果地址是git开头则表示是 `git` 协议）#### 2、复制远程仓库的ssh链接#### 3、修改git的remote url方法有三种：1. 修改命令git remote origin set-url [url]1. 先删后加git remote rm origingit remote add origin [url]1. 直接修改`config`文件 找到仓库下 `.git` 文件夹下的 `config` 文件，打开，可以看到以下内容 将文件中的 `url =https://github.com/danygitgit/document-library.git `更改为 `url = git@github.com:danygitgit/document-library.git` 即可。 修改后的文件如下 以后，不管是push还是pull，你都不需要再提交密码了。### 七、Sourcetree配置ssh密钥 `SourceTree` 是一款git管理可视化工具，就不需要繁琐的敲打命令行了。个人比较推荐，无论在windows环境还是mac的os环境。[官网链接](https://link.juejin.cn/?target=https%3A%2F%2Fwww.sourcetreeapp.com%2F) ssh-add命令是把专用密钥添加到ssh-agent的高速缓存中 命令 作用 -D 删除ssh-agent中的所有密钥. -d 从ssh-agent中的删除密钥 -e pkcs11 删除PKCS#11共享库pkcs1提供的钥匙 -s pkcs11 添加PKCS#11共享库pkcs1提供的钥匙 -L 显示ssh-agent中的公钥 -l 显示ssh-agent中的密钥 -t life 对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥 -X：对ssh-agent进行解锁 -x 对ssh-agent进行加锁 1.把秘钥添加到ssh-agent中 1ssh-add C:/Users/cc_want/.ssh/test_rsa 2.从ssh-agent中删除 1ssh-add -d C:/Users/cc_want/.ssh/test_rsa 3.查看ssh-agent中的所有秘钥 1ssh-add -l SSH-ADD / Windows / Could not open a connection to your authentication agent. #17 1If you have this issue :In the CMD window, type the following command:cd path-to-Git/bin (for me : cd C:\\Program Files\\Git\\bin)bashexec ssh-agent bashssh-add MYKEY 配置好SSH，GitHub教程 SSH keys配置 记得把git添加到环境变量中，要不然后边使用hexo时候会报错’git’ 不是内部或外部命令,也不是可运行的程序 或批处理文件。 补充：添加环境变量 直接搜索环境变量打开 添加环境变量：双击打开系统变量的path 找到你git的安装目录，把bin的地址加入到path中即可。 2.2 准备好Node.jsNode.js安装配置 给你的npm换成淘宝源，这样待会下东西下的更快。npm config set registry https://registry.npm.taobao.org/（如果看不懂这是干嘛，建议你回忆一下npm怎么用 npm超详细入门 源管理 | 常用指令 | 下载 | 淘宝源卸载） 2.3准备好hexo既然你已经回忆起npm怎么用了，那你用npm安装上hexo安装安装hexonpm install hexo-cli -g 3.将备份文件转移到新电脑就是直接把你那个文件复制到新电脑上。 1然后进入文件，打开gitbash或者cmd，安装依赖（就是把你之前删除的node_modules文件装回来）cd backup npm install 1npm install hexo-deployer-git --save下载完以后，你就可以在新电脑上正常使用了。写一个新文章，试试hexo cleanhexo d打开博客，你的文章就更新啦。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://muyangit.github.io/tags/hexo/"}],"author":"MuyanGit"},{"title":"windows vbs启动多个应用程序并使程序最小化（显示桌面）","slug":"启动多个应用程序并使程序最小化","date":"2021-11-10T12:21:05.000Z","updated":"2022-05-23T15:37:33.028Z","comments":true,"path":"2021/11/10/cl3sojxg5002w5cbhgvcufp33/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxg5002w5cbhgvcufp33/","excerpt":"","text":"转载须注明原作者及出处！此类文章发布地址变更至：https://www.jianshu.com/u/45a4c4696c9awindows vbs启动多个应用程序并使程序最小化（显示桌面）Created by Marydon on 2018-07-26 11:271.应用场景 每天开机后，都需要打开平常所需要的软件，又不想将程序设为开机启动，能不能开机后，同时启动多个程序呢？ 2.代码实现 第一步：新建一个文本文件 桌面–&gt;右键–&gt;新建–&gt;文本文档–&gt;双击打开 第二步：编辑命令 语法： Dim shell Set shell = CreateObject(“WScript.Shell”) shell.Run “””你的应用程序的绝对路径””” 123456789101112131415Dim shellSet shell = CreateObject(&quot;WScript.Shell&quot;)&#x27;1.启动qqshell.Run &quot;&quot;&quot;E:\\TIM-x86\\Bin\\TIM.exe&quot;&quot;&quot;&#x27;2.启动chromeshell.Run &quot;&quot;&quot;E:\\ChromePortable-65-PE\\App\\Google Chrome\\chrome.exe&quot;&quot;&quot;&#x27;3.启动eclipseshell.Run &quot;&quot;&quot;D:\\eclipse-2018-x86\\eclipse.exe&quot;&quot;&quot;&#x27;4.启动notepad++shell.Run &quot;&quot;&quot;D:\\Notepad++-7.3-PE\\notepad++.exe&quot;&quot;&quot;&#x27;5.显示桌面Set shell = CreateObject(&quot;Shell.Application&quot;)shell.ToggleDesktop&#x27;6.将变量置空 这一步可以不要Set shell = Nothing 说明：虽然vbs有最小化的命令，但是效果不明显，因此，第5，6步相当于没有起作用，可以忽略。 第三步：文件–&gt;另存为–&gt;vbs文件 第四步：删除刚才新建的txt文件 以后直接双击运行即可 出现错误对话框 Windows Script Host开机就会弹出错误对话框： Windows Script Host 脚本 C:\\Users\\a\\AppData\\Local\\SystemService.vbs 行 3 字符 1 错误 系统找不到指定的文件 代码 80070002 源 （null） 123456789101112131415您好！感谢您联系微软技术支持。我了解到您使用系统出现的问题。请问您使用的操作系统的具体版本，查看方法：设置-系统-关于。请您尝试以下的方法：1、保持联网状态，在Cortana搜索框输入windows powershell，鼠标右击windows powershell以管理员运行，复制粘贴以下命令运行：DISM.exe /Online /Cleanup-image /ScanhealthDISM.exe /Online /Cleanup-image /CheckhealthDISM.exe /Online /Cleanup-image /Restorehealth","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"vbs","slug":"vbs","permalink":"https://muyangit.github.io/tags/vbs/"}],"author":"MuyanGit"},{"title":"Git安装教程（2.30.1详细教程）","slug":"Git安装教程（2-30-1详细教程）","date":"2021-11-10T11:56:56.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/11/10/cl3sojxef000a5cbh77kq5int/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxef000a5cbh77kq5int/","excerpt":"","text":"Git安装教程（2.30.1详细教程）发表于 2021-02-22 10:36阅读：32103评论：5推荐：17 GITGIT This blog has running : 429 d 13 h 56 m 5 sღゝ◡╹)ノ♡ Copyright © 2021 hdlan Powered by .NET 6 on Kubernetes Theme version: v1.3.3 / Loading theme version: [v1.3.3]( 一、下载Git： 官网地址： https://git-scm.com/download/win （当前新版本2.30.1） 历史版本下载地址： https://npm.taobao.org/mirrors/git-for-windows/ 二、开始安装： 1、打开安装包 2、下一步路径选择 我选择的是d:\\Program Files\\Git 3、组件选择 我选的配置请看图，可以自选 4、开始菜单快捷方式目录：设置开始菜单中快捷方式的目录名称, 也可以选择不在开始菜单中创建快捷方式。 5、选择编辑器 默认VIM 我是默认编辑器Vim 6、调整新存储库中初始分支的名称 我选择默认 7、设置GIT的PATH环境 选择使用什么样的命令行工具，一般情况下我们使用的是第二种方式他是支持第三方： 8、传输方式 9、配置提交行尾符号转换 忘记了图上标推荐，推荐默认选项：就是第一个 10、配置终端模拟器以与Git Bash一起使用 11、选择git仓库获取最新的分支 12、选择凭据助手 13、额外配置选项 14、配置实验选项 15、安装等待 16、完成安装 好了以上是git2.30.1安装过程，安装之后如何关联github仓库请看另外一篇 （git连接github仓库） https://news.cnblogs.com/)https://github.com/BNDong/Cnblogs-Theme-SimpleMemory/tree/v1.3.3)","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"git","slug":"git","permalink":"https://muyangit.github.io/tags/git/"}],"author":"MuyanGit"},{"title":"V2Ray路由器高级功能配置丨使用教程","slug":"V2Ray路由器高级功能配置丨使用教程","date":"2021-11-10T11:42:14.000Z","updated":"2022-05-23T15:37:33.076Z","comments":true,"path":"2021/11/10/cl3sojxff001a5cbhaeta3ixr/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxff001a5cbhaeta3ixr/","excerpt":"","text":"无需配置–&gt; 直接自动配置系统代理查看IP代理情况：http://ip111.cn/ 已经删除PAC功能的主流V2Ray客户端V2RayN，要完美实现GFW黑名单代理模式，只能启用高级路由功能。当您使用过功能更强大的高级路由，就会理解开发人员去掉PAC代理模式并非没有理由。 前面分享了我在用的高级路由规则集： 《V2Ray路由器配置PAC代理规则集丨GFWlist黑名单模式》 https://baiyunju.cc/7523 《V2RayN高级路由器配置规则集丨黑白名单、全局直连、全局代理模式》 https://baiyunju.cc/7753 配置完毕后，就可以一键在“PAC代理模式（GFW黑名单）”、“全局代理模式”、“绕过大陆模式（白名单）”等代理模式之间自由切换，如下图： 图片丨V2RayN一键切换路由代理模式 只有开启了高级路由功能，才会出现“路由”菜单。 当然，如果感觉高级路由功能太复杂（实际上并不复杂），也可以参考《可以代替PAC模式的V2Ray路由器策略代理规则配置》 https://baiyunju.cc/7501 ，此文介绍了仅通过基础规则设置，也可以实现非常接近PAC代理模式的分流效果。 下面介绍V2RayN电脑客户端高级路由功能的设置、添加、导入自定义代理规则的方法。 V2Ray路由高级功能导入代理规则的方法：首先，点击电脑底栏的V2RayN图标，进入软件界面。点击软件顶部的“设置”-“路由设置”，勾选“启用路由高级功能”，再点击菜单“高级功能”-“添加规则集”，如下图所示： 图片丨添加高级路由规则集 在添加规则前，规则列表中还是空白，可以手动逐条添加，也可以导入规则集。 V2RayN支持三种导入方式：“从文件中导入规则”、“从剪贴板中导入规则”、“从订阅URL中导入规则”。现在，从本文开头提到的文章中复制了规则集代码，这里选择“从剪贴板中导入规则”，如下图： 图片丨导入复制过来的路由规则集代码 操作成功，导入了几行规则。可以双击每一条规则，进行添加、删减等自定义操作，相关教程见本文末。 当然，也可以点击菜单“规则功能”-“添加规则”，来一条一条添加。路由规则详情设置界面，和路由基础功能规则界面相同，路由器规则编写方法也相同，如下图： 图片丨在高级路由功能中手工添加路由规则 需要注意的是，在高级路由规则内，排列在上面的规则具有更高的优先级别，可以右键点击每一条规则，选择“上移”“下移”，来达到不同的分流效果。 V2Ray路由器配置PAC代理规则集丨GFWlist黑名单模式 黑名单好用，国内显示国内IP，国外显示国外IP 坐看云起 发布于 2021-03-07 分类：技 / 电脑技巧 最新版本的V2Ray客户端V2RayN，也可以完美支持PAC代理模式。也就是只让GFWlist列表中被封锁的网站域名走代理，其他所有国内、国外的域名流量直连。 自从V2RayN 4.0版本开始删掉PAC功能后，很多习惯使用该代理模式的朋友不习惯路由模式，希望再添加PAC代理模式功能。其实，这是还不了解路由功能的强大和便捷。 事实上，V2RayN最新版本进一步增强了路由功能，不仅可以完美支持并实现PAC黑名单GFWlist模式，而且功能更加强大，使用起来也更方便。 使用GFW黑名单代理模式的优点之一，是节省购买的V2Ray节点流量，因为只有少量被墙封锁的网站走代理，其他的全部直连。另外，使用该代理模式，不会影响BT下载，因为GFW列表外的所有流量包括BT流量在内，会全部直连。 之前白云居丨baiyunju.cc分享过《可以代替PAC模式的V2Ray路由器策略代理规则配置》 https://baiyunju.cc/7501 ，文中介绍的是通过路由基础规则实现的，仅仅是接近PAC模式。 以及全部代理规则集：《V2RayN高级路由器配置规则集丨黑白名单、全局直连、全局代理模式》https://baiyunju.cc/7753 本文现在分享的，是通过高级路由功能实现的、真正的PAC代理模式，走代理的只有GFW黑名单中的网址。 启用V2RayN的路由高级功能后，不仅可实现PAC，而且还可以通过右键菜单一键切换代理模式，在GFWlist黑名单、大陆绕行白名单、全局代理模式之间切换，如下图所示： 图片丨V2RayN一键切换路由代理模式 V2RayN高级路由策略PAC设置规则下面分享的是白云居丨baiyunju.cc在用的路由设置代理规则集，启用路由高级功能后，复制下面代码，并在规则集设置中，从剪贴板中导入规则即可（详细导入方法见文末教程）： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667[ &#123; &quot;outboundTag&quot;: &quot;proxy&quot;, &quot;domain&quot;: [ &quot;#以下三行是GitHub网站，为了不影响下载速度走代理&quot;, &quot;github.com&quot;, &quot;githubassets.com&quot;, &quot;githubusercontent.com&quot; ] &#125;, &#123; &quot;outboundTag&quot;: &quot;block&quot;, &quot;domain&quot;: [ &quot;#阻止CrxMouse鼠标手势收集上网数据&quot;, &quot;mousegesturesapi.com&quot; ] &#125;, &#123; &quot;outboundTag&quot;: &quot;direct&quot;, &quot;domain&quot;: [ &quot;bitwarden.com&quot;, &quot;bitwarden.net&quot;, &quot;baiyunju.cc&quot;, &quot;letsencrypt.org&quot;, &quot;adblockplus.org&quot;, &quot;safesugar.net&quot;, &quot;#下两行谷歌广告&quot;, &quot;googleads.g.doubleclick.net&quot;, &quot;adservice.google.com&quot;, &quot;#【以下全部是geo预定义域名列表】&quot;, &quot;#下一行是所有私有域名&quot;, &quot;geosite:private&quot;, &quot;#下一行包含常见大陆站点域名和CNNIC管理的大陆域名，即geolocation-cn和tld-cn的合集&quot;, &quot;geosite:cn&quot;, &quot;#下一行包含所有Adobe旗下域名&quot;, &quot;geosite:adobe&quot;, &quot;#下一行包含所有Adobe正版激活域名&quot;, &quot;geosite:adobe-activation&quot;, &quot;#下一行包含所有微软旗下域名&quot;, &quot;geosite:microsoft&quot;, &quot;#下一行包含微软msn相关域名少数与上一行微软列表重复&quot;, &quot;geosite:msn&quot;, &quot;#下一行包含所有苹果旗下域名&quot;, &quot;geosite:apple&quot;, &quot;#下一行包含所有广告平台、提供商域名&quot;, &quot;geosite:category-ads-all&quot;, &quot;#下一行包含可直连访问谷歌网址，需要替换为加强版GEO文件，如已手动更新为加强版GEO文件，删除此行前面的#号使其生效&quot;, &quot;#geosite:google-cn&quot;, &quot;#下一行包含可直连访问苹果网址，需要替换为加强版GEO文件，如已手动更新为加强版GEO文件，删除此行前面的#号使其生效&quot;, &quot;#geosite:apple-cn&quot; ] &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;outboundTag&quot;: &quot;proxy&quot;, &quot;domain&quot;: [ &quot;#GFW域名列表&quot;, &quot;geosite:gfw&quot;, &quot;geosite:greatfire&quot; ] &#125;, &#123; &quot;type&quot;: &quot;field&quot;, &quot;port&quot;: &quot;0-65535&quot;, &quot;outboundTag&quot;: &quot;direct&quot; &#125;] 说明： 上面V2Ray高级路由规则集，完美实现了PAC代理模式，效果完全一样。其原理是，GFW黑名单中的域名走代理，剩余的其他连接0-65535所有端口的所有国内、外网站流量全部直连。 #号开头的为注释行，不必删除。 如需要更新官方geo文件，请参考《V2Ray路由规则加强版资源文件geoip.dat、geosite.dat下载网址、更新方法》https://baiyunju.cc/7583 。 其中，第三行直连域名规则中的域名较多，其实这一行”direct”规则原本可以全部删掉，但是在使用中发现，有一些本来可以直连的域名，也被放入GFW列表中走代理了，为了避免有漏网域名没走直连，因此直接将之前基础路由功能中的直接域名列表复制过来，与后面两行规则并不冲突。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://muyangit.github.io/tags/%E5%B7%A5%E5%85%B7/"}],"author":"MuyanGit"},{"title":"WPS专业版下载，激活密钥，永久激活无广告，无弹窗，企业版专用【高速下载】","slug":"WPS专业版下载，激活密钥，永久激活无广告，无弹窗，企业版专用【高速下载】","date":"2021-11-10T09:32:24.000Z","updated":"2022-05-23T15:37:33.028Z","comments":true,"path":"2021/11/10/cl3sojxfk001h5cbhgs6k2ojf/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxfk001h5cbhgs6k2ojf/","excerpt":"","text":"WPS Office 2019专用版下载，无广告，无弹窗，可以微信登陆，云服务正常使用。良心的办公软件，兼容性极强，欢迎大家下载使用，按照教程激活即可免费无广告！下载地址官方网站：WPS官方下载：https://ep.wps.cn/download下载成功安装步骤： 自定义安装路径与设置， 安装成功后，找到安装路径的过马路，删除【acm.dll】文件，没有管理员的提供管理员权限删除， 打开输入如下的序列号即可激活，整个过程无需断网，可以正常激活。 序列号：694BF-YUDBG-EAR69-BPRGB-ATQXH备用：R8R8P-MTT6F-KLRPM-J7CAB-PJM8C 激活成功之后即可使用，可以登陆WPS账户，目前是无广告的，多功能自己探究。 PS:强迫症图标去除 强迫症患者可能需要去除【wps办公助手】资源管理器的【WPS网盘】图标，请点击这里解决！","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://muyangit.github.io/tags/%E5%B7%A5%E5%85%B7/"}],"author":"MuyanGit"},{"title":"test2","slug":"test2","date":"2021-11-09T20:02:37.000Z","updated":"2022-05-23T15:37:33.083Z","comments":true,"path":"2021/11/10/cl3sojxg2002n5cbh58z3c5yb/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxg2002n5cbh58z3c5yb/","excerpt":"","text":"","categories":[{"name":"生活","slug":"live","permalink":"https://muyangit.github.io/categories/live/"}],"tags":[{"name":"图集","slug":"图集","permalink":"https://muyangit.github.io/tags/%E5%9B%BE%E9%9B%86/"}],"author":"MuyanGit"},{"title":"test","slug":"test","date":"2021-11-09T19:48:13.000Z","updated":"2022-05-23T15:37:33.083Z","comments":true,"path":"2021/11/10/cl3sojxfz002l5cbhh5jn1fh8/","link":"","permalink":"https://muyangit.github.io/2021/11/10/cl3sojxfz002l5cbhh5jn1fh8/","excerpt":"","text":"","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"图集","slug":"图集","permalink":"https://muyangit.github.io/tags/%E5%9B%BE%E9%9B%86/"}],"author":"MuyanGit"},{"title":" python requests之 基础用法    ","slug":"python-requests之-基础用法","date":"2021-11-03T05:48:13.000Z","updated":"2022-05-23T15:37:33.103Z","comments":true,"path":"2021/11/03/cl3sojxfw002d5cbh2cbhfjb1/","link":"","permalink":"https://muyangit.github.io/2021/11/03/cl3sojxfw002d5cbh2cbhfjb1/","excerpt":"","text":"python requests之 基础用法 分类专栏： python进阶 文章标签： python requests 版权 python进阶专栏收录该内容 56 篇文章2 订阅 订阅专栏 文章目录 一. 发送请求的类型 二. GET 传递URL参数 三. 响应内容: 3.1 文本响应内容及其编码 3.2 二进制响应内容(常用) 3.3 JSON 响应内容(常用) 3.4 原始响应内容 3.5 定制请求头 四. POST请求 4.1 数据上传 4.2 文件上传 4.2.1 最简单的上传方法 4.2.2 显式设置文件名, 文件类型和请求头 五. 响应状态码 六. 响应头 七. Cookie 7.1 快速访问cookies 7.2 发送cookies到服务器, 使用cookies参数 7.3 Cookies返回对象 八. 请求超时处理(生产代码必须使用这一参数.) 本文仅供学习参考,建议调试阶段使用, 生产阶段可以使用进阶用法 一. 发送请求的类型 (***)表示经常会用到, (**) 表示会用到但不经常, (*)表示很少用到 GET 查看 (***) POST 增加 (***) PUT 修改 (**) PATCH 修改(**) DELETE 删除 (**) HEAD 查看响应头 (*) OPTIONS 查看可用请求方法 (*) 12requests.[method](url)1 二. GET 传递URL参数123456789101112131415161718192021In [1]: import requestsIn [2]: url = &#x27;http://www.test.com&#x27;In [3]: params = &#123;&quot;key1&quot;:&quot;val1&quot;, &quot;key2&quot;:&quot;val2&quot;&#125;In [4]: r = requests.get(url, params)In [5]: r.urlOut[5]: &#x27;https://www.test.com/?key1=val1&amp;key2=val2&#x27;In [6]: params2 = &#123;&quot;key1&quot;: &quot;val1&quot;, &quot;key2&quot;:[&quot;v2&quot;, &quot;val2&quot;]&#125;# 最近碰到个问题，极个别接口在get请求的参数params时，若数据类型为dict，则报500，json.dumps()后则200， 将参数名params改为data，也200， 改为json也200. 若采用get(url, params=json.dumps(dict), ) 方案，这样的话，其它接口可能就会400了，最后判断返回是否500，若500 则dumps. In [7]: r = requests.get(url,params2)# 因网址问题,可能会报错In [8]: r.urlOut[8]: &#x27;https://www.test.com/?key1=val1&amp;key2=v2&amp;key2=val2&#x27;1234567891011121314151617181920 requests.get(url, params={“key1”: “val1”, “key2”: “val2”}), 相当于在url后面拼接一些参数 params参数只在get中使用. 三. 响应内容:3.1 文本响应内容及其编码123456789101112131415161718192021In [3]: r = requests.get(&quot;https://www.baidu.com&quot;)In [4]: r.urlOut[4]: &#x27;https://www.baidu.com/&#x27;In [5]: r.textOut[5]: &#x27;&lt;!DOCTYPE html&gt;\\r\\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;莽\\x99戮氓潞娄盲赂\\x80盲赂\\x8b茂录\\x8c盲陆\\xa0氓掳卤莽\\x9f楼茅\\x81\\x93&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; ... 此处省略几千字...&lt;/body&gt; &lt;/html&gt;\\r\\n&#x27;In [6]: r.encodingOut[6]: &#x27;ISO-8859-1&#x27;In [7]: r.encoding= &#x27;utf-8&#x27;In [9]: r.encodingOut[9]: &#x27;utf-8&#x27;1234567891011121314151617181920 3.2 二进制响应内容(常用)12345678910In [23]: r.contentOut[23]: ...省略几千字... 如果r的链接地址是个图片, 可以非常好的作为示例.In [24]: from PIL import ImageIn [25]: from io import BytesIOIn [26]: i = Image.open(BytesIO(r.content)) # 可以作为下载图片或二进制文档的方法123456789 3.3 JSON 响应内容(常用)1234567891011In [1]: r = requests.get(&#x27;https://api.github.com/events&#x27;)In [2]: r.json()Out[2]:[&#123;&#x27;id&#x27;: &#x27;13092490355&#x27;, &#x27;type&#x27;: &#x27;PushEvent&#x27;, &#x27;actor&#x27;: &#123;&#x27;id&#x27;: 46406730, &#x27;login&#x27;: &#x27;NekoSilverFox ...&#125;]12345678910 3.4 原始响应内容123456789101112131415161718In [1]: r = requests.get(&#x27;https://api.github.com/events&#x27;, stream=True) # 可能会报错In [2]: r.json()Out[2]:[&#123;&#x27;id&#x27;: &#x27;13092490355&#x27;, &#x27;type&#x27;: &#x27;PushEvent&#x27;, &#x27;actor&#x27;: &#123;&#x27;id&#x27;: 46406730, &#x27;login&#x27;: &#x27;NekoSilverFox ...&#125;]In [3]: r.rawOut[3]: &lt;urllib3.response.HTTPResponse at 0x1b4c491ddd8&gt;In [4]: r.raw.read(10)Out[4]: b&#x27;&#x27;1234567891011121314151617 一般情况下使用如下代码替代文件流: 1234with open(filename, &#x27;wb&#x27;) as fd: for chunk in r.iter_content(chunk_size): fd.write(chunk)123 3.5 定制请求头1234&gt;&gt;&gt; url = &#x27;https://api.github.com/some/endpoint&#x27;&gt;&gt;&gt; headers = &#123;&#x27;user-agent&#x27;: &#x27;my-app/0.0.1&#x27;&#125;&gt;&gt;&gt; r = requests.get(url, headers=headers)123 四. POST请求4.1 数据上传 格式有以下几种: requests.post(url, data=&#123;&quot;key1&quot;: &quot;val1&quot;, &quot;key2&quot;: &quot;val2&quot;&#125;)是将字典数据传给data参数, 还可以传输元组列表, 也可以传string(此时需要用json.dumps()处理下). requests.post(url, json=&#123;&quot;key1&quot;: &quot;val1&quot;, &quot;key2&quot;: &quot;val2&quot;&#125;)是将字典数据传给json参数, 会自动编码 post请求可以 接受 data和json 两个参数,不接受params 若 post请求传参要求是body中raw的格式josn(application/json), 则在post请求参数中添加headers参数, 参数值包含{“Content-Type”: “application/json; charset=UTF-8”} 12345678910111213141516171819202122232425262728293031323334353637383940414243import requestsheaders = &#123; &quot;Content-Type&quot;: &quot;application/json; charset=UTF-8&quot;,&#125;resp = requests.post(url, data=(), headers=headers)12345# 将字典数据传给data参数&gt;&gt;&gt; data = &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;&gt;&gt;&gt; r = requests.post(&quot;http://httpbin.org/post&quot;, data=data)&gt;&gt;&gt; print(r.text)&#123; ... &quot;form&quot;: &#123; &quot;key2&quot;: &quot;value2&quot;, &quot;key1&quot;: &quot;value1&quot; &#125;, ...&#125;# 将元组数据传给data参数&gt;&gt;&gt; payload = ((&#x27;key1&#x27;, &#x27;value1&#x27;), (&#x27;key1&#x27;, &#x27;value2&#x27;))&gt;&gt;&gt; r = requests.post(&#x27;http://httpbin.org/post&#x27;, data=payload)&gt;&gt;&gt; print(r.text)&#123; ... &quot;form&quot;: &#123; &quot;key1&quot;: [ &quot;value1&quot;, &quot;value2&quot; ] &#125;, ...&#125;# 将json数据传给data参数&gt;&gt;&gt; import json&gt;&gt;&gt; url = &#x27;https://api.github.com/some/endpoint&#x27;&gt;&gt;&gt; json_dict = &#123;&quot;some&quot;: &quot;data&quot;&#125;&gt;&gt;&gt; r = requests.post(url, data=json.dumps(payload))# 将字典数据传给json参数&gt;&gt;&gt; url = &#x27;https://api.github.com/some/endpoint&#x27;&gt;&gt;&gt; json_dict = &#123;&quot;some&quot;: &quot;data&quot;&#125;&gt;&gt;&gt; r = requests.post(url, json=json_dict)123456789101112131415161718192021222324252627282930313233343536 4.2 文件上传格式如下:r = requests.post(url, files=&#123;&#39;file&#39;: open(&#39;report.xls&#39;, &#39;rb&#39;)&#125;) 4.2.1 最简单的上传方法12345678910111213&gt;&gt;&gt; url = &#x27;http://httpbin.org/post&#x27;&gt;&gt;&gt; files = &#123;&#x27;file&#x27;: open(&#x27;report.xls&#x27;, &#x27;rb&#x27;)&#125;&gt;&gt;&gt; r = requests.post(url, files=files)&gt;&gt;&gt; r.text&#123; ... &quot;files&quot;: &#123; &quot;file&quot;: &quot;&lt;censored...binary...data&gt;&quot; &#125;, ...&#125;123456789101112 4.2.2 显式设置文件名, 文件类型和请求头123456789101112&gt;&gt;&gt; url = &#x27;http://httpbin.org/post&#x27;&gt;&gt;&gt; files = &#123;&#x27;file&#x27;: (&#x27;report.xls&#x27;, open(&#x27;report.xls&#x27;, &#x27;rb&#x27;), &#x27;application/vnd.ms-excel&#x27;, &#123;&#x27;Expires&#x27;: &#x27;0&#x27;&#125;)&#125;&gt;&gt;&gt; r = requests.post(url, files=files)&gt;&gt;&gt; r.text&#123; ... &quot;files&quot;: &#123; &quot;file&quot;: &quot;&lt;censored...binary...data&gt;&quot; &#125;, ...&#125;1234567891011 五. 响应状态码123456789101112131415161718&gt;&gt;&gt; r = requests.get(&#x27;https://www.baidu.com&#x27;)&gt;&gt;&gt; r.status_code # 获取请求状态码200&gt;&gt;&gt; r.status_code == requests.codes.ok # 可以用此来判断是否请求成功True&gt;&gt;&gt; bad_r = requests.get(&quot;http://httpbin.org/status/404&quot;)&gt;&gt;&gt; bad_r.status_code404&gt;&gt;&gt; bad_r.raise_for_status() # 可以用此来查找 请求错误的原因Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; File &quot;D:\\Anaconda3\\lib\\site-packages\\requests\\models.py&quot;, line 940, in raise_for_status raise HTTPError(http_error_msg, response=self)requests.exceptions.HTTPError: 404 Client Error: NOT FOUND for url: http://httpbin.org/status/404&gt;&gt;&gt; r.raise_for_status() # 如果请求成功, 那么没有错误原因的, 所以返回为None.&gt;&gt;&gt;1234567891011121314151617 六. 响应头123456789&gt;&gt;&gt; r.headers&#123;&#x27;Cache-Control&#x27;: &#x27;private, no-cache, no-store, proxy-revalidate, no-transform&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;, &#x27;Content-Encoding&#x27;: &#x27;gzip&#x27;, &#x27;Content-Type&#x27;: &#x27;text/html&#x27;, &#x27;Date&#x27;: &#x27;Mon,03 Aug 2020 09:15:49 GMT&#x27;, &#x27;Last-Modified&#x27;: &#x27;Mon, 23 Jan 2017 13:23:51 GMT&#x27;, &#x27;Pragma&#x27;: &#x27;no-cache&#x27;, &#x27;Server&#x27;: &#x27;bfe/1.0.8.18&#x27;, &#x27;Set-Cookie&#x27;: &#x27;BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&#x27;, &#x27;Transfer-Encoding&#x27;: &#x27;chunked&#x27;&#125;&gt;&gt;&gt; r.headers.get(&#x27;content-type&#x27;) # 此处get的key大小写不敏感&#x27;text/html&#x27;12345678 七. Cookie7.1 快速访问cookies12345&gt;&gt;&gt; url = &#x27;http://example.com/some/cookie/setting/url&#x27;&gt;&gt;&gt; r = requests.get(url)&gt;&gt;&gt; r.cookies[&#x27;example_cookie_name&#x27;]&#x27;example_cookie_value&#x27;1234 7.2 发送cookies到服务器, 使用cookies参数1234567891011&gt;&gt;&gt; url = &#x27;http://example.com/some/cookie/setting/url&#x27;&gt;&gt;&gt; r = requests.get(url)&gt;&gt;&gt; r.cookies&lt;RequestsCookieJar[]&gt;&gt;&gt;&gt; r.cookies.get(&#x27;example_cookie_name&#x27;)&gt;&gt;&gt; test_cookies = dict(cookes_are=&#x27;working&#x27;)&gt;&gt;&gt; r = requests.get(url, cookies=test_cookies)&gt;&gt;&gt; r.text&#x27;...省略几千字...&#x27;&gt;&gt;&gt;12345678910 7.3 Cookies返回对象对象为RequestsCookiesJar, 和字典非常相似, 也可以将jar传到cookies参数中 12345678&gt;&gt;&gt; jar = requests.cookies.RequestsCookieJar()&gt;&gt;&gt; jar.set(&#x27;tasty_cookie&#x27;, &#x27;yum&#x27;, domain=&#x27;httpbin.org&#x27;, path=&#x27;/cookies&#x27;)&gt;&gt;&gt; jar.set(&#x27;gross_cookie&#x27;, &#x27;blech&#x27;, domain=&#x27;httpbin.org&#x27;, path=&#x27;/elsewhere&#x27;)&gt;&gt;&gt; url = &#x27;http://httpbin.org/cookies&#x27;&gt;&gt;&gt; r = requests.get(url, cookies=jar)&gt;&gt;&gt; r.text&#x27;&#123;&quot;cookies&quot;: &#123;&quot;tasty_cookie&quot;: &quot;yum&quot;&#125;&#125;&#x27;1234567 八. 请求超时处理(生产代码必须使用这一参数.)12345# 配置超时处理(以下两种方法都可以), 生产代码必须使用这一参数.requests.get(url, timeout=(3, 7))requests.get(url, timeout=10)1234 set 限制解除 博客 下载 问答 社区 70% 搜索 登入 python requests 进阶用法 分类专栏： python进阶 文章标签： python requests 版权 python进阶专栏收录该内容 56 篇文章2 订阅 订阅专栏 文章目录 一. 会话对象 1.1会话对象可以跨请求保持某些参数, 1.2 会话可以为请求方法提供缺省数据 1.3 参数合并 1.4 建议使用的代码方式:上下文管理器 一. 会话对象1.1会话对象可以跨请求保持某些参数,会话对象具有requests API的所有方法. 12345678&gt;&gt;&gt; import requests&gt;&gt;&gt; s = requests.Session()&gt;&gt;&gt; s.get(&quot;http://httpbin.org/cookies/set/sessioncookie/123456789&quot;)&lt;Response [200]&gt;&gt;&gt;&gt; r = s.get(&quot;http://httpbin.org/cookies&quot;)&gt;&gt;&gt; r.text&#x27;&#123;\\n &quot;cookies&quot;: &#123;\\n &quot;sessioncookie&quot;: &quot;123456789&quot;\\n &#125;\\n&#125;\\n&#x27;1234567 1.2 会话可以为请求方法提供缺省数据12345678&gt;&gt;&gt; s = requests.Session()&gt;&gt;&gt; s.auth(&quot;user&quot;, &quot;pass&quot;) ...因为没有真正验证登录, 所以会报错...&gt;&gt;&gt; s.headers.update(&#123;&quot;x-test&quot;: &quot;true&quot;&#125;)&gt;&gt;&gt; s.get(&#x27;http://httpbin.org/headers&#x27;, headers=&#123;&#x27;x-test2&#x27;: &#x27;true&#x27;&#125;)&lt;Response [200]&gt;# 此时x-test 和x-test2 都会被放入请求头中1234567 1.3 参数合并传递给请求方法的字典都会与已设置的会话层数据合并. 方法层的参数覆盖会话的参数. 方法级别的参数不会被跨请求保持 123456789&gt;&gt;&gt; s = requests.Session()&gt;&gt;&gt; r = s.get(&#x27;http://httpbin.org/cookies&#x27;, cookies=&#123;&#x27;from-my&#x27;: &#x27;browser&#x27;&#125;)&gt;&gt;&gt; r.text&#x27;&#123;\\n &quot;cookies&quot;: &#123;\\n &quot;from-my&quot;: &quot;browser&quot;\\n &#125;\\n&#125;\\n&#x27;&gt;&gt;&gt; r = s.get(&#x27;http://httpbin.org/cookies&#x27;)&gt;&gt;&gt; r.text&#x27;&#123;\\n &quot;cookies&quot;: &#123;&#125;\\n&#125;\\n&#x27;&gt;&gt;&gt;12345678 1.4 建议使用的代码方式:上下文管理器1234567891011with requests.Session() as s: s.get(&#x27;http://httpbin.org/cookies/set/sessioncookie/123456789&#x27;)# 若是在测试环境中, 不知道将来用get post,可以这么写with requests.Session() as s: resp = s.request(method=&quot;get|post&quot;, url=url)# 不知道返回值是什么的情况下，可以通过content_type来判断返回值类型content_type = [&quot;application/json&quot;, &quot;application/stream&quot;, &quot;text/explain&quot;]12345678910 未完待续… python常用12345678910111，多引用类库2，数据结构位置3，尽量减少使用for4、避免使用全局变量5、增加列表推导式（List Comprehension）list.apend6、用xrange()替换range()7、使用生成器（Generators）生成器以块计算数据。8、用Join连接字符串串 i set 限制解除 python笔记——split()函数详解一、split() 语法 str.split(str=””, num=string.count(str)) 参数 str 分隔符，默认为所有的空字符，包括空格、换行(\\n)、制表符(\\t)等。 num – 分割次数。默认为 -1, 即分隔所有。 注意：当使用空格作为分隔符时，对于中间为空的项会自动忽略 例子 1234567891011121314151617&gt;&gt;&gt; str = &quot;Line1-abcdef \\nLine2-abc Line4-abcd&quot;&gt;&gt;&gt; print(str.split())[&#x27;Line1-abcdef&#x27;, &#x27;Line2-abc&#x27;, &#x27;Line4-abcd&#x27;] ##不仅自动识别了换行符(\\n)、还识别了空格（ ）123&gt;&gt;&gt; str = &quot;Line1-abcdef \\nLine2-abc Line4-abcd&quot;&gt;&gt;&gt; (a,b,c) = str.split()&gt;&gt;&gt; print(a)&gt;&gt;&gt; print(b)&gt;&gt;&gt; print(c)Line1-abcdefLine2-abcLine4-abcd ### 如果在知道分割后的个数，可直接赋值12345678&gt;&gt;&gt; str=&quot;hello boy&lt;[www.baidu.com]&gt;byebye&quot;&gt;&gt;&gt; print(str.split(&quot;[&quot;)[1].split(&quot;]&quot;)[0])www.baidu.com ###骚操作，用到的时候回来看下123 二、os.path.split() 语法 os.path.split(‘PATH’) 参数 如果PATH传入的是一个目录和文件名，则输出路径和文件名 如果给出的是一个目录名，则输出路径和为空文件名 例子 12345&gt;&gt;&gt; import os&gt;&gt;&gt; file_path = &quot;E:\\\\desktop\\\\cangjie.avi&quot;&gt;&gt;&gt; print(os.path.split(file_path))(&#x27;E:\\\\desktop&#x27;, &#x27;cangjie.avi&#x27;)1234","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"   16.如何在csv文件中跳过第一行的python代码  ","slug":"16-如何在csv文件中跳过第一行的python代码","date":"2021-10-25T15:11:51.000Z","updated":"2022-05-23T15:37:33.107Z","comments":true,"path":"2021/10/25/cl3sojxdz00015cbhhs427vff/","link":"","permalink":"https://muyangit.github.io/2021/10/25/cl3sojxdz00015cbhhs427vff/","excerpt":"","text":"txt，xls，xlsx，csv操作1· xlwt 保存的xlsx无法直接office打开，但是wps可以打开，1xlsx 修改格式为xls 2·如何在csv文件中跳过第一行的python代码 今天加油鸭� 2021-06-10 18:16:07 76 收藏 文章标签： python 大数据 人工智能 版权 我来了我来了，我带着问题回来了~ 宝们有没有在日常敲代码中发现索引值和数据对不上的问题，产生这个问题的原因是你加了header，它在计算机数据识别中占了一行位置，那么我们应该如何给它变回来呢？ 我之前尝试过header=None,index=0，还有巴拉巴拉一大堆都不好使，这里我给大家看一行代码，你只需要在我框框的指定位置添加，名字什么自己对应上就可以完美解决~ 就是这里next(reader)，别看它不起眼，但是真的很好用，前后你们那个名称自己对应一下，一定要改成自己的 OK啦完美解决，已经跳过第一行啦嘿嘿嘿~ 备选方案1234567import csvfrom itertools import islicewith open(&#x27;表格/2019-04-01.csv&#x27;, &#x27;r&#x27;) as read_file: reader = csv.reader(read_file) for row in islice(reader, 1, None): print(row) 前言 在做自动化测试时，需要将测试数据存放在excel表格中，读取数据的时候，我们只需要读取非表头的内容即可，那么如何跳过表头读取excel表格中的数据呢？ 在此，先将excel工作簿以及sheet表格进行封装 12345678910111213141516171819202122import xlrdclass ReadExcel: def __init__(self, filename): &quot;&quot;&quot; 打开文件 :param filename: 文件路径 &quot;&quot;&quot; self.wb = xlrd.open_workbook(filename=filename) def open_sheet(self, sheet_name): &quot;&quot;&quot; 根据表格名称打开表格 :param sheet_name:sheet表格名称 :return: &quot;&quot;&quot; return self.wb.sheet_by_name(sheet_name=sheet_name) def operate_sheet(self, sheet_name): &quot;&quot;&quot; 这里就是读取excel表格的函数，通过下面三种方法读取 :return: &quot;&quot;&quot;123456789101112131415161718192021 下面将通过三种方法实现excel跳过表头读取数据（operate_sheet函数） 一、方法一：普通方法在读取表格时，条件判断：当行数对应索引为0（索引从0开始，0表示第一行）时，跳过代码如下（示例）： 12345678910111213 def operate_sheet(self, sheet_name): &quot;&quot;&quot; 操作表格 :return: &quot;&quot;&quot; sheet = self.open_sheet(sheet_name=sheet_name) # 方法一：（此方法不推荐，效率太低） # 2.跳过第一行读取表格 for i in range(row_num): if i==0: continue print(sheet.row_values(i))12345678910111213 调用operate_sheet函数： 1234if __name__ == &#x27;__main__&#x27;: re = ReadExcel(&quot;ZHZX.xlsx&quot;) # 参数传入你的工作簿（excel文件）路径 re.operate_sheet(&quot;Sheet_zhzx&quot;) # 传入你的sheet表名字123 后续两种方法的调用方法同上，不再展示 二、方法二：用range函数range()函数用法参考菜鸟教程：pyhton3 range()函数用法 代码如下（示例）： 1234567891011def operate_sheet(self, sheet_name): &quot;&quot;&quot; 操作表格 :return: &quot;&quot;&quot; sheet = self.open_sheet(sheet_name=sheet_name) # 方法二： # 2.跳过第一行读取表格（推荐） for i in range(1,row_num): print(sheet.row_values(i))12345678910 三、方法三：用迭代器切片需导入islice包 12from itertools import islice1 代码如下（示例）： 12345678910111213def operate_sheet(self, sheet_name): &quot;&quot;&quot; 操作表格 :return: &quot;&quot;&quot; sheet = self.open_sheet(sheet_name=sheet_name) # 方法三： # 构造迭代器（推荐） iter_row_num = iter(range(row_num)) # 2.跳过第一行读取表格 for i in islice(iter_row_num,1,None): print(sheet.row_values(i))123456789101112 总结 pandashttps://pandas.pydata.org/pandas-docs/stable/user_guide/io.html","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"  # [教程]免费域名注册及域名解析(freenom&cloudflare)   ","slug":"教程-免费域名注册及域名解析-freenom-cloudflare","date":"2021-10-23T16:05:40.000Z","updated":"2022-05-23T15:37:33.027Z","comments":true,"path":"2021/10/24/cl3sojxga00395cbh0bv460z3/","link":"","permalink":"https://muyangit.github.io/2021/10/24/cl3sojxga00395cbh0bv460z3/","excerpt":"","text":"Skip to content 主机贴士 搬瓦工|BandwagonHost VPS|Vps|主机推荐 加入Telegram群组关于本站教程[VPS]推荐 [教程]免费域名注册及域名解析(freenom&amp;cloudflare)4月17日更新• cloudflare解析 • freenom免费域名•教程•阅读:13,621次 看到有群友不会搞域名注册和域名解析的，特写了一份教程送上，希望有所帮助。 本教程用到3个网站： 1.免费域名注册网站https://www.freenom.com 2.免费域名解析CDN网站https://www.cloudflare.com 3.google邮箱（你也可以用别的邮箱，建议使用google邮箱） 备注：申请的域名，一定要搞个二级域名，解析到一个网站，反正大家不缺vps，搭建一个网站指向好。域名没有网站指向的话，会被回收。切记切记！ 比如申请的域名是abc123.tk,那么在cf域名解析的时候，一定要指向个二级域名给实际网站，建议使用常规的www，做个A记录：www -&gt; ip:你搭建的网站ip，这里有教你怎么搞个自己的网站。博主自2018.1月申请的免费域名用到现在还正常，没被回收。祝好运！ 输入你希望的域名，如abc123.tk，那么在上面的红框里输入abc123就行 它提供了蛮多免费域名后缀，自己选吧，点击现在获取。 点击完成 点击红框里，选择12个月的免费，点击继续。 输入你的邮箱，建议google邮箱，点击验证邮箱。 截图的时候搞错了，不用点击箭头所指。登录你的邮箱，查看freenom给你发来的验证邮件。其他邮箱不一定在收件箱，没有的话，去垃圾箱看看。 点击箭头所指 输入你的一些信息，继续往下滚动，填写 勾选，并完成 点击进入管理后台登录页面。 输入你的邮箱及相应密码，点击LOGIN登录。 在“服务”下拉菜单下“我的域名” 点击“管理域名” 点击如图所示，修改域名dns 切换自定义服务，输入cloudfrare的免费域名服务器地址 （注:我这里按照惯性，直接输入了我原来cf账号上看的地址，结果发现今天做教程时，cf给了我新的域名服务器地址，最后有做修改） 查看状态，激活状态，freenom免费域名部分结束。 打开https://www.cloudfrare.com；后期登陆使用谷歌的图片验证接口需要墙 修改了语言，但是我之后看到的还是英文，各位看官，随意 点击注册 输入你的邮箱，建议还是刚搞freenom时用的google邮箱，点击创建账号 到你的邮箱中，找到cf发来的验证邮件，并完成验证 已完成验证，点击继续进入仪表盘 点击增加站点 输入刚才freenom注册的域名，如abc123.tk 选择免费方案点击确认 输入你要的二级域名，这里只要前缀就好，如： 你希望hk.abc123.tk解析到你的vps，那么 第一个红框里输入hk，第二个红框里输入你的vps ip地址 如果你是准备搞nat ddns，那么 第一个红框里输入hk，第二个红框里建议输入127.0.0.1，方便查看变动（也可以随意输入） 后面的橘色云朵，请点击一下，让他变灰色，表示不使用cdn，然后点击增加记录 这就是前文所说的，惯性添加了域名解析服务器，结果发现，今天教程是，cf给了我新的解析服务器，那么就更新修改它吧。 回到freenom网站，登录相关页面,不细说了，不记得的话，前文找 过了几分钟后，收到cloudflare发来邮件，说更新成功。 看nat ddns怎么搞的，请点击传送门 看我写的这么辛苦，请收藏一下本站吧。主机贴士https://zhujitips.com 欢迎加入TG群讨论 转帖，请带上本尾巴。谢谢！ 教程到此结束！ 教程 cloudflare解析, freenom免费域名","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"   # Web前端：hexo+github搭建个人博客，免费！  ","slug":"Web前端：hexo-github搭建个人博客，免费！","date":"2021-10-23T16:03:51.000Z","updated":"2022-05-23T15:37:33.050Z","comments":true,"path":"2021/10/24/cl3sojxfk001j5cbh4yu4co16/","link":"","permalink":"https://muyangit.github.io/2021/10/24/cl3sojxfk001j5cbh4yu4co16/","excerpt":"","text":"Web前端：hexo+github搭建个人博客，免费！网上查的同类教程有不少，但是看了一下发布时间，那些教程的发布还是有些年头的了。有些教程中的步骤现在不一定适用了，我当初就按照别人的教程搭建Hexo,不小心就掉了坑。那就干脆自己写一个，方便记忆，顺便给需要的朋友提供参考。 首先报上一波，我开发的运行环境 运行环境 Runtime environment123456操作系统 ： Windows10IDE: JetBrains WebStorm 2018.2.1 x64浏览器： Google Chrome 版本 67.0.3396.99（正式版本） （64 位）&amp;&amp; FireFox Developer Edition 版本63.0b4 (64位)hexo: 3.7.1hexo-cli: 1.1.0node: 8.11.4 背景个人博客，一般来说，基本都是咱们干IT的人用得多一些。要是从事这行业之外的人，根本也不需要吧。QQ空间，微博，微信朋友圈之类的地方就基本能够满足需求了。受到了知乎上，一个讨论的问题的启发。如何开始写技术博客，怎么选择？所以打算自己搭建博客，自己用的东西，当然是讲究一个“顺自己心意”就好。为了尽可能写得详细，所以教程显得很冗长，但是Hexo搭建博客真的很容易.. 优势为什么选择Hexo+Github来搭建自己的博客？我认为有以下几点优势： 不需要服务器，Github免费提供的托管服务； 不需要域名，Github同样提供了一个.io的域名； 不用将太多的心思投入到博客开发； hexo主题多样且免费、又好看； 不像其他博客有让人心烦的广告； 便于维护更新，换风格直接换模板就行。 总体步骤概述大体的就4个步骤，咱就不弄那么复杂了。 下载需要的工具，并安装； 创建Github仓库； 修改Hexo配置文件； 把博客部署到Github上； 搭建流程准备阶段 下载安装相关工具 1.下载NodeJs点击此处NodeJs中文下载页根据自己的操作系统，下载对应版本的NodeJs。这里是推荐使用长期维护版本（LTS）的NodeJs,如果你看不懂，从我这里下载也一样，但是版本就可能不是最新的了，这里版本v8.12.0。Windows系统：64位：NodeJs_x6432位：NodeJs_x86Linux系统：（你都会Linux了，不会选不太可能吧？）64位：NodeJs_x6432位：NodeJs_x86macOS系统：没用过，不知道。 2.安装Git点击Git根据自己的操作系统，下载对应版本的Git 。如果你看不懂，从我这里下载也一样，但是版本就可能不是最新的了，这里版本v2.19.0。Window系统：64位：Git_x6432位：git_x86Linux系统：详见安装命令 下载完成以后，打开根据提示操作，Win系统直接“下一步”就OK了。 3.测试安装是否已经生效打开cmd命令行(win+r 输入cmd回车)分别执行（Linux系统则是在终端中）复制以下命令： 123node -vnpm -vgit --version 回车，稍微等下便会有以下运行结果： 12345678C:\\Users\\DeSireFire&gt;node -vv8.11.4C:\\Users\\DeSireFire&gt;npm -v5.6.0C:\\Users\\DeSireFire&gt;git --versiongit version 2.18.0.windows.1 说明安装成功了。 4.安装Hexo之前做的，是为了安装Hexo做准备。 1https://hexo.io/zh-cn/ 从Hexo 官网中可以看到这些指令，咱就以人家官网的步骤行事准没错。打开cmd命令行(win+r 输入cmd回车)分别执行（Linux系统则是在终端中），通过cd指令跳转到要存储Hexo的位置。如果不想琢磨，我直接写完全部指令，路径我放在D盘上（以Windows系统为例） 123456d:npm install hexo-cli -ghexo init blogcd blognpm installhexo server 以上命令的意思是： 跳转到D盘 使用npm安装hexo 使用hexo初始化一个名为blog的项目 跳转到生成出的blog文件夹里 hexo启动服务器 如果没有出错，一般会是以下情景： 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 此时访问 Hexo测试服 即可。如果出错请严格按照步骤检查！ 打开浏览器输入 http://localhost:4000 就能看到搭建好的Hexo本地博客了。不过因为没有使用其他主题，所以Hexo会是用自带的默认Blog主题。测试完毕记得在命令窗口上按 Ctrl+C 关闭hexo服务器。 创建Github仓库 注意： 1.在这里，我的做法是创建两个仓库！2.一个仓库用于存放hexo的配置文件；3.另一个仓库用于部署Blog的静态文件！ 点击Github进入Github,登陆！（如果没有账号，自行百度一下注册方法） 依照图中的位置创建仓库，如图所示： 在Repository name中输入你要创建的仓库名字，这里我命名为“myhexo”,在Description输入仓库的描述，如图： 其他的，根据自己需要来设定。最后单击Create repository来完成最后确定创建。 再创建第二个仓库，重复以上1~4的步骤，这一次在Repository name中输入dafanshu.github.io（xxx为你的想起的博客名，自行修改,但是必须与你的github用户名一致！） 完成以上五步，那么在你的github首页就能看到这两个仓库了。如图：以“.github.io”结尾的为博客仓库，另一个是hexo配置文件仓库。 美化Hexo主题（拓展）点击按钮访问Hexo主题搜索，在里面随便挑。一般主题的开发者都会在其仓库下方放上主题效果的预览图。这里，作为举例，选择了 https://github.com/litten/hexo-theme-yilia 主题。下载方法，如图所示：下载完成后，解压得到一个名为“hexo-theme-yilia-master”的文件夹，这里我把它改名为“yilia”。最后，把它复制到D:\\Blog\\themes\\文件夹下，主题安装就此完成。配置文件方面，之后会讲到。 使用阶段下载、安装完相关工具，创建完相应的两个仓库，那么就开始进入重要的阶段。 修改Hexo配置文件1.打开blog/_config.yml，参考实例进行修改 1234567# Sitetitle: 网站标题subtitle: 副标题description: 个人签名author: 姓名language: zh-Hanstimezone: 需要注意的是： 所有的配置“:”符号后面都要带空格，否则失效。 language是设置语言。zh-Hans是中文，若出现乱码需转码UTF8。 2.配置发布blog的仓库地址如何获得github的地址呢？如图： 注意，这里提到的仓库是用以“.github.io”结尾的用于部署Blog的仓库 将图中选中的部分复制下来，然后如示例中，写入_config.yml 1234deploy: type: git repo: https://github.com/DeSireFire/DeSireFire.github.io.git branch: master 以上这步非常重要，它关系到你最终能不能部署成功！ 内容较多建议参考官方文档https://hexo.io/zh-cn/docs/configuration.html修改完之后，可以重新执行hexo s在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。根_config.yml文件中。 3.配置主题到配置文件 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yilia 需要注意的是： theme名必须与D:\\Blog\\themes\\下的文件夹名一致。 4.配置用于存放hexo文件的仓库地址首先，进入Github,找到之前创建来用于存放hexo的配置文件的仓库“myhexo”，如图：复制仓库地址，然后在D:\\Blog\\目录下，然后如图中打开gitbash（如果你是Linux系统，直接在相应目录下打开终端即可）：在之后出现的黑窗口中输入一下命令，注意根据自己的需要修改部分命令内容： 1234567891011npm install hexo-deployer-git --savegit initgit config --global user.name &quot;你的github用户名&quot;git config --global user.email XXX@qq.com（你的邮箱地址）git add *git commit -m &quot;提交hexo配置文件到仓库&quot;git remote add origin (此处加上你的仓库地址，如我的是：https://github.com/DeSireFire/DeSireFire-sHexoWarehouse.git)git push -u origin master 回车搞定，你的Hexo文件就上传到配置仓库去了！ 本地测试Hexo是否生效一切顺利，下一步就可以愉快写博客了。打开cmd命令行(win+r 输入cmd回车)分别执行（Linux系统则是在终端中），如果不想琢磨，我直接写完全部指令，路径我放在D盘上（以Windows系统为例） 123d:cd d:\\blog\\hexo clean&amp;&amp;hexo g&amp;&amp;hexo server 如果没有出错，一般会是以下情景： 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 打开浏览器输入 http://localhost:4000 就能看到搭建好的Hexo本地博客了。不过因为没有使用其他主题，所以Hexo会是用自带的默认Blog主题。测试完毕记得在命令窗口上按 Ctrl+C 关闭hexo服务器。 部署Blog到外网完成前面的工作，说明你离成功就只剩下最后一道命令了。继续在本目录命令行，执行！ 1hexo clean&amp;&amp;hexo g&amp;&amp;hexo d 提示上传完成以后，访问Github。打开之间说到以“.github.io”结尾的用于部署Blog的仓库。打开该数据库的设置页面，如图：在设置页面中，向下滚动到GitHub Pages一栏，如图：刚刚上传完成时，github需要一点时间才能把blog发布到外网上，耐心等待一首歌的时间基本就OK了。当github发布完成，会显示“Your site is published at XXXX”，这时候访问箭头所指的位置，就能直接看到自己的博客了。 最后一项拓展：如果你有自己购买的域名，可以在第三个箭头处的位置输入保存。这样就能用自己自定义的域名来访问博客了。 总结到此，整个Hexo+Github搭建个人博客的教程就完成了！有没有很开心！如果有不会的地方可以直接留言提问2333！ 原始链接:https://desirefire.github.io/2018/09/12/Web前端：hexo-github搭建个人博客，免费！/ 许可协议: “署名-非商用-相同方式共享 3.0” 转载请保留原文链接及作者。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"Pyinstaller打包Python代码为.exe，多个.py文件和多模块打包_Ethan的博客-程序员宅基地_pyinstaller打包多个py文件     ","slug":"Pyinstaller打包Python代码为-exe，多个-py文件和多模块打包-Ethan的博客-程序员宅基地-pyinstaller打包多个py文件","date":"2021-10-22T21:15:26.000Z","updated":"2022-05-23T15:37:33.103Z","comments":true,"path":"2021/10/23/cl3sojxf6000w5cbhabw01s8s/","link":"","permalink":"https://muyangit.github.io/2021/10/23/cl3sojxf6000w5cbhabw01s8s/","excerpt":"","text":"Pyinstaller打包Python代码为.exe，多个.py文件和多模块打包_Ethan的博客-程序员宅基地_pyinstaller打包多个py文件技术标签： Pyinstaller打包教程 文件结构testentrance.pyclip.pydata.pyunet.dbaccd.xmlreason.csv多个.py文件和多个打包命令格式如下： `pyinstaller [主文件] -p [其他文件1] -p [其他文件2] –hidden-import [自建模块1] –hidden-import [自建模块2] 根据上面的文件结构打包命令如下 pyinstaller -F entrance.py -p clip.py -p data.py --hidden-import clip --hidden-import data 注意：其中entrance.py是主程序入口文件，其他.py文件是自建模块，需要在主文件中使用，仅打包.py文件其余依赖项只需在打包完成后，将它们放在打包后生成的.exe文件的同一个目录下即可","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" Python3读取写入json的中文乱码问题_SeniorZ的点滴记录-程序员信息网    ","slug":"Python3读取写入json的中文乱码问题-SeniorZ的点滴记录-程序员信息网","date":"2021-10-22T20:42:52.000Z","updated":"2021-10-22T21:17:39.217Z","comments":true,"path":"2021/10/23/cl3sojxfa000z5cbh0vzl6w7e/","link":"","permalink":"https://muyangit.github.io/2021/10/23/cl3sojxfa000z5cbh0vzl6w7e/","excerpt":"","text":"Python3读取写入json的中文乱码问题_SeniorZ的点滴记录-程序员信息网技术标签： Python https://www.i4k.xyz/copyright) 问题1.中文写入json，但json文件中显示”\\u6731\\u5fb7\\u57f9”,不是中文。 1234#中文写入json，但文件中显示&quot;\\u6731\\u5fb7\\u57f9&quot;,不是中文。# encoding=&#x27;utf-8&#x27;，用于确保写入中文不乱码with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f_obj: json.dump(username,f_obj) 解决方法：加入ensure_ascii=False 1234# encoding=&#x27;utf-8&#x27;，用于确保写入中文不乱码with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f_obj: # ensure_ascii=False，用于确保写入json的中文不发生乱码 json.dump(username,f_obj,ensure_ascii=False) 问题2.当目标json文件内容为空时，出现 1json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) 解决方法：新增一个异常 1234# 当username.json为空，这里如果不加入 json.decoder.JSONDecodeError: 异常# 会导致json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)except json.decoder.JSONDecodeError: print(&quot;文件内容是空的。&quot;)","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" 运行bat时隐藏cmd窗口    ","slug":"运行bat时隐藏cmd窗口","date":"2021-10-20T20:15:10.000Z","updated":"2022-05-23T15:37:32.940Z","comments":true,"path":"2021/10/21/cl3sojxgo00425cbh3hulfbd6/","link":"","permalink":"https://muyangit.github.io/2021/10/21/cl3sojxgo00425cbh3hulfbd6/","excerpt":"","text":"运行bat时隐藏cmd窗口运行bat时隐藏cmd窗口，开机启动bat以及隐藏运行窗口 bat隐藏窗口运行 cmd隐藏窗口运行 另一个方法： 隐藏运行软件，cmd隐藏运行，bat隐藏运行，命令窗口隐藏运行 让bat隐藏运行需要用vbs文件才能实现，方法一：新建一个文本文档，写入set ws=WScript.CreateObject(“WScript.Shell”)ws.Run “d:\\yy.bat”,0另存为vbs文件即可，其中d:\\yy.bat是你需要运行的bat文件的路径。 方法二：用文本文档打开bat文件，在开头处写入@echo offif “%1” == “h” goto beginmshta vbscript:createobject(“wscript.shell”).run(“””%~nx0”” h”,0)(window.close)&amp;&amp;exit:beginREM这个方法运行bat，还是闪了一下。 1.在windows命令行后台运行某个命令： 在执行的命令前加上start /b，比如start /b run.bat。就相当于Linux下的run.sh &amp; 2.开机启动bat 新建test.bat, 文件内容如下: set ws=WScript.CreateObject(“WScript.Shell”) ws.Run “D:\\test.bat /start”,0 保存,然后放到Windows启动目录下,就可以了。 3.隐藏运行窗口 bat运行后一般会有一个黑色的命令窗口,那么如何隐藏呢?有两种方式: 方法一：新建一个vbs文件,如hello.vbs,文件内容如下: Set ws = CreateObject(“Wscript.Shell”) ws.run “cmd /c D:\\CI_Slave\\slave.bat”,vbhide 保存,然后放到Windows启动目录下,就可以了。 方法二：用文本文档打开bat文件，在开头处写入 @echo offif “%1” == “h” goto beginmshta vbscript:createobject(“wscript.shell”).run(“””%~nx0”” h”,0)(window.close)&amp;&amp;exit:beginREM 保存,然后放到Windows启动目录下,就可以了。 这个方法运行bat，还是会闪一下。 PS：Windows启动目录： WinXP: C:/Documents and Settings/Administrator/「开始」菜单/程序/启动 Win7: C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup Win10:C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 所有用户通用启动目录:C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 出处：https://www.zhuguodong.com/?id=432 ======================================================================================= Bat批处理文件怎么隐藏运行？隐藏运行Bat文件的几个方法BAT文件是批处理文件，在**Windows**系统下以命令行的方式执行一条或多条命令。在命令提示下键入批处理文件的名称，或者双击该批处理文件，系统就会调用cmd.exe按照该文件中各个命令出现的顺序来逐个运行它们。使用批处理文件（也被称为批处理程序或脚本），可以简化日常或重复性任务。是很多系统爱好者喜欢使用的命令！能实现的功能有很多。 然而Bat文件在运行时都会出现黑色的命令提示符窗口，让某些时候感觉不爽，如何才能隐藏运行Bat文件？下面小编介绍几种方法。 一、通过批处理命令实现。缺点：会看到一个窗口一闪而逝。优点：简单，直接添加即可。 @echo offif “%1”==”h” goto beginstart mshta vbscript:createobject(“wscript.shell”).run(“””%~nx0”” h”,0)(window.close)&amp;&amp;exit:begin::以下为正常批处理命令，不可含有pause set/p等交互命令pause 二、利用vbs脚本实现隐藏。缺点：调用麻烦点。优点：基本看不到痕迹（非绝对的，指一般用户） HideRun.vbs CreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0其中D:/test.bat是你的批处理路径 三、另一思路为把bat转换成vbs，然后vbs生成一个临时bat文件，然后WScript.Shell.Run隐藏启动这个临时bat。 HideRun.bat echo CreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0&gt;tmp.vbscscript.exe/e:vbscripttmp.vbscscript.exe/e:vbscripttmp.vbsdel $tmp.vbs这个批处理其实不能使其批处理本身隐藏，但是下面大部分隐藏调用批处理的原理和基础。 HideRun.js new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/Test.bat’,0);用Javascript有什么好处呢？js的字符串变量可以用单引号，从而方便命令行作为参数调用，而且js很好的支持多行语句用 ; 分隔写成一行。要注意的是：js要区分大小写，方法 必须用括号，结尾必须有分号。所以就成了下面的命令： mshta “javascript：new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/test.bat’,0);window.close()” 通常系统管理员会向用户端推送一些脚本并运行，或者拷贝批处理文件到客户端由用户自己运行。但是大部分脚本在运行时会弹出黑色背景的DOS窗口，这会让不少用户不知所 措，甚至误操作关闭正在运行的窗口。好在批处理文件的DOS窗口是可以隐藏的，以下是几种隐藏批处理运行窗口的方法。 1.基础 HideRun.vbs CreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0 www.xitonghe.com其中D:/test.bat是你的批处理路径 另一思路为把bat转换成vbs，然后vbs生成一个临时bat文件，然后WScript.Shell.Run隐藏启动这个临时bat。 HideRun.bat echo CreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0&gt;tmp.vbscscript.exe/e:vbscripttmp.vbscscript.exe/e:vbscripttmp.vbsdel $tmp.vbs这个批处理其实不能使其批处理本身隐藏，但是下面大部分隐藏调用批处理的原理和基础。 HideRun.js new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/Test.bat’,0);用Javascript有什么好处呢？js的字符串变量可以用单引号，从而方便命令行作为参数调用，而且js很好的支持多行语句用 ; 分隔写成一行。要注意的是：js要区分大小写，方法 必须用括号，结尾必须有分号。所以就成了下面的命令： mshta “javascript：new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/test.bat’,0);window.close()” 2.用快捷方式 如果要使一个批处理本身隐藏，可以参考附件里的一个快捷方式，修改附件中的相关路径即可隐藏启动你的批处理。可以用vbs来建立一个 .lnk，其实用批处理也行（先echo一个 vbs出来） 3.利用系统服务 可以建立一个系统服务然后启动这个服务来启动批处理。缺点是启动服务较慢，需要管理员权限 runassrv add /cmdline:”C:/Windows/System32/cmd.exe /c D:/test.bat” /name:”mysrv”net start mysrv 4.利用at计划任务 用at可以建立一个计划任务，在不输入 /interactive 参数可以后台运行。但是建使用at必须有管理员权限 at 09:10 “cmd /c D:/Test.bat” 然后在 9:10 系统就会自动后台以SYSTEM权限运行这个bat 5.利用ftype文件关联 ftype batfile=C:/Windows/System32/mshta “javascript：new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c%1’,0);window.close();” 6.其他用户 Windows 2k/XP支持多用户，如果能在后台登陆另一个账户的桌面然后运行一个批处理，就能完全达到隐藏的目的 7.编译成可执行文件 不少方法可以实现，可以直接利用的工具有 Quick Batch file compiler。 以上方法由系统盒www.xitonghe.com 小编网络整理，希望对大家有帮助。 出处：http://www.xitonghe.com/jiaocheng/diannao-9298.html ======================================================================================= 批处理隐藏自身窗口，很无聊批处理隐藏运行效果代码,防止出现黑窗口不建议非法用途，可以用来执行命令，提供用户体验。 复制代码 代码如下: @echo oFF::code by LZ-MyST QQ:8450919 BLOG:http://hi.baidu.com/lzmyst http://www.clxp.net.cnif “%1” neq “1” (&gt;“%temp%\\tmp.vbs” echo set WshShell = WScript.CreateObject^(^”WScript.Shell^”^)&gt;&gt;”%temp%\\tmp.vbs” echo WshShell.Run chr^(34^) ^&amp; %0 ^&amp; chr^(34^) ^&amp; ^” 1^”,0start /d “%temp%” tmp.vbsexit )::从这里开始，就是你的批处理代码了，DOS黑框一闪而过，转到后台运行了pause::你会在任务管理器看到有一个隐藏窗口的CMD进程 运行bat时隐藏cmd窗口的方法 运行bat时隐藏cmd窗口的方法 可以编辑一个vbs脚本，在其中以隐藏窗口运行批处理程序。 复制代码 代码如下: Set ws = CreateObject(“Wscript.Shell”)ws.run “cmd /c 批处理程序名”,vbhide 将上面代码拷贝到记事本中，保存为”runbat.vbs”或者其它的名字（扩展名必须是.vbs），然后点击运行生成的脚本runbat.vbs，即可隐藏运行指定的批处理程序。这个vbs脚本也可以在bat环境中直接调用，达到隐藏bat自身的目的。自己总结一下,做几个例子，有兴趣的去试验一下啊! 复制代码 代码如下: Set ws = CreateObject(“Wscript.Shell”)wscript.sleep 1200 ws.run “cmd /c start winrar.exe”,vbhidewscript.sleep 2200 ws.run “cmd /c start msimn.exe”,vbhidewscript.sleep 1200 ws.run “cmd /c start iexplore.exe”,vbhide 下面来几个高手整理的 几种隐藏批处理运行窗口的方法 .（1）通过批处理命令实现。缺点：会看到一个窗口一闪而逝。优点：简单，直接添加即可。 123456789@echo offif &quot;%1&quot;==&quot;h&quot; goto beginstart mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit:begin::以下为正常批处理命令，不可含有pause set/p等交互命令pause （2）利用vbs脚本实现隐藏。缺点：调用麻烦点。优点：基本看不到痕迹（非绝对的，指一般用户） HideRun.vbs 复制代码 代码如下: CreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0 其中D:/test.bat是你的批处理路径…………………………………………………………………………………………………………………….另一思路为把bat转换成vbs，然后vbs生成一个临时bat文件，然后WScript.Shell.Run隐藏启动这个临时bat。HideRun.bat 复制代码 代码如下: echo CreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0&gt;tmp.vbscscript.exe/e:vbscripttmp.vbscscript.exe/e:vbscripttmp.vbsdel $tmp.vbs 这个批处理其实不能使其批处理本身隐藏，但是下面大部分隐藏调用批处理的原理和基础。HideRun.js 复制代码 代码如下: new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/Test.bat’,0); 用Javascript有什么好处呢？js的字符串变量可以用单引号，从而方便命令行作为参数调用，而且js很好的支持多行语句用 ; 分隔写成一行。要注意的是：js要区分大小写，方法必须用括号，结尾必须有分号。所以就成了下面的命令： 复制代码 代码如下: mshta “javascript:new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/test.bat’,0);window.close()” ​ 通常系统管理员会向用户端推送一些脚本并运行，或者拷贝批处理文件到客户端由用户自己运行。但是大部分脚本在运行时会弹出黑色背景的DOS窗口，这会让不少用户不知所措，甚至误操作关闭正在运行的窗口。好在批处理文件的DOS窗口是可以隐藏的，以下是几种隐藏批处理运行窗口的方法。1.基础HideRun.vbsCreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0其中D:/test.bat是你的批处理路径另一思路为把bat转换成vbs，然后vbs生成一个临时bat文件，然后WScript.Shell.Run隐藏启动这个临时bat。HideRun.bat 复制代码 代码如下: echo CreateObject(“WScript.Shell”).Run “cmd /c D:/test.bat”,0&gt;tmp.vbscscript.exe/e:vbscripttmp.vbscscript.exe/e:vbscripttmp.vbsdel $tmp.vbs 这个批处理其实不能使其批处理本身隐藏，但是下面大部分隐藏调用批处理的原理和基础。HideRun.jsnew ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/Test.bat’,0);用Javascript有什么好处呢？js的字符串变量可以用单引号，从而方便命令行作为参数调用，而且js很好的支持多行语句用 ; 分隔写成一行。要注意的是：js要区分大小写，方法必须用括号，结尾必须有分号。所以就成了下面的命令：mshta “javascript:new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c D:/test.bat’,0);window.close()”2.用快捷方式如果要使一个批处理本身隐藏，可以参考附件里的一个快捷方式，修改附件中的相关路径即可隐藏启动你的批处理。可以用vbs来建立一个 .lnk，其实用批处理也行（先echo一个vbs出来）3.利用系统服务可以建立一个系统服务然后启动这个服务来启动批处理。缺点是启动服务较慢，需要管理员权限runassrv add /cmdline:”C:/Windows/System32/cmd.exe /c D:/test.bat” /name:”mysrv”net start mysrv4.利用at计划任务用at可以建立一个计划任务，在不输入 /interactive 参数可以后台运行。但是建使用at必须有管理员权限at 09:10 “cmd /c D:/Test.bat”然后在 9:10 系统就会自动后台以SYSTEM权限运行这个bat 5.利用ftype文件关联ftype batfile=C:/Windows/System32/mshta “javascript:new ActiveXObject(‘WScript.Shell’).Run(‘cmd /c%1’,0);window.close();”6.其他用户Windows 2k/XP支持多用户，如果能在后台登陆另一个账户的桌面然后运行一个批处理，就能完全达到隐藏的目的7.编译成可执行文件不少方法可以实现，可以直接利用的工具有 Quick Batch file compiler。 出处：https://www.jb51.net/article/14352.htm","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"cmd","slug":"cmd","permalink":"https://muyangit.github.io/tags/cmd/"}],"author":"MuyanGit"},{"title":"  windows Git 中Git bash执行命令之前显示时间  ","slug":"windows中gitbash执行命令之前显示时间","date":"2021-10-20T20:09:36.000Z","updated":"2022-05-23T15:37:33.028Z","comments":true,"path":"2021/10/21/cl3sojxg3002p5cbh0904bh3n/","link":"","permalink":"https://muyangit.github.io/2021/10/21/cl3sojxg3002p5cbh0904bh3n/","excerpt":"","text":"windows Git 中Git bash执行命令之前显示时间PS1 prompt to show elapsed 显示经过的提示符time 时间 D:\\MySoftware\\DEV\\VersionCtrl\\Git\\etc\\profile.d\\git-prompt.sh 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152if test -f /etc/profile.d/git-sdk.shthen TITLEPREFIX=SDK-$&#123;MSYSTEM#MINGW&#125;else TITLEPREFIX=$MSYSTEMfiif test -f ~/.config/git/git-prompt.shthen . ~/.config/git/git-prompt.shelse PS1=&#x27;\\[\\033]0;$TITLEPREFIX:$PWD\\007\\]&#x27; # set window title PS1=&quot;$PS1&quot;&#x27;\\n&#x27; # new line PS1=&quot;$PS1&quot;&#x27;\\[\\033[32m\\]&#x27; # change to green PS1=&quot;$PS1&quot;&#x27;\\u@\\h &#x27; # user@host&lt;space&gt; PS1=&quot;$PS1&quot;&#x27;\\[\\033[35m\\]&#x27; # change to purple PS1=&quot;$PS1&quot;&#x27;$MSYSTEM &#x27; # show MSYSTEM PS1=&quot;$PS1&quot;&#x27;\\[\\033[33m\\]&#x27; # change to brownish yellow PS1=&quot;$PS1&quot;&#x27;\\w&#x27; # current working directory PS1=&quot;$PS1&quot;&#x27; \\t&#x27; # time if test -z &quot;$WINELOADERNOEXEC&quot; then GIT_EXEC_PATH=&quot;$(git --exec-path 2&gt;/dev/null)&quot; COMPLETION_PATH=&quot;$&#123;GIT_EXEC_PATH%/libexec/git-core&#125;&quot; COMPLETION_PATH=&quot;$&#123;COMPLETION_PATH%/lib/git-core&#125;&quot; COMPLETION_PATH=&quot;$COMPLETION_PATH/share/git/completion&quot; if test -f &quot;$COMPLETION_PATH/git-prompt.sh&quot; then . &quot;$COMPLETION_PATH/git-completion.bash&quot; . &quot;$COMPLETION_PATH/git-prompt.sh&quot; PS1=&quot;$PS1&quot;&#x27;\\[\\033[36m\\]&#x27; # change color to cyan PS1=&quot;$PS1&quot;&#x27;`__git_ps1`&#x27; # bash function fi fi PS1=&quot;$PS1&quot;&#x27;\\[\\033[0m\\]&#x27; # change color PS1=&quot;$PS1&quot;&#x27;\\n&#x27; # new line PS1=&quot;$PS1&quot;&#x27;$ &#x27; # prompt: always $fiMSYS2_PS1=&quot;$PS1&quot; # for detection by MSYS2 SDK&#x27;s bash.basrc# Evaluate all user-specific Bash completion scripts (if any)if test -z &quot;$WINELOADERNOEXEC&quot;then for c in &quot;$HOME&quot;/bash_completion.d/*.bash do # Handle absence of any scripts (or the folder) gracefully test ! -f &quot;$c&quot; || . &quot;$c&quot; donefi How to Shorten Git Bash 如何缩短 Git BashPrompt 提示 (Windows) (视窗)Ask Question 问问题 Asked 问道 2 years, 7 months ago 2年7个月前 Active 活跃 1 year, 6 months ago 一年零六个月前 Viewed 观看 8k times 8k 次 17 3 How do I shorten my git bash prompt from something like this 我如何缩短我的 git bash 提示从这样的东西 12Malik@LAPTOP-7R9912OI MINGW64 ~/Desktop/test$ to something like this 这样的事情 1Malik@test$ I am using git bash on windows with git version 2.21.0 (26-02-2019) 我在 windows 上使用 git bash 和 git 版本2.21.0(26-02-2019) windows 窗户git-bash Share 分享 Follow 跟着 edited 编辑Feb 26 ‘19 at 15:01 2月26’1915:01 Govind Parmar 18.7k 18.7 k66 gold badges 6枚金徽章4949 silver badges 49枚银徽章7979 bronze badges 79枚铜徽章 asked 问Feb 26 ‘19 at 14:41 2月26’1914:41 malik bagwala 1,59422 gold badges 两枚金徽章1414 silver badges 14枚银质徽章2828 bronze badges 28枚铜徽章 Add a comment 添加评论 3 Answers 3个答案Active 活跃Oldest 最老的Votes 投票 22 An alternative answer is to go to C:\\Program Files\\Git\\etc\\profile.d and open the git-prompt.sh file. It contains the default configuration/prompt for Git Bash. 另一种方法是进入 c: Program Files Git etc profile.d 并打开 Git-prompt。Sh 文件。它包含 Git Bash 的默认配置/提示。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950if test -f /etc/profile.d/git-sdk.shthen TITLEPREFIX=SDK-$&#123;MSYSTEM#MINGW&#125;else TITLEPREFIX=$MSYSTEMfiif test -f ~/.config/git/git-prompt.shthen . ~/.config/git/git-prompt.shelse PS1=&#x27;\\[\\033]0;$TITLEPREFIX:$PWD\\007\\]&#x27; # set window title PS1=&quot;$PS1&quot;&#x27;\\n&#x27; # new line PS1=&quot;$PS1&quot;&#x27;\\[\\033[32m\\]&#x27; # change to green # PS1=&quot;$PS1&quot;&#x27;\\u@\\h &#x27; # user@host&lt;space&gt; # PS1=&quot;$PS1&quot;&#x27;\\[\\033[35m\\]&#x27; # change to purple # PS1=&quot;$PS1&quot;&#x27;$MSYSTEM &#x27; # show MSYSTEM # PS1=&quot;$PS1&quot;&#x27;\\[\\033[33m\\]&#x27; # change to brownish yellow PS1=&quot;$PS1&quot;&#x27;\\W&#x27; # current working directory if test -z &quot;$WINELOADERNOEXEC&quot; then GIT_EXEC_PATH=&quot;$(git --exec-path 2&gt;/dev/null)&quot; COMPLETION_PATH=&quot;$&#123;GIT_EXEC_PATH%/libexec/git-core&#125;&quot; COMPLETION_PATH=&quot;$&#123;COMPLETION_PATH%/lib/git-core&#125;&quot; COMPLETION_PATH=&quot;$COMPLETION_PATH/share/git/completion&quot; if test -f &quot;$COMPLETION_PATH/git-prompt.sh&quot; then . &quot;$COMPLETION_PATH/git-completion.bash&quot; . &quot;$COMPLETION_PATH/git-prompt.sh&quot; PS1=&quot;$PS1&quot;&#x27;\\[\\033[36m\\]&#x27; # change color to cyan PS1=&quot;$PS1&quot;&#x27;`__git_ps1`&#x27; # bash function fi fi PS1=&quot;$PS1&quot;&#x27;\\[\\033[0m\\]&#x27; # change color # PS1=&quot;$PS1&quot;&#x27;\\n&#x27; # new line PS1=&quot;$PS1&quot;&#x27; $ &#x27; # prompt: always $fiMSYS2_PS1=&quot;$PS1&quot; # for detection by MSYS2 SDK&#x27;s bash.basrc# Evaluate all user-specific Bash completion scripts (if any)if test -z &quot;$WINELOADERNOEXEC&quot;then for c in &quot;$HOME&quot;/bash_completion.d/*.bash do # Handle absence of any scripts (or the folder) gracefully test ! -f &quot;$c&quot; || . &quot;$c&quot; donefi In my configuration, I commented out the user@host&lt;space&gt;, the MINGW64 and changed the working directory to its basename by changing \\w to \\W. 在我的配置中，我注释掉了 user@host &lt; space &gt; ，MINGW64，并通过将 w 更改为 w 将工作目录更改为 basename。 Share 分享 Follow 跟着 answered 回答Apr 23 ‘20 at 4:00 4月23日20时4分 Krizza 女名女子名 34833 silver badges 3枚银质徽章77 bronze badges 7枚铜徽章 7 This works, but be careful: git updates overwrite this file. This file checks for the existence of 这是可行的，但是要小心: git 更新会覆盖这个文件~/.config/git/git-prompt.sh which if exists takes precedence, so you’re better of making your changes there, or directly in 如果存在优先，所以你最好在那里修改，或者直接在~/.bashrc. – Willem 男名男子名 Jul 10 ‘20 at 6:56 2010年7月10日6:56 I’m unable to change git- 我不能改变 git-prompt 提示.sh file as the system is complaining that’s readonly file. chmod also isn’t working (permission denied). What I might be missing? .Sh 文件，因为系统正在抱怨这是只读文件。Chmod 也不工作(许可被拒绝)。我可能错过了什么？ – Amit128 阿米特128 May 5 at 15:26 5月5日15:26 Add a comment 添加评论 17 In Git Bash: 在 Git Bash 中: 12cd ~notepad .bashrc In notepad, add the line PS1=&quot;foobar&gt;&quot; (replace foobar&gt; with whatever text you want) 在 notepad 中，添加行 PS1 = “ foobar &gt;”(将 foobar &gt; 替换为您想要的任何文本) After saving ~/.bashrc, in Git Bash, run the command: 在 Git Bash 中保存 ~/. bashrc 之后，运行以下命令: 1source ~/.bashrc You may find this online .bashrc generator useful to experiment with to find a prompt you like. 你可能会发现这个在线.bashrc 生成器有用的实验，找到一个提示您喜欢。 Share 分享 Follow 跟着 answered 回答Feb 26 ‘19 at 14:59 2月26’1914:59 Govind Parmar 18.7k 18.7 k66 gold badges 6枚金徽章4949 silver badges 49枚银徽章7979 bronze badges 79枚铜徽章 after the command notepad .bashrc i get a message ‘would you like to create a .bashrc file’ and it opens a blank file 在命令记事本后面。我收到一条消息，你想创建一个。然后打开一个空白文件 – malik bagwala Feb 26 ‘19 at 16:15 2月26’1916:15 1 @malikbagwala Then say “Yes” to that @ malikbagwala 那就答应吧 – Govind Parmar Feb 26 ‘19 at 16:15 2月26’1916:15 Add a comment 添加评论 -5 The: 返回文章页面 LAPTOP-7R9912OI MINGW6 is the name of your PC. 是你电脑的名称。 Search in setting 在设置中搜索 ‘about your PC’ 关于你的电脑 and look for 然后寻找 rename 重新命名 There you can rename your pc and it should change the username in git-bash 在那里你可以重命名你的电脑，它应该改变在 git-bash 的用户名 Share 分享 Follow 跟着","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" 常用Git命令清单与配置    ","slug":"常用Git常用命令清单与配置","date":"2021-10-20T17:41:24.000Z","updated":"2022-05-23T15:37:33.003Z","comments":true,"path":"2021/10/21/cl3sojxg700325cbh1fuk3exl/","link":"","permalink":"https://muyangit.github.io/2021/10/21/cl3sojxg700325cbh1fuk3exl/","excerpt":"","text":"1.创建项目（本地项目）2.在github新建仓库3.打开项目所在文件夹, 在文件夹上右键运行: git bash here4.使用命令 git init git add src git commit -m “first commit” git remote add origin &#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;:MuyanGit/MuyanGit.github.io.git git push -u origin master 最后一步失败之后 git pull –rebase origin master 执行 123456789101112131415161718192021有如下几种解决方法：1.使用强制push的方法：git push -u origin master -f 这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。2.push前先将远程repository修改pull下来git pull origin mastergit push -u origin master3.若不想merge远程和本地修改，可以先创建新的分支：git branch [name]然后pushgit push -u origin [name] 常用Git命令清单一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。 名次解释下面是我整理的常用 Git 命令清单。 几个专用名词的译名如下: Workspace： 工作区 Index / Stage： 暂存区 Repository： 仓库区（或本地仓库） Remote：远程仓库 一、新建代码库123456# 在当前目录新建一个Git代码库git init# 新建一个目录，将其初始化为Git代码库git init [project-name]# 下载一个项目和它的整个代码历史git clone [url] 二、配置Git的设置文件为.gitconfig，它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置) 1234567891011121314# 显示当前的Git配置git config --list# 编辑Git配置文件git config -e [--global]# 设置提交代码时的用户信息git config [--global] user.name &quot;[name]&quot;git config [--global] user.email &quot;[email address]&quot;# 颜色设置git config --global color.ui true # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy # remove proxy configuration on git 三、增加/删除文件123456789101112131415161718192021222324252627# 添加指定文件到暂存区git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录git add [dir]# 添加当前目录的所有文件到暂存区git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交git add -p# 删除工作区文件，并且将这次删除放入暂存区git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区git rm --cached [file]# 改名文件，并且将这个改名放入暂存区git mv [file-original] [file-renamed]#删除远程分支git init git remote add origin git@github.com:MuyanGit/muyangit.github.io.git删除远程分支git push origin --delete &lt;branchName&gt;覆盖本地git fetch --all #覆盖本地git reset --hard origin/master #覆盖本地git pull #覆盖本地 四、代码提交12345678910111213141516# 提交暂存区到仓库区git commit -m [message]# 提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 提交时显示所有diff信息git commit -v# 将add和commit合为一步git commit -am &#x27;message&#x27;# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化git commit --amend [file1] [file2] ... 五、分支1234567891011121314151617181920212223242526272829303132333435# 列出所有本地分支git branch# 列出所有远程分支git branch -r# 列出所有本地分支和远程分支git branch -a# 新建一个分支，但依然停留在当前分支git branch [branch-name]# 新建一个分支，并切换到该分支git checkout -b [branch]# 新建一个分支，指向指定commitgit branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区git checkout [branch-name]# 切换到上一个分支git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支git merge [branch]# 选择一个commit，合并进当前分支git cherry-pick [commit]# 删除分支git branch -d [branch-name]# 删除远程分支git push origin --delete [branch-name]git branch -dr [remote/branch]# 检出版本v2.0git checkout v2.0# 从远程分支develop创建新本地分支devel并检出git checkout -b devel origin/develop# 检出head版本的README文件（可用于修改错误回退）git checkout -- README 六、标签123456789101112131415161718# 列出所有taggit tag# 新建一个tag在当前commitgit tag [tag]# 新建一个tag在指定commitgit tag [tag] [commit]# 删除本地taggit tag -d [tag]# 删除远程taggit push origin :refs/tags/[tagName]# 查看tag信息git show [tag]# 提交指定taggit push [remote] [tag]# 提交所有taggit push [remote] --tags# 新建一个分支，指向某个taggit checkout -b [branch] [tag] 七、查看信息1234567891011121314151617181920212223242526272829303132333435363738394041# 显示有变更的文件git status# 显示当前分支的版本历史git log# 显示commit历史，以及每次commit发生变更的文件git log --stat# 搜索提交历史，根据关键词git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名git log --follow [file]git whatchanged [file]# 显示指定文件相关的每一次diffgit log -p [file]# 显示过去5次提交git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序git shortlog -sn# 显示指定文件是什么人在什么时间修改过git blame [file]# 显示暂存区和工作区的差异git diff# 显示暂存区和上一个commit的差异git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异git diff HEAD# 显示两次提交之间的差异git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化git show [commit]# 显示某次提交发生变化的文件git show --name-only [commit]# 显示某次提交时，某个文件的内容git show [commit]:[filename]# 显示当前分支的最近几次提交git reflog 八、远程同步1234567891011121314151617181920212223242526272829303132333435# 下载远程仓库的所有变动git fetch [remote]# 显示所有远程仓库git remote -v# 显示某个远程仓库的信息git remote show [remote]# 增加一个新的远程仓库，并命名git remote add [shortname] [url]git remote add origin git@github.com:MuyanGit/MuyanGit.github.io.git#本地分支合并远程分支git branch –set-upstream backup origin/backupgit branch --set-upstream-to=origin/backup git remote add origin git@github.com:MuyanGit/muyangit.github.io.backup.git# 要删除遥控器：git remote remove origin# 取回远程仓库的变化，并与本地分支合并 git pull [remote] [branch]git pull git@github.com:MuyanGit/MuyanGit.github.io.git master# 上传本地指定分支到远程仓库git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突git push [remote] --force#git强制提交本地分支覆盖远程分支git push origin 分支名 --force强行推送当前master分支到origin远程仓库，即使有冲突-覆盖git push origin master --force# 推送所有分支到远程仓库git push [remote] --all 九、撤销12345678910111213141516171819202122# 恢复暂存区的指定文件到工作区git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file]# 恢复暂存区的所有文件到工作区git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file]# 重置暂存区与工作区，与上一次commit保持一致git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit]# 暂时将未提交的变化移除，稍后再移入git stashgit stash pop 十、其他12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788git init # 初始化本地git仓库（创建新仓库）git config --global user.name &quot;xxx&quot; # 配置用户名git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件git config --global color.ui true # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy # remove proxy configuration on gitgit clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库git status # 查看当前版本状态（是否修改）git add xyz # 添加xyz文件至indexgit add . # 增加当前子目录下所有更改过的文件至indexgit commit -m &#x27;xxx&#x27; # 提交git commit --amend -m &#x27;xxx&#x27; # 合并上一次提交（用于反复修改）git commit -am &#x27;xxx&#x27; # 将add和commit合为一步git rm xxx # 删除index中的文件git rm -r * # 递归删除git log # 显示提交日志git log -1 # 显示1行日志 -n为n行git log -5git log --stat # 显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容git show dfb02 # 可只用commitid的前几位git show HEAD # 显示HEAD提交日志git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag # 显示已存在的taggit tag -a v2.0 -m &#x27;xxx&#x27; # 增加v2.0的taggit show v2.0 # 显示v2.0的日志及详细内容git log v2.0 # 显示v2.0的日志git diff # 显示所有未添加至index的变更git diff --cached # 显示所有已添加index但还未commit的变更git diff HEAD^ # 比较与上一个版本的差异git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异git diff origin/master..master # 比较远程分支master上有本地分支master上没有的git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）git branch # 显示本地分支git branch --contains 50089 # 显示包含提交50089的分支git branch -a # 显示所有分支git branch -r # 显示所有原创分支git branch --merged # 显示所有已合并到当前分支的分支git branch --no-merged # 显示所有未合并到当前分支的分支git branch -m master master_copy # 本地分支改名git checkout -b master_copy # 从当前分支创建新分支master_copy并检出git checkout -b master master_copy # 上面的完整版git checkout features/performance # 检出已存在的features/performance分支git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0 # 检出版本v2.0git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出git checkout -- README # 检出head版本的README文件（可用于修改错误回退）git merge origin/master # 合并远程master分支至当前分支git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改git push origin master # 将当前分支push到远程master分支git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支git push --tags # 把所有tag推送到远程仓库git fetch # 获取所有远程分支（不更新本地分支，另需merge）git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支git pull origin master # 获取远程分支master并merge到当前分支git mv README README2 # 重命名文件README为README2git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933git ls-files # 列出git index包含的文件git show-branch # 图示当前分支历史git show-branch --all # 图示所有分支历史git whatchanged # 显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD # 内部命令：显示某个git对象git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASHgit reflog # 显示所有提交，包括孤立节点git show HEAD@&#123;5&#125;git show master@&#123;yesterday&#125; # 显示master分支昨天的状态git log --pretty=format:&#x27;%h %s&#x27; --graph # 图示提交日志git show HEAD~3git show -s --pretty=raw 2be7fcb476git stash # 暂存当前修改，将所有至为HEAD状态git stash list # 查看所有暂存git stash show -p stash@&#123;0&#125; # 参考第一次暂存git stash apply stash@&#123;0&#125; # 应用第一次暂存git grep &quot;delete from&quot; # 文件中搜索文本“delete from”git grep -e &#x27;#define&#x27; --and -e SORT_DIRENTgit gcgit fsck# 生成一个可供发布的压缩包git archive 十一、回滚12345678910111213141. 代码回退git log #查看回到的版本，然后用以下命令，将本地代码回退到某个版本：git reset --hard HEAD^ #回退到上个版本git reset --hard commit_id #退到/进到 指定 commit_idgit push origin HEAD --force #如果需要将回退的某个版本提交远程，可执行以下命令：回滚之后，想恢复到新的版本怎么办？git reflog #打印你记录你的每一次操作记录git reflog 可以查看所有分支的所有操作记录（包括 commit 和 reset 的操作），包括已经被删除的 commit 记录， git log 则不能察看已经删除了的 commit 记录，而且跟进结果可以回退道某一个修改。2. 返回主分支git checkout master 常用初始化操作： 1234567891011121314git config --global user.name &lt;name&gt;// 设置提交者的名字git config --global user.email &lt;email&gt;// 设置提交者的邮箱git config --global core.editor &lt;editor&gt;// 设置默认文本编辑器git config --global merge.tool &lt;tool&gt;// 设置解决合并冲突时差异分析工具git config --list// 检查已有的配置信息1234567891011121314 创建新版本库： 12git clone &lt;url&gt; #克隆远程版本库git init #初始化本地版本库12 修改和提交： 123456git add . #添加所有改动过的文件到暂存区git add &lt;file&gt; #添加指定的文件到暂存区git mv &lt;old&gt; &lt;new&gt; #文件重命名git rm &lt;file&gt; #删除文件git rm --cached &lt;file&gt; #停止跟踪文件但不从工作区删除。123456 提交文件： 1234git commit -m &lt;file&gt; &#x27;msg&#x27; # 提交指定的文件git commit -m &#x27;msg&#x27; # 提交所有暂存区中的文件git commit -amend # 修改最后一次提交git commit -C HEAD -a -amend #增补提交（不会产生新的提交记录)1234 查看提交历史： 123456789101112131415git log #查看提交历史git log -p &lt;file&gt; #查看指定文件的提交历史git blame &lt;file&gt; #以列表方式查看指定文件的提交历史gitk #查看当前分支历史记录，gitk貌似是个工具gitk --all #查看所有分支历史记录git branch -v #查看所有分支及其最后一次提交记录git status #查看当前状态git diff #查看变更内容（工作区与暂存区）git diff --cached #查看改动（暂存区与版本库，即下次提交的内容）git diff --staged #同上git diff master #工作区与版本库对比123456789101112131415 git checkout 用法： 1234567891011121314git checkout git checkout --# 以缩写字母方式查看文件状态，M、A等等。git checkout &lt;file&gt;git checkout -- &lt;file&gt;# 这两个命令都可以撤销工作区的修改，回到暂存区或者版本区的状态。(不会影响暂存区中的内容）git checkout HEAD &lt;file1&gt; &lt;file2&gt;git checkout HEAD .# 撤销工作区和暂存区的修改（工作区和暂存区都会回到最后一次提交的状态）git checkout HEAD^^ # 创建新分支，指向倒数第二次提交的状态1234567891011121314 撤销操作： 1234git reset --hard HEAD #撤销工作目录中所有未提交的修改，（工作区和版本库都会回退到最后一次提交的状态）git reset --hard HEAD^^ #回退到倒数第二次提交的状态。git reset --hard &lt;hash&gt; #回退到对应的版本git revert &lt;hash&gt; 撤销指定的提交12345 分支与标签： 1234567891011git branch #显示所有本地分支git checkout &lt;branch/tagname&gt; #切换到指定分支或标签git checkout -b loaclName origin/remoteName #创建本地分支并追踪到远端分支git branch &lt;name&gt; #创建新分支git branch -d &lt;name&gt; #删除本地分支git tag #列出所有本地标签git tag &lt;tagname&gt; #基于最新提交创建标签git tag -d &lt;tagname&gt; #删除标签git push origin --delete &lt;branchname&gt; # 删除一个远程分支1234567891011 合并与衍合 12git merge &lt;branch&gt; #合并指定分支到当前分支git rebase &lt;branch&gt; #衍合指定分支到当前分支12 远程操作： 12345678910111213git remote -v #查看远程版本库信息git remote show &lt;remote&gt; &lt;url&gt; #查看指定远程版本库信息git remote add &lt;remote&gt; &lt;url&gt; #添加远程版本库要添加遥控器：git remote add origin yourRemoteUrl最后git push -u origin mastergit fetch &lt;remote&gt; #从远程库获取代码git pull &lt;remote&gt; &lt;branch&gt; #下载代码及快速合并git push &lt;remote&gt;:&lt;branch&gt;/&lt;tagname&gt; #删除远程分支或标签git push -tags #上传所有标签123456789 备忘：12345678910111213141516171819202122232425git push origin local-branch:remote-branchgit push origin master:master// 同步本地分支到远端git fetch origin master// 拉取远端master数据git log -p master origin/master// 比较本地master和远端master的差别git merge origin/master// 合并远端mastergit push origin localName:remoteNamegit push origin master:master// 推送本地分支到远端分支git checkout -b localName origin/remoteName// 创建本地分支并与远端分支相关联1234567891011121314151617git branch -m old-name new-name// 重命名分支名git branch --set-upstream-to=origin/branch// 将本地分支与远端分支相关联 常见问题1.Git 警告 LF will be replaced by CRLF 原创DreamLee0625 最后发布于2017-09-18 11:22:43 阅读数 5558 收藏 展开 在使用git add . 命令时，出现如下提示： 1warning: LF will be replaced by CRLF in .idea/vcs.xml. 1 ps：这里只是以这个文件名（vcs.xml）举个例子。意思是在.idea/vcs.xml文件中，LF（换行，Line Feed）将会被CRLF（回车换行，CarriageReturn）替代。这是因为在windows中换行符为CRLF，而在linux下的换行符为LF。 1The file will have its original line endings in your working directory.1 当报这个警告时是由于文件夹远程不存在，我是直接选择无视他继续提交。目前没有发现什么不妥。 在网上查询后发现，是因为git有自动转换功能，如果想要禁止自动转换功能，则执行如下步骤： 1234rm -rf .git // 删除.git git config --global core.autocrlf false //禁用自动转换 git init git add . 2.使用git push时出现error: src refspec master does not match any. 是什么原因githubgit 方案1：git commit -m “first commit” 使用git push是，采用以下步骤： 12345git initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://github.com/focusor/focusor.github.io.gitgit push -u origin master 产生如下错误： 1error: src refspec master does not match any. error: failed to push some refs to &quot;xxxxxxx&quot; 然后用如下方法解决了： 1git add .git commit -m &quot;write your meaaage&quot; 之后push就成功了，具体原因是什么呢？ https://segmentfault.com/q/1010000004615080?sort=created#comment-area) FullStackDeveloper 8.8k 这种错误一般是因为push的时候暂存区没有文件，确认下add的README.md存不存在 赞 6 评论 赞赏 2016-03-16 bolelee： 已经执行过git add 和git commit，暂存区是有内容的，为什么还是push失败？并没有修改到README.md，为什么要加这个？试了加这个还是没有解决问题怎么解决？ 也可能是你分支不正确 git add . 会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件. 方案2：touch READMEGit常见错误与操作：error: src refspec master does not match any解决办法 转载su1573 最后发布于2017-10-19 11:31:09 阅读数 4089 收藏 展开 Git常见错误与操作：error: src refspec master does not match any解决办法 一、 出现错误 error:src refspec master does not match any 原因分析： 引起该错误的原因是目录中没有文件，空目录是不能提交上去的 解决办法： [html] view plain copy 1touch README git add README git commit –m’first commit’ git push origin master 1234 (来自：http://www.open-open.com/lib/view/open1366080269265.html)实际上 [html] view plain copy 1git init 1 这一步之后创建了一个名为.git的文件夹，不过它在默认状态下是隐藏的，系统将隐藏文件夹显示出来，可以看到有这样一个文件夹。github上传项目方法：http://www.oschina.net/question/159132_86728在你的电脑上装好git 大致流程是： [html] view plain copy 11、 在github上创建项目 2、 使用git clone https://github/xx账号/xx项目.git克隆到本地 3、 编辑项目 4、 git add .(将改动添加到暂存区) 5、 git commit –m”提交说明” 6、 git push origin 将本地更改推送到远程master分支 123456 这样你就完成了向远程仓库的推送 如果在github的remote上已经有了文件，会出现错误。此时应当先pull一下，即： [html] view plain copy 1git pull origin master 1 然后再进行： [html] view plain copy 1git push origin master 1 二、如果输入git remoteadd origin &#x67;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;:djqiang（github帐号名）/gitdemo（项目名）.git 1提示出错信息：fatal: remoteorigin already exists.解决办法如下：123 [html] view plain copy 11、先输入git remote rmorigin 2、再输入git remote addorigin git@github.com:djqiang/gitdemo.git 就不会报错了！ 3、如果输入git remote rmorigin 还是报错的话，error: Could not remove config section&#x27;remote.origin&#x27;. 我们需要修改gitconfig文件的内容 4、找到你的github的安装路径5、找到一个名为gitconfig的文件，打开它把里面的[remote &quot;origin&quot;]那一行删掉就好了！12345678 三、如果输入ssh -T &#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;出现错误提示：Permissiondenied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。 1解决办法如下：1、先输入ssh-agent，再输入ssh-add ~/.ssh/id_key，这样就可以了。2、如果还是不行的话，输入ssh-add~/.ssh/id_key 命令后出现报错Could not open a connection toyour authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。1234567 四、如果输入git push origin master 1提示出错信息：error:failedto push som refs to .......解决办法如下：123 [html] view plain copy 11、先输入git pullorigin master //先把远程服务器github上面的文件拉下来 2、再输入git pushorigin master 3、如果出现报错 fatal:Couldn&#x27;t find remote ref master或者fatal: &#x27;origin&#x27; doesnot appear to be a git repository以及fatal: Could notread from remote repository. 4、则需要重新输入git remoteadd origingit@github.com:djqiang/gitdemo.git 1234 五、Git常见操作 使用git在本地创建一个项目的过程 [html] view plain copy 1makdir ~/hello-world //创建一个项目hello-world cd~/hello-world //打开这个项目 git init //初始化 touch README git add README //更新README文件 git commit-m &#x27;first commit&#x27; //提交更新，并注释信息“first commit” git remote add origin git@github.com:defnngj/hello-world.git //连接远程github项目 git push -u origin master //将本地项目更新到github项目上去 12345678 六、gitconfig配置文件 1Git有一个工具被称为git config，它允许你获得和设置配置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量可以被存储在三个不同的位置： 1./etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’--system’ 给 git config，它将明确的读和写这个文件。 2.~/.gitconfig 文件 ：具体到你的用户。你可以通过传递--global 选项使Git 读或写这个特定的文件。 3.位于git目录的config文件 (也就是.git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在.git/config中的值覆盖了在/etc/gitconfig中的同一个值。 在Windows系统中，Git在$HOME目录中查找.gitconfig文件（对大多数人来说，位于C:\\Documents and Settings\\$USER下）。它也会查找/etc/gitconfig，尽管它是相对于Msys 根目录的。这可能是你在Windows中运行安装程序时决定安装Git的任何地方。12345 七、配置相关信息： 11 当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：1 [html] view plain copy 1git config --global user.name &quot;John Doe&quot; git config --global user.email johndoe@example.com 2 你的编辑器(Your Editor)123456 现在，你的标识已经设置，你可以配置你的缺省文本编辑器，Git在需要你输入一些消息时会使用该文本编辑器。缺省情况下，Git使用你的系统的缺省编辑器，这通常可能是vi 或者 vim。如果你想使用一个不同的文本编辑器，例如Emacs，你可以做如下操作： [html] view plain copy 1git config --global core.editor emacs 1 3 检查你的设置(Checking YourSettings) 如果你想检查你的设置，你可以使用 git config –list 命令来列出Git可以在该处找到的所有的设置: [html] view plain copy 1git config --list 你也可以查看Git认为的一个特定的关键字目前的值，使用如下命令 git config &#123;key&#125;:12345 [html] view plain copy 1git config user.name 4 获取帮助(Getting help)12345 如果当你在使用Git时需要帮助，有三种方法可以获得任何git命令的手册页(manpage)帮助信息: [html] view plain copy 1git help &lt;verb&gt; git &lt;verb&gt; --help man git-&lt;verb&gt; 123 例如，你可以运行如下命令获取对config命令的手册页帮助: [html] view plain copy 1git help config 1 转载来源：http://blog.csdn.net/s164828378/article/details/52425208","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"git","slug":"git","permalink":"https://muyangit.github.io/tags/git/"}],"author":"MuyanGit"},{"title":"hexo部署问题：Error spawn git ENOENT hexo报 Error spawn git ENOENT错误的解决方法","slug":"hexo部署问题：Error spawn git ENOENT hexo报 Error spawn git ENOENT错误的解决方法","date":"2021-10-20T16:22:03.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/10/21/cl3sojxfs00215cbh3wyh5gd0/","link":"","permalink":"https://muyangit.github.io/2021/10/21/cl3sojxfs00215cbh3wyh5gd0/","excerpt":"","text":"hexo报 Error: spawn git ENOENT错误的解决方法在windows的cmd，执行hexo d突然就报Error: spawn git ENOENT错误。如下图 看到报错里的乱码，想起正好当天改了_config.yml中的language为language: zh_cn，以为是这个问题，但改回去后问题仍然存在。 在网上搜了一圈，有效的解决方法是。。。。。。 在gitbash中执行该命令。 作者：木头场主链接：https://www.jianshu.com/p/7f88e94993a2来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 bat脚本启动git bash窗口，并执行命令-一键清理生成发布备份+ bash在gitbash执行日志不乱码+ 12345@echo OFF::重装系统后注意两处盘符的修改G:cd G:\\MuyanGitBlog\\MuyanGit\\杂项\\博客备份\\start D:\\MySoftware\\DEV\\VersionCtrl\\Git\\git-bash.exe -c &quot;bash bolg_backup.sh&quot; 1start &quot;&quot; &quot;D:\\MySoftware\\DEV\\VersionCtrl\\Git\\bin\\sh.exe&quot; --login -i -l -c &#x27;bash bolg_backup.sh&#x27; 1234567891011#!/bin/bash#重装系统后注意两处盘符的修改##exec 1&gt;&gt;G:\\MuyanGitBlog\\MuyanGit\\杂项\\博客备份\\log.txt 2&gt;&amp;1##cd G:/MuyanGitBlog/MuyanGit exec 3&gt;&amp;1 4&gt;&amp;2trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; 0 1 2 3exec 1&gt;&gt;log.txt 2&gt;&amp;1# Everything below will go to the file &#x27;log.txt&#x27;:# 执行的命令主体echo 开始运行备份命令—————————————— &amp;&amp; echo `date`······备份进行中 &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo b &amp;&amp; echo MuyanGit博客备份 &amp;&amp; echo 结束运行备份命令—————————————— &amp;&amp; echo `date`······备份结束中 1 2.2 参数说明 start git-bash.ext： 在cmd脚本中启动gitbash窗口 -c: 设置启动参数， 各个启动参数用&amp;&amp;分隔 git config –global gui.encoding utf-8 : 设置编码utf-8 2.3 效果 这样随你怎么玩都不会乱码~ [hexo部署到github的时候可以动态添加commit的message吗发布于 2016-10-12 hexo部署到github的时候commit信息是直接写在配置文件里的，如果需要更新message，就需要每次部署前改一下配置文件能不能直接在部署命令后面传入需要的更新的message呢？ 可以：如下图配置 12345678910111213141516171819# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git #部署方式尝试修改引起变化 repo: github: git@git.zhlh6.cn:MuyanGit/MuyanGit.github.io.git #github: https://github.com/MuyanGit/MuyanGit.github.io.git #coding: branch: master #main #master是旧的 #部署分支 message: MuyanGit 的网站”更新“中······&#123;&#123; now(&quot;YYYY-MM-DD HH:mm:ss&quot;) &#125;&#125;【https://MuyanGit.github.io/ 】# backupbackup: type: git message: MuyanGit 的网站”备份“中······&#123;&#123; now(&quot;YYYY-MM-DD HH:mm:ss&quot;) &#125;&#125;【https://MuyanGit.github.io/ 】 #(备份时候可以在这里加入备注2021年9月05日·星期0·23·48·58)备份之前分别执行 hexo c hexo g hexo d hexo b repo: #github: https://hub.fastgit.org/MuyanGit/MuyanGit.github.io.git,backup github: https://github.com/MuyanGit/MuyanGit.github.io.git,backup #coding: hexo n “ 如何完整记录所有bash脚本操作+当做日志+日志记录+windows如何运行bash “gitbash中可以 power也可以12345678#!/bin/bashexec 3&gt;&amp;1 4&gt;&amp;2trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; 0 1 2 3exec 1&gt;H:/MuyanGitBlog/MuyanGit/log.txt 2&gt;&amp;1# Everything below will go to the file &#x27;log.out&#x27;:# 执行的命令主体cd H:/MuyanGitBlog/MuyanGit&amp;&amp;echo `date`备份进行中&amp;hexo clean&amp;hexo g&amp;hexo d&amp;hexo b&amp;echo MuyanGit博客备份&amp;echo 结束运行备份命令&amp;&amp;echo `date`备份结束中 日志记录123456789101112#!/bin/bash(echo &quot; `date` : part 1 - start &quot;ssh -f admin@server.com &#x27;bash /www/htdocs/server.com/scripts/part1.sh logout exit&#x27;echo &quot; `date` : sleep 120&quot;sleep 120echo &quot; `date` : part 2 - start&quot;ssh admin@server.com &#x27;bash /www/htdocs/server.com/scripts/part2.sh logout exit&#x27;echo &quot; `date` : part 3 - start&quot;ssh admin@server.com &#x27;bash /www/htdocs/server.com/scripts/part3.sh logout exit&#x27;echo &quot; `date` : END&quot;) | tee -a /home/scripts/cron/logs 我通常在每个脚本的开头放置类似于以下内容的内容（特别是如果它将作为守护程序运行）： 12345#!/bin/bashexec 3&gt;&amp;1 4&gt;&amp;2trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; 0 1 2 3exec 1&gt;log.out 2&gt;&amp;1# Everything below will go to the file &#x27;log.out&#x27;: 123456789101112131415161718192021222324252627282930313233说明：exec 3&gt;&amp;1 4&gt;&amp;2保存文件描述符，以便可以将它们恢复到重定向之前的状态，也可以将自身用于输出到以下重定向之前的状态。trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; 0 1 2 3恢复特定信号的文件描述符。通常不需要，因为应该在子外壳退出时将其还原。exec 1&gt;log.out 2&gt;&amp;1重定向stdout到文件，log.out然后重定向stderr到stdout。请注意，当您希望它们转到同一文件时，顺序很重要。stdout 必须先重定向，然后才能stderr重定向到stdout。从那时起，要查看控制台上的输出（也许），您只需将其重定向到即可&amp;3。例如，echo &quot;$(date) : part 1 - start&quot; &gt;&amp;3stdout在执行上面的第3行之前，它将转到所指示的任何地方（大概是控制台）。— 机器人 source&lt;&lt; niceroot，谢谢！我在脚本的开头添加了三行（exec，trap，exec），并且能够同时获取stdout和stderr。但是一个问题：我已经看到“文件描述符3（pipe：XXX）在some_command上泄漏” ...请让我知道如何避免出现这些错误。我在自定义面板中使用基于busybox的sh。— kumar3伟大的功夫在这里！-更好的是使用trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; 0 1 2 3 RETURN。每次使用.shell执行shell函数或脚本时，RETURN伪sigspec恢复文件描述符。或源内置命令执行完毕。由于这个原因（以及其他原因），我在最后两行中添加：return＆exit 0-仅需2美分，@ nicerobot恭喜您！— DavAlPi&#x27;3通过shell的全局变量记录shell脚本的细节很多。我们可以在外壳程序脚本中模拟类似的日志记录：cubicrace.com/2016/03/efficiency-logging-mechnism-in-shell.html 文章详细介绍了日志级别，如INFO，DEBUG，ERROR。跟踪详细信息，例如脚本入口，脚本出口，函数入口，函数出口。— Piyush Chordia&#x27;3trap信号的枚举看起来有些奇怪。通常，您也希望包括在内15。— 三胞胎1@PiyushChordia链接修复：cubicrace.com/2016/03/ficient-logging-mechnism-in-shell.html— 警惕者 要将ssh输出输出到您的日志文件，您必须重定向stderr到stdout。您可以通过2&gt;&amp;1在bash脚本之后追加来做到这一点。它应该看起来像这样： 1234#!/bin/bash(...) 2&gt;&amp;1 | tee ... 当这不能按正确的顺序显示消息时，请尝试添加另一个子shell： 1234#!/bin/bash((...) 2&gt;&amp;1) | tee ... windows - 打开 git bash shell 窗口，执行命令并在 term 信号后保留原文 标签 windows git bash shell maven 我有一个批处理文件，它通过打开许多“git bash”shell 窗口来设置我的环境。除了一个烦人的功能之外，这完全有效，如果您按 Ctrl C(或发送任何其他 Term 信号)整个 bash 窗口将关闭。 我希望窗口的行为就像它已正常打开一样，因此当它收到术语信号时，它会返回到 bash 提示符。 这是我的 setup.bat 文件的当前内容: 12345C:cd \\project\\start &quot;&quot; &quot;%SYSTEMDRIVE%\\Program Files (x86)\\Git\\bin\\sh.exe&quot; --login -i -l -c &quot;source ali.sh &amp;&amp; mvn spring-boot:run&quot;cd \\project2\\start &quot;&quot; &quot;%SYSTEMDRIVE%\\Program Files (x86)\\Git\\bin\\sh.exe&quot; --login 请注意，第一个启动命令运行 maven，当我想重新启动命令(按 Ctrl+C)时，它会关闭整个窗口。第二个启动命令在该目录中创建一个新的 bash 窗口，即使使用 Ctrl+C，它也像普通的 bash 窗口一样工作，但我希望它在开始时运行一个命令。 这可能吗？非常感谢您的帮助 最佳答案 像这样的事情可能对你有用: 123C:cd \\project\\start &quot;&quot; &quot;%SYSTEMDRIVE%\\Program Files (x86)\\Git\\bin\\sh.exe&quot; --login -i -l -c &quot;sh -c &#x27;source ali.sh &amp;&amp; mvn spring-boot:run; exec sh&#x27;&quot; 诀窍是将命令包装在: 1sh -c &#x27;...; exec sh&#x27; 12&quot;D:\\MySoftware\\DEV\\VersionCtrl\\Git\\bin\\sh.exe&quot;start &quot;&quot; &quot;D:\\MySoftware\\DEV\\VersionCtrl\\Git\\bin\\sh.exe&quot; --login -i -l -c &quot;sh -c &#x27;bash bolg_backup.sh;exec sh&#x27;&quot; 1start &quot;&quot; &quot;D:\\MySoftware\\DEV\\VersionCtrl\\Git\\bin\\sh.exe&quot; --login -i -l -c &#x27;bash bolg_backup.sh&#x27; 哪里sh是你的 shell ，可能是 bash . 您实际上可能只需为每个命令添加后缀:exec sh ，例如: 1start &quot;&quot; &quot;%SYSTEMDRIVE%\\Program Files (x86)\\Git\\bin\\sh.exe&quot; --login -i -l -c &quot;source ali.sh &amp;&amp; mvn spring-boot:run; exec sh&quot; start “” “D:\\MySoftware\\DEV\\VersionCtrl\\Git\\bin\\sh.exe” -c “G:\\MuyanGitBlog\\MuyanGit\\杂项\\博客备份\\bolg_backup.sh” 关于windows - 打开 git bash shell 窗口，执行命令并在 term 信号后保留，我们在Stack Overflow上找到一个类似的问题： https://stackoverflow.com/questions/37774951/","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"重复视频图片整理     ","slug":"重复视频图片整理","date":"2021-10-20T12:42:38.000Z","updated":"2022-05-23T15:37:32.562Z","comments":true,"path":"2021/10/20/cl3sojxgp00455cbh8fkqe7mg/","link":"","permalink":"https://muyangit.github.io/2021/10/20/cl3sojxgp00455cbh8fkqe7mg/","excerpt":"","text":"用 Python 实现哈希算法检测重复图片 水之心关注 0.5142018.11.25 14:25:45字数 1,261阅读 3,363 在 Python 中导入 hashlib 模块，调用函数就可以生成某一个字符串或者文件的哈希值。这个算法对于未被篡改的上传文件非常有效，如果输入数据有细微变化，加密哈希算法都会导致雪崩效应，从而造成新文件的哈希值完全不同于原始文件哈希值。 1import hashlib 某些情况下，我们需要检测图片之间的相似性，进行我们需要的处理：删除同一张图片、标记盗版等。 如何判断是同一张图片呢？最简单的方法是使用加密哈希（例如 MD5, SHA-1）判断。但是局限性非常大。例如一个 txt 文档，其 MD5 值是根据这个 txt 的二进制数据计算的，如果是这个 txt 文档的完全复制版，那他们的 MD5 值是完全相同的。但是，一旦改变副本的内容，哪怕只是副本的缩进格式，其 MD5 也会天差地别。比如，下面的两个字符串只是一个 . 符号的差别，MD5 却变化很大： 1234txt = b&#x27;The quick brown fox jumps over the lazy dog&#x27;print(txt, hashlib.md5(txt).hexdigest())print(txt+b&#x27;.&#x27;, hashlib.md5(txt+b&#x27;.&#x27;).hexdigest()) 12b&#x27;The quick brown fox jumps over the lazy dog&#x27; 9e107d9d372bb6826bd81d3542a419d6b&#x27;The quick brown fox jumps over the lazy dog.&#x27; e4d909c290d0fb1ca068ffaddf22cbd0 因此加密哈希只能用于判断两个完全一致、未经修改的文件，如果是一张经过调色或者缩放的图片，根本无法判断其与另一张图片是否为同一张图片。那么如何判断一张被PS过的图片是否与另一张图片本质上相同呢？比较简单、易用的解决方案是采用感知哈希算法（Perceptual Hash Algorithm)。 感知哈希算法是一类算法的总称，包括 aHash、pHash、dHash。顾名思义，感知哈希不是以严格的方式计算 Hash 值，而是以更加相对的方式计算哈希值，因为“相似”与否，就是一种相对的判定。[1] aHash：平均值哈希。速度比较快，但是常常不太精确。 pHash：余弦感知哈希。精确度比较高，但是速度方面较差一些。 dHash：差异值哈希。Amazing！精确度较高，且速度也非常快。 我们先看看一张图片： 1234567import cv2from IPython.display import Imagefrom matplotlib import pyplot as plt%matplotlib inlineimg_name = &#x27;E:/Data/URLimg/猫/喜马拉雅猫/27.jpg&#x27;Image(img_name) https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/202110200802975.png https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/image-20211108171149008.png output_6_0.jpeg 下面我们主要研究以图搜图，它最核心的东西就是怎么让电脑识别图片。为了了解以图搜图，我们先看看哈希感知算法基本原理： 把图片转成一个可识别的字符串，这个字符串也叫哈希值 和其他图片匹配字符串，通过哈希值计算两张图片的汉明距离（Hamming Distance），通过汉明距离的大小，判断两张图片的相似程度。 ahash均值哈希算法， 模糊化处理：使用 Opencv3 直接以 Gray 格式读取图片，然后将其缩小至 ![8 \\times 8](https://math.jianshu.com/math?formula=8 \\times 8) 大小以减少计算量。 计算均值得到这个平均值之后，再和每个像素对比。像素值大于平均值的标记成 ，小于或等于平均值的标记成 。组成 个数字的字符串(看起来也是一串二进制的)。 12345678910111213def aHash(image_path, hash_size=8): &#x27;&#x27;&#x27; get image ahash string &#x27;&#x27;&#x27; img = plt.imread(image_path) # 转换为灰度图 gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) resize_img = cv2.resize(gray_img, (hash_size, hash_size)) # avg 和每个像素比较 img_ = resize_img &gt; resize_img.mean() # 二值化 img_bi = &#x27;&#x27;.join(img_.astype(&#x27;B&#x27;).flatten().astype(&#x27;U&#x27;).tolist()) #切割，每4个字符一组，转成16进制字符 return &#x27;&#x27;.join(map(lambda x:&#x27;%x&#x27; % int(img_bi[x:x+4],2), range(0,64,4))) 1print(&#x27;图片的 aHash:&#x27;, aHash(img_name)) 1图片的 aHash: bdc1c041767e7ca8 dHash缩放图片如果我们要计算上图的 dHash 值，第一步是把它缩放到足够小。为什么需要缩放呢？因为原图的分辨率一般都非常高。一张 ![200 \\times 200](https://math.jianshu.com/math?formula=200 \\times 200) 的图片，就有整整 万个像素点，每一个像素点都保存着一个 RGB 值， 万个 RGB，是相当庞大的信息量，非常多的细节需要处理。因此，我们需要把图片缩放到非常小，隐藏它的细节部分，只见森林，不见树木。建议缩放为 ，虽然可以缩放为任意大小，但是这个值是相对合理的。而且宽度为 ，有利于我们转换为 hash 值，往下面看，你就明白了。 12345678img = plt.imread(img_name) # 转换为灰度图hash_size = 8gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)resize_img = cv2.resize(gray_img, (hash_size+1, hash_size))# 缩放为 8 * 9 分辨率后plt.imshow(resize_img)plt.show() output_11_0.png 具体的流程和 aHash 差不多，只需要将均值改为水平梯度计算即可。该算法计算相邻像素之间的亮度差异并确定相对梯度。感知哈希算法从文件内容的各种特征中获得一个能够灵活分辨不同文件微小区别的多媒体文件指纹。 12345678910111213141516def dhash(image_path, hash_size=8): &#x27;&#x27;&#x27; get image dhash string &#x27;&#x27;&#x27; img = plt.imread(image_path) # 转换为灰度图 gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) resize_img = cv2.resize(gray_img, (hash_size+1, hash_size)) # 计算水平梯度 differences = [] for t in range(resize_img.shape[1]-1): differences.append(resize_img[:, t] &gt; resize_img[:, t+1]) img_ = np.stack(differences).T # 二值化 img_bi = &#x27;&#x27;.join(img_.astype(&#x27;B&#x27;).flatten().astype(&#x27;U&#x27;).tolist()) # 切割，每4个字符一组，转成16进制字符 return &#x27;&#x27;.join(map(lambda x: &#x27;%x&#x27; % int(img_bi[x:x+4], 2), range(0, 64, 4))) 为了方便，我将其封装为一个类： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071class XHash: &#x27;&#x27;&#x27; 感知 Hash 算法 &#x27;&#x27;&#x27; def __init__(self, image_path, hash_type): self.image_path = image_path self.hash_size = 8 self.type = hash_type if self.type == &#x27;aHash&#x27;: self.hash = self.__aHash() elif self.type == &#x27;dHash&#x27;: self.hash = self.__dHash() def __get_gray(self, img): &#x27;&#x27;&#x27; 读取 RGB 图片 并转换为灰度图 &#x27;&#x27;&#x27; # 由于 cv2.imread 无法识别中文路径，所以使用 plt.imread return cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) # 转换为灰度图 def __difference(self): &#x27;&#x27;&#x27; 比较左右像素的差异 &#x27;&#x27;&#x27; img = plt.imread(self.image_path) resize_img = cv2.resize(img, (self.hash_size+1, self.hash_size)) gray = self.__get_gray(resize_img) differences = [] for t in range(resize_img.shape[1]-1): differences.append(gray[:, t] &gt; gray[:, t+1]) return np.stack(differences).T def __average(self): &#x27;&#x27;&#x27; 与像素均值进行比较 &#x27;&#x27;&#x27; img = plt.imread(self.image_path) resize_img = cv2.resize(img, (self.hash_size, self.hash_size)) gray = self.__get_gray(resize_img) return gray &gt; gray.mean() def __binarization(self, hash_image): &#x27;&#x27;&#x27; 二值化 &#x27;&#x27;&#x27; return &#x27;&#x27;.join(hash_image.astype(&#x27;B&#x27;).flatten().astype(&#x27;U&#x27;).tolist()) def __seg(self, hash_image): img_bi = self.__binarization(hash_image) return &#x27;&#x27;.join(map(lambda x: &#x27;%x&#x27; % int(img_bi[x:x+4], 2), range(0, 64, 4))) def __aHash(self): return self.__seg(self.__average()) def __dHash(self): return self.__seg(self.__difference())class XHash_Haming: &#x27;&#x27;&#x27; 计算两张图片的相似度 &#x27;&#x27;&#x27; def __init__(self, image_path1, image_path2, hash_type): self.hash_img1 = XHash(image_path1, hash_type).hash self.hash_img2 = XHash(image_path2, hash_type).hash def hash_haming(self): &#x27;&#x27;&#x27; 计算两张通过哈希感知算法编码的图片的汉明距离 &#x27;&#x27;&#x27; return np.array([self.hash_img1[x] != self.hash_img2[x] for x in range(16)], dtype=&#x27;B&#x27;).sum() 12345import osdir_name = &#x27;E:/Data/URLimg/猫/test/&#x27;print(os.listdir(dir_name)) 1[&#x27;16 - 副本.jpg&#x27;, &#x27;6 - 副本.jpg&#x27;, &#x27;6.jpg&#x27;, &#x27;8 - 副本 - 副本.jpg&#x27;, &#x27;8 - 副本.jpg&#x27;] 123import syssys.path.append(&#x27;E:/zlab&#x27;)from dhash import XHash, XHash_Haming 我们这里有两个副本，我们看看它们的 dHash： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Pairs: &#x27;&#x27;&#x27; 使用 dHash 实现哈希感知算法 &#x27;&#x27;&#x27; def __init__(self, root): if root == None: root = os.getcwd() self.names = &#123; j: os.path.join(root, name) for j, name in enumerate(os.listdir(root)) &#125; self.__hashs = np.array([ XHash(self.names[name], &#x27;dHash&#x27;).hash for name in self.names.keys() ]) self.__cal_haming_distance(self.__hashs) def __cal_haming_distance(self, hashs): &#x27;&#x27;&#x27; 计算两两之间的距离 &#x27;&#x27;&#x27; j = 0 pairs = &#123;&#125; while j &lt; hashs.shape[0]: for i in range(j + 1, hashs.shape[0]): # 图片对，过滤到已经计算过的 pairs pairs[j] = pairs.get(j, []) + \\ [np.array(hashs[i] != hashs[j]).sum()] continue j += 1 self.pairs = pairs def get_names(self): n = len(self.pairs) temp = &#123;&#125; while n &gt; 0: n -= 1 for i, d in enumerate(self.pairs[n]): if d == 0: temp[n] = temp.get(n, []) + [i + n + 1] continue return temp def del_repeat(self): P = self.get_names() for j in P: for i in P[j]: try: os.remove(self.names[i]) except FileNotFoundError: print(&#x27;已经移除，无需再次移除！&#x27;) print(&#x27;删除完成！&#x27;)``````pythonpairs = Pairs(dir_name)pairs.pairs 1&#123;0: [15, 15, 13, 13], 1: [0, 16, 16], 2: [16, 16], 3: [0]&#125; 我们可以通过汉明距离判定：0 与 1、3 与 4 号图片分别是同一张图片，仅仅保留一张，删除重复图片： 1os.listdir(dir_name) 1[&#x27;16 - 副本.jpg&#x27;, &#x27;6 - 副本.jpg&#x27;, &#x27;6.jpg&#x27;, &#x27;8 - 副本 - 副本.jpg&#x27;, &#x27;8 - 副本.jpg&#x27;] 12pairs.del_repeat()os.listdir(dir_name) 1[&#x27;16 - 副本.jpg&#x27;, &#x27;6 - 副本.jpg&#x27;, &#x27;8 - 副本 - 副本.jpg&#x27;] 自动把重复的图片删除了！ 1pairs.names 123&#123;0: &#x27;E:/Data/URLimg/猫/test/16 - 副本.jpg&#x27;, 1: &#x27;E:/Data/URLimg/猫/test/6 - 副本.jpg&#x27;, 3: &#x27;E:/Data/URLimg/猫/test/8 - 副本 - 副本.jpg&#x27;&#125; 该代码被我放在 GitHub，在不断的改进中。 Erum: https://www.jianshu.com/p/193f0089b7a2 ↩ python 查找重复文件，以及查找重复视频的一些思路 watfe 2020-02-24 19:15:15 996 收藏 2 分类专栏： Python 版权 Python专栏收录该内容 30 篇文章0 订阅 订阅专栏 查找重复文件（文件大小一致、md5相同）思路很简单： 找出指定目录及子目录下所有文件 找出大小重复的 进一步确认md5也重复的，则认为是重复文件 这里md5，为了加速计算，没有算文件的完整md5。（之前看到过这种算法，忘了在哪里看来的，大概是用于上传文件时，快速判断是否与已有文件对比验证用的）将文件分成256块，每块取前8个字节计算md5，这样能快速计算出一个大概可以用于判断文件唯一性的md5。 完整代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#!/usr/bin/env python3# -*- coding: utf-8 -*-import osimport reimport timeimport hashlibdef main(): path = &#x27;d:/&#x27; fp_arr = file_search(path,repat=r&#x27;.*\\.mp4&#x27;) # 查找文件(文件类型自行填写，不写查所有文件类型) du_arr = find_duplicate_file(fp_arr) # 检查重复# [fp_arr.remove(l) for j in [i[1:] for i in du_arr] for l in j] # 去重，重复文件只保留第1个即可def file_search(path=&#x27;.&#x27;,repat = r&#x27;.*&#x27;): &quot;&quot;&quot; 文件查找： 文件夹及子文件夹下，所有匹配文件，返回list文件列表，绝对路径形式 Args: path: 文件路径（默认当前路径） repat: 文件名正则匹配，不区分大小写（默认匹配所有文件） return: 文件列表（绝对路径） Returns: files_match: 文件列表 &quot;&quot;&quot; # 获取文件夹，及子文件夹下所有文件，并转为绝对路径 folders,files = [],[] st = time.time() repat = &#x27;^&#x27;+repat+&#x27;$&#x27; # walk结果形式 [(path:文件夹,[dirlist:该文件夹下的文件夹],[filelist:该文件夹下的文件]),(子文件夹1,[子子文件夹],[]),(子文件夹2,[],[])...] # 该遍历会走遍所有子文件夹，返回上述形式的结果信息。 for record in os.walk(path): fop = record[0] folders.append(fop) for fip in record[2]: fip = os.path.abspath(os.path.join(fop,fip)).replace(&#x27;\\\\&#x27;,&#x27;/&#x27;) files.append(fip) # 逐个检查是否符合要求 files_match = [] for file in files: a = re.findall(repat,file.lower()) if a: files_match+=a print(&#x27;找到&#123;0&#125;个文件&#x27;.format(len(files_match))) # 返回满足要求的 return files_matchdef fastmd5(file_path,split_piece=256,get_front_bytes=8): &quot;&quot;&quot; 快速计算一个用于区分文件的md5（非全文件计算，是将文件分成s段后，取每段前d字节，合并后计算md5，以加快计算速度） Args: file_path: 文件路径 split_piece: 分割块数 get_front_bytes: 每块取前多少字节 &quot;&quot;&quot; size = os.path.getsize(file_path) # 取文件大小 block = size//split_piece # 每块大小 h = hashlib.md5() # 计算md5 if size &lt; split_piece*get_front_bytes: # 小于能分割提取大小的直接计算整个文件md5 with open(file_path, &#x27;rb&#x27;) as f: h.update(f.read()) else: # 否则分割计算 with open(file_path, &#x27;rb&#x27;) as f: index = 0 for i in range(split_piece): f.seek(index) h.update(f.read(get_front_bytes)) index+=block return h.hexdigest()def find_duplicate_file(fp_arr): &quot;&quot;&quot; 查找重复文件 Args: fp_arr:文件列表 &quot;&quot;&quot; # 将文件大小和路径整理到字典中 d = &#123;&#125; # 临时词典 &#123;文件大小1:[文件路径1,文件路径2,……], 文件大小2:[文件路径1,文件路径2,……], ……&#125; for fp in fp_arr: size = os.path.getsize(fp) d[size]=d.get(size,[])+[fp] # 列出相同大小的文件列表 l = [] # 临时列表 [[文件路径1,文件路径2,……], [文件路径1,文件路径2,……], ……] for k in d: if len(d[k])&gt;1: l.append(d[k]) # 核对大小一致的文件，md5是否相同 ll = [] # 临时列表 [[文件路径1,文件路径2,……], [文件路径1,文件路径2,……], ……] for f_arr in l: d = &#123;&#125; # 临时词典 &#123;文件大小1:[文件路径1,文件路径2,……], 文件大小2:[文件路径1,文件路径2,……], ……&#125; for f in f_arr: fmd5 = fastmd5(f) d[fmd5]=d.get(fmd5,[])+[f] # 找到相同md5的文件 for k in d: # 相同大小的文件，核对一下md5是否一致 if len(d[k])&gt;1: ll.append(d[k]) print(&#x27;查重完毕，发现&#123;0&#125;处重复&#x27;.format(len(ll))) for i in ll: print(i) return llif __name__ == &#x27;__main__&#x27;: main()123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113 视频查重（部分完成）思路：对视频进行抽帧，然后比对是否有关键帧的图片指纹是否一致 这里写一下研究过程，实现代码： 视频抽帧 图像指纹生成 找出包含同样图像指纹的视频 这个过程试过一些方案也都记录一下：曾经考虑subprocess.Popen()执行ffmpeg抽帧，但是太慢了 12345678910111213141516171819202122232425262728293031323334353637383940def external_cmd(cmd, msg_in=&#x27;&#x27;): # 将subprocess.call(cmd)包装了一下，这样就能获取到执行cmd命令时，产生的输出内容了。 try: proc = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, ) stdout_value, stderr_value = proc.communicate(msg_in) return stdout_value, stderr_value except ValueError as err: # log(&quot;ValueError: %s&quot; % err) return None, None except IOError as err: # log(&quot;IOError: %s&quot; % err) return None, None&#x27;&#x27;&#x27;方法一&#x27;&#x27;&#x27;# 1秒抽0.05帧，也就是20s抽1帧，1420s长度视频抽73镇，耗时94sexternal_cmd(&#x27;ffmpeg -i &quot;&#123;0&#125;&quot; -r 0.05 -q:v 2 -f image2 ./%08d.000000.jpg&#x27;.format(video_path))&#x27;&#x27;&#x27;方法二&#x27;&#x27;&#x27;# 20s抽1帧，1420s长度视频抽70帧，耗时18stimeF = 20for i in range(1,video_duration//timeF): h,m,s = (i*timeF)//3600, ((i*timeF)%3600)//60, (i*timeF)%60 external_cmd(&#x27;ffmpeg -i &quot;&#123;0&#125;&quot; -ss &#123;1:0=2&#125;:&#123;2:0=2&#125;:&#123;3:0=2&#125; -vframes 1 &#123;4&#125;.jpg&#x27;.format(video_path,h,m,s,i)) # 抽取指定时间点起的第一帧&#x27;&#x27;&#x27;方法三&#x27;&#x27;&#x27;# 20s抽1帧，1420s长度视频抽70帧，并压缩到100*100耗时17s（对图像的压缩处理基本不影响速度，时间开销的大头也不是出在文件存储上，而是ffmpeg定位时间为位置然后抽帧本身就慢）timeF = 20for i in range(1,video_duration//timeF): h,m,s = (i*timeF)//3600, ((i*timeF)%3600)//60, (i*timeF)%60 hw = &#x27;&#123;0&#125;x&#123;0&#125;&#x27;.format(100) external_cmd(&#x27;ffmpeg -i &quot;&#123;0&#125;&quot; -ss &#123;1:0=2&#125;:&#123;2:0=2&#125;:&#123;3:0=2&#125; -vframes 1 -s &#123;5&#125; -f image2 &#123;4&#125;.jpeg&#x27;.format(video_path,h,m,s,i,hw))12345678910111213141516171819202122232425262728293031323334353637383940 最后选定的还是cv2抽帧 1234567891011121314151617181920212223242526272829303132333435这个是一开始想的，将抽到的帧保存为单张图像，发现还是慢。&#x27;&#x27;&#x27;# 视频抽帧测试，这种抽帧方式太慢了，1000帧大概45秒长度视频，花费5秒左右videopath = &#x27;01.mp4&#x27;vc = cv2.cv2.VideoCapture(videopath)if vc.isOpened(): # 是否正常打开 rval,frame = vc.read()else: rval = FalsetimeF =1000 # 抽帧频率c = 1while rval: rval,frame = vc.read() if(c%timeF==0): cv2.imwrite(&#x27;&#123;0:0=3&#125;.jpg&#x27;.format(c),frame) cv2.waitKey(1) c+=1vc.release()&#x27;&#x27;&#x27;1234567891011121314151617181920然后换成了这种，不存图像了，直接将抽到图像计算成dhash保存，总算速度上来了。# 视频，取指定时间点图片，转指定宽高后，计算图像指纹v = &#x27;c:/users/kindle/desktop/test/01.mp4&#x27;cap = cv2.VideoCapture(v) #打开视频文件n_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT)) #视频的帧数fps = cap.get(cv2.CAP_PROP_FPS) #视频的帧率dur = n_frames / fps #视频的时间cap.set(cv2.CAP_PROP_POS_MSEC, (5*1000)) # 跳到指定时间点，单位毫秒success, image_np = cap.read() # 返回该时间点的，图像(numpy数组)，及读取是否成功img = Image.fromarray(cv2.cvtColor(image_np,cv2.COLOR_BGR2RGB)) # 转成图像格式imgrsz = img.resize((100,100)) # 缩放到指定宽高（后来发现是否缩放基本不影响）# imgrsz.save(&#x27;5.jpg&#x27;) # 保存图像# imgrsz.show() # 显示图像12345678910111213 计算图像指纹，直接用了现成的模块，imagehash里的dhash 12h5 = str(imagehash.dhash(imgrsz)) # 生成图像指纹1 在上述基础上，视频转换为图像指纹组的函数基本如下 12345678910111213141516171819202122232425def video2imageprint(filepath): &quot;&quot;&quot; 返回整个视频的图片指纹列表 从3秒开始，每60秒抽帧，计算一张图像指纹 &quot;&quot;&quot; cap = cv2.VideoCapture(filepath) ##打开视频文件 n_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT)) #视频的帧数 fps = cap.get(cv2.CAP_PROP_FPS) #视频的帧率 dur = n_frames / fps *1000 #视频大致总长度 cap_set = 3000 hash_int_arr = [] while cap_set&lt;dur-3000: # 从3秒开始，每60秒抽帧，计算图像指纹。总长度-3s，是因为有的时候计算出来的长度不准。 cap.set(cv2.CAP_PROP_POS_MSEC, cap_set) # 返回该时间点的，图像(numpy数组)，及读取是否成功 success, image_np = cap.read() if success: img = Image.fromarray(cv2.cvtColor(image_np,cv2.COLOR_BGR2RGB)) # 转成cv图像格式 h = str(imagehash.dhash(img)) hash_arr.append(h) # 图像指纹 else: print(&#x27;fail&#x27;,cap_set/1000,filepath) cap_set+=1000*60 cap.release() # 释放视频 return hash_arr12345678910111213141516171819202122232425 然后将建立字典，key为图像指纹，value为地址列表。 123456789101112# shelve用来做python的字典型数据库，并将其存储在磁盘上。# shelve的key要求必须是字符串，value则可以是任意合法的python数据类型db = shelve.open(&#x27;videocheck.db&#x27;)# 写入数据库for h in hash_arr: fp_arr = db.get(h, []) # 具有相同指纹的对应的视频路径列表 if fp_arr==[]: db[h]=[filepath] elif filepath not in fp_arr: db[h]=db[h]+[filepath] db.close()1234567891011 后面就是检查哪个指纹，对应的地址列表中，大于1个文件。则说明有多个视频包含该指纹。为了验证指纹相同的图像是否一致，还写了一个合并图像输出的函数。这个函数写成了这样，是考虑以后可以用作给视频生成多图合并的缩略图玩。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465def imgjoin(imgs,tags=[],width_height=(0,0),column_row=(0,0),blank=(0,0,0,0,0,0)): &#x27;&#x27;&#x27; 多张图片，合并成一张视频抽帧缩略图合并大图那种。 可以每张图片上方加注释，也可以文件顶部只加一行注释。 每张图片宽高，行列间距，四外边距都可以自定义 args: imgs: pil图片数组 tags: 如果标签数和图片数相同，每张图片上方加文字。如果只有一个标签，则只在图片最顶部加1条文字。 width_height: 合并后图片中，每张缩略图宽高，如未指定以第一张图标为基准 column_row:横排和竖排数量 blank_cr:空白分布(列间,行间,左右,上下,标题,标签) return: 返回合并好的图片 &#x27;&#x27;&#x27; from PIL import Image,ImageDraw,ImageFont # 检查是否符合规则 if len(imgs)&gt;100: print(&#x27;imgs当前上限100张图合并&#x27;) return &#x27;&#x27; elif imgs==[]: print(&#x27;imgs中没有包含图片，请检查&#x27;) return &#x27;&#x27; elif 1&lt;len(tags)&lt;len(imgs): print(&#x27;tags文字数组和图片对不上，请只输入1条或和图片一样多&#x27;) return &#x27;&#x27; else: pass # 每行每列个数 if column_row==(0,0): cr = 1 while len(imgs)&gt;cr**2: cr+=1 column_row=(cr,cr) c,r = column_row # 调整每张图片到指定宽高，如未指定，以第一张图片宽高为基准: if width_height==(0,0): width_height = imgs[0].size for i,m in enumerate(imgs): if m.size!=width_height: imgs[i] = m.resize(width_height) # 缩放到指定宽高 w,h = width_height # 空白分布 bw,bh,blr,btb,btitle,btag = blank # (列间,行间,左右,上下,标题,标签) if blank==(0,0,0,0,0,0): if len(tags)==1: btitle = h # 生成输出图像尺寸 J_width = w*c + bw*(c-1) + blr*2 # 总计图像宽度+列间距+左右边距 J_height= h*r + bh*(r-1) + btb*2 + btitle + btag*r # 总计图像高度+行间距+顶底边距+标题高度+标签高度 J_img = Image.new(&#x27;RGB&#x27;, (J_width,J_height),(255,255,255)) draw=ImageDraw.Draw(J_img) newfont=ImageFont.truetype(&#x27;simkai.ttf&#x27;,12) # 合并图像 for i,m in enumerate(imgs): if i==0: # 第一张图 x,y=blr,btb+btitle+btag # 第一张图左上角位置 elif i%c==0: # 新的一行 x,y=blr,y+bh+btag+h else: x,y=x+bw+w,y J_img.paste(m, (x, y, x+w, y+h)) # 添加文字 if len(tags)&gt;1: draw.text((x,y-btag),tags[i],(0,0,0),font=newfont) return J_img12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 到这里最开始的研究就完成了，最开始的实现思路，就是上面这样。 ================ 后来发现图像指纹是有可能不是完全一致的，而是相似的，还要考虑到相似的图像指纹。 imagehash.dhash算出来的图像指纹，本身的type类型不是字符串。为了保存，转为字符串后，后续计算两个字符串的相似度，哪怕是很简单的字符串每一位是否与另一字符串每一位相等，数以10w个图像指纹，互相计算都要花费很长时间。计算两个指纹的相似度，试了几种方法效率，最后发现bin最快，这个方法还是从dhash的官网看来的。2020-5-13 看到还有一种写法是num = 1 - (aHash - bHash)/len(aHash.hash)**2直接imagehash计算，速度和bin的差不多，推荐使用这个。 12345678910111213141516&#x27;&#x27;&#x27;关于dhash相似度比较方法研究，得到bin的方法计算最快，我的家用电脑10w次大概0.057秒。&#x27;&#x27;&#x27;import timea = &#x27;a1a8739f324eb01c&#x27;b = &#x27;a1a8749f323eb01c&#x27;ai = int(str(a),16)bi = int(str(b),16)st = time.time()# 10w次执行速度，bin方式最快for i in range(100000): # num = [a[j] is b[j] for j in range(16)].count(True)/16 # 0.2097s # num = [a[j] == b[j] for j in range(16)].count(True)/16 # 0.2082s # num = difflib.SequenceMatcher(None, a,b).ratio() # 4.2250s num = 1-bin(ai^bi).count(&quot;1&quot;)/64 # 0.0568set = time.time()print(num,et-st)123456789101112131415 接下来的考虑思路就是 计算得到相似图像指纹 找到相似指纹对应的视频 检查视频是否有连续相同地方 列出相似视频对比缩略图 1秒比对200w个感觉是挺快但是1000个，长度为1小时的视频，就需要30分钟比对完。这个计算量感觉太大，即使写出来，为提高效率可能需要其他算法之类的优化。 关于效率处理这里，并没有完全想好，也没有时间测试，暂时就搁置了。因为是个人闲暇研究，扔了可能后续就忘了，捡不起来了。所以这里把之前的研究过程记录一下，希望其他有用到的人能得到一些参考。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" 禁止软件联网，禁止文件夹访问网络    ","slug":"禁止软件联网，禁止文件夹访问网络","date":"2021-10-20T11:52:37.000Z","updated":"2022-05-23T15:37:32.948Z","comments":true,"path":"2021/10/20/cl3sojxgh003u5cbh5bebcm4h/","link":"","permalink":"https://muyangit.github.io/2021/10/20/cl3sojxgh003u5cbh5bebcm4h/","excerpt":"","text":"windows上禁止某个软件联网打开控制面板(命令行输入”control”)，按照下图操作 命令实现禁止软件联网，禁止文件夹访问网络规则：同时禁止入站与出站 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@echo offrem 关闭自动输出setlocal ENABLEDELAYEDEXPANSIONmode con: cols=65 lines=25color 0arem 批处理获取管理员权限:------------------------------------- %1 mshta vbscript:createobject(&quot;shell.application&quot;).shellexecute(&quot;&quot;&quot;%~0&quot;&quot;&quot;,&quot;::&quot;,,&quot;runas&quot;,1)(window.close)&amp;&amp;exit /bCD /D &quot;%~dp0&quot;:------------------------------------- :beginrem 接收输入:直接输入文件夹名字set name=IObitUnlocker_30627:直接输入文件夹路径set Fpath=D:\\MyBackup\\综合备份\\便携版·软件\\神器\\进程管理\\进程终结IObit Unlocker\\IObitUnlocker_30627:set /p name=请输入防火墙策略名称(使用软件名即可)::set /p Fpath=请输入软件安装路径(C:\\Program Files\\WinRAR):rem 输出得到的输入信息echo 您输入的防火墙策略名称是：%name%echo 您输入的软件安装路径是：%Fpath%echo &quot;确认请按任意键否则请按Ctrl+C取消&quot;pausesetlocal enabledelayedexpansionset /a n=0for /r &quot;%Fpath%&quot; %%i in (*.exe) do ( set /a n+=1 echo &quot;!n!_%name%&quot;,&quot;%%i&quot; netsh advfirewall firewall del rule name=&quot;!n!_%name%&quot;&gt;nul 2&gt;nul netsh advfirewall firewall add rule name=&quot;!n!_%name%&quot; program=&quot;%%i&quot; action=block dir=out&gt;null echo 阻止!n!_%name%程序出站规则已添加成功)rem pause&gt;nullecho.rem 从begin标签出，再次运行goto begin","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"  Anaconda + VSCode 配置python环境   ","slug":"Anaconda-VSCode-配置python环境","date":"2021-10-20T00:01:39.000Z","updated":"2022-05-24T01:57:18.530Z","comments":true,"path":"2021/10/20/cl3sojxeb00085cbh2v131zt8/","link":"","permalink":"https://muyangit.github.io/2021/10/20/cl3sojxeb00085cbh2v131zt8/","excerpt":"","text":"Anaconda + VSCode 配置python环境Anacond下载 下载地址： https://www.anaconda.com/download/选择适合的系统环境和版本。本人是Windows10系统64位机器，故下载python3.7 64-Bit。下载完成打开安装包，进行安装（其实接下来除了选择安装路径，其他的直接默认点击下一步就可以了） Install for: Just me || All Users，如若电脑有多个 Users ，需要考虑这个问题。我们电脑一般只会有一个 User，只自己使用。如果电脑有多个用户，选择All Users，笔者此处直接 All User，继续点击 Next 。 12选择路径，继续安装，不勾选第一项--&gt; 方便安装官网的python https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/ image-20211110201434027.png https://raw.githubusercontent.com/MuyanGit/pic_url/master/ 20220523225729.png 此处勾选设置环境变量，否则需要自己设置（也很简单） https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/202110200802975.png 验证是否安装成功：win+r输入cmd，打开命令管理器，输入conda –version输出Anaconda版本，则表示安装成功！ Anaconda更换国内源 Anaconda使用的源在国外，下载各种包的速度比较慢，所以我们更改Anaconda的源Anaconda更换国内源方法的文章地址在此处，请点击查看：https://blog.csdn.net/weixin_42133216/article/details/106476875 Anaconda新建环境 Anaconda可以看作是一个虚拟机，我们的python环境使用的不是本机，而是Anaconda中的环境。比如笔者的Windows的电脑上并没有安装python解释器，但是在写python程序的时候选择Anaconda环境，一样可以随心所欲的使用python。 打开安装好的Anaconda Navigator点击Environments最初只会有base(root)这一个环境，我们可以自己创建新环境，此处的machine就是笔者自己创建的 创建方法也很简单：1.点击Create2.输入环境名称和Python版本点击创建即可这样在后面使用VSCode的时候，只要将环境设置为Anaconda中自己创建的环境就可以了。 Win10 vscode配置环境系列：Anaconda如果使用此方法，则电脑可以不用安装python，直接使用anaconda自带的python，在cmd即可直接进入anaconda的python环境，而不用每次都启动anaconda。 2.配置环境变量这5个路径都要全部添加到环境变量里面，否则conda和python命令可能会无法使用。具体的路径根据自己电脑的安装路径修改。 ```D:\\MySoftware\\DEV\\Dev_env\\Anaconda3;D:\\MySoftware\\DEV\\Dev_env\\Anaconda3\\ScriptsD:\\MySoftware\\DEV\\Dev_env\\Anaconda3\\Library\\bin;D:\\MySoftware\\DEV\\Dev_env\\Anaconda3\\Library\\mingw-w64\\bin;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657- **添加完环境变量后要重启vscode**3.在vscode选择python环境-这里需要双击，然后点击工作区，然后选择Anaconda![image](https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/202110200804886.png)- 选择路径为annaconda的那个，大功告成- 在每次打开包含python配置的文件夹后，终端会自动打开anaconda安装VSCode**Anaconda在安装时，会自带VSCode，若已安装，则无需再次安装VSCode****下载地址： https://code.visualstudio.com/Download**![在这里插入图片描述](https://img-blog.csdnimg.cn/20200604174902276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEzMzIxNg==,size_16,color_FFFFFF,t_70)**下载完成，点击安装包进行安装**![在这里插入图片描述](https://img-blog.csdnimg.cn/20200604174750956.png)**安装步骤图示不再给出，直接勾选下一步，下一步即可**配置VSCode**安装完VSCode后，开始是纯英文的，如果有喜欢中文的朋友，可以下载插件，设置成中文****点击左边图标，在搜索框里面搜索Chinese**![在这里插入图片描述](https://img-blog.csdnimg.cn/20200604183429692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEzMzIxNg==,size_16,color_FFFFFF,t_70)**选择中文简体，点击安装即可，安装后重启一遍VSCode**![在这里插入图片描述](https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/202110200802358.png)**然后输入Python，搜索Python插件，点击安装**![在这里插入图片描述](https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/202110200802115.png)然后就是选择Python环境，可以看到笔者的Python环境是Anaconda中的machine，也就是自己创建的环境** 这里需要双击，然后点击工作区，然后选择Anaconda![加粗样式](https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/202110200802172.png)**点击左下角便可以更改Python环境**![在这里插入图片描述](https://img-blog.csdnimg.cn/2020060418391331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEzMzIxNg==,size_16,color_FFFFFF,t_70)**然后就可以使用了VSCode写Python代码了**![在这里插入图片描述](https://raw.githubusercontent.com/MuyanGit/pic_url/master/img/202110200802319.png)# Anaconda国内源配置[![海上添翼](https://www.cpci.dev/content/images/2021/06/suse-2.png)](https://www.cpci.dev/author/hai/)[清华源页面](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/)；也包含了`MiniConda`的源安装完Anaconda之后，打开`Anaconda Prompt（anaconda3）`；输入```cmdconda config --set show_channel_urls yes 在安装完成后，.condarc文件还没生成，所以使用一条命令生成一下，其位置在c:\\Users\\&lt;用户名&gt;\\.condarc，对于新版的win10可能显示的是c:\\用户\\&lt;用户名&gt;\\.condarc 使用文本编辑器打开这个文件，覆盖原有的全部内容 问题-可以解决2·Anaconda建立新的环境，出现CondaHTTPError: HTTP 000 CONNECTION FAILED for url …… 解决过程12345678910111213show_channel_urls: truessl_verify: falsechannels: - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/ - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/ - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ 也可以试一下： 123456789101112131415161718channels: - defaultsshow_channel_urls: truessl_verify: falsechannel_alias: https://mirrors.tuna.tsinghua.edu.cn/anacondadefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 123456channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ - defaultsshow_channel_urls: true $\\textcolor{Red}{ ssl_verify: true –&gt; 应该关闭 }$ $\\textcolor{Red}{ https:–&gt; http –&gt; 应该关闭 }$ $\\textcolor{Red}{ default_channels–&gt; 删除–&gt; 应该关闭 }$ 12345678910111213141516channels: - defaultsssl_verify: true --&gt; 应该关闭show_channel_urls: truedefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud123456789101112131415 保存后执行一条命令，清除一下缓存 1conda clean -i 如果已经打开了Anaconda Navigator，别忘了重启生效 测试生效 12345:: 查看全部配置信息conda config --show:: 查看源的配置信息conda config --show-sources1234 软件配置如果选择Miniconda，则： 熟手可以完全自定义安装每个所用的包； 磁盘空间紧张； 追求效率，不想浪费在初始化上；或喜欢纯净的开发环境 配置PyCharm如果环境变量配置正确了，那么在PyCharm里面选择Conda环境的时候，会自动识别；如果没有自动识别，可以手动添加一下； 现有环境 解释器：D:\\anaconda\\python3.exe Conda可执行文件：D:\\anaconda3\\Scripts\\conda.exe 可用于所有项目：勾选 对于项目的根目录下的.idea/venv可以删除了 这个时候，对于当前的项目就出问题了，因为原先的解释器失效了；右下角配置环境的按钮挪到了右上角，点击下拉菜单中的“编辑”，（“运行”按钮旁边）；选择“Python解释器”的下拉菜单，选择带有Anaconda图标的那个，应用；一切恢复如常。 文件 -&gt; 清除缓存/重启 -&gt; 作废并重启 PIP 源 –&gt; Python验证版本：Python 3.8.5 在当前用户目录下（不是文档目录下）c:\\用户\\&lt;用户名&gt;\\下新建pip目录，然后创建一个pip.ini文件，输入一下内容即可使用阿里源 12345[global]index-url = https://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com pip.ini路径如下C:\\Users\\HelloWorld\\pip\\pip.ini MoviePy的安装-新建conda环境，然后安装-下载与安装 Conda包管理 1234567:: 为指定环境安装某个包conda install -n TestPythonHello moviepy:: 激活某个环境activate TestPythonHelloconda install -c conda-forge moviepy MoviePy的安装- 新建conda环境，然后安装- 首先，安装moviepy基本包。与其他的库一样，直接采用 pip 的方式安装即可，pip方便快捷 1234567891011121314151617conda install moviepypip install moviepyconda remove -n python38Video --all删除python38Video文件夹conda env list#删除所有的下载的安装包及cacheconda clean -y --all conda create --name python38Video python=3.8activate python38Videoconda install moviepy 安装完后，python38Video中有moviepy可以看见moviepy/config_defaults.py文件 防止错误定期重建everything索引 第二步，安装依赖包ImageMagic ImageMagic是用于在视频中填入文本信息的工具，我认为还是很有用处的，需要单独下载exe程序安装。 下载地址为：https://imagemagick.org/script/download.php，windows系统页面拖到最下面可以找到。下载完毕后双击安装即可 ImageMagick 只有在你想要添加文字时需要用到。它可作为一个后端用在GIF上，但如果不安装ImageMagick，你也可以用MoviePy处理GIF。 必须勾选才会有ImageMagick_VERSION\\convert.exe”文件 一旦你安装了ImageMagick，它会被MoviePy自动检测到，除了Windows环境！ Windows用户在手动安装MoviePy之前，应在moviepy/config_defaults.py文件中指定ImageMagick binary的路径，并叫做convert。看起来应该像是这样： ImageMagic路径: 12IMAGEMAGICK_BINARY = &quot;C:\\\\Program Files\\\\ImageMagick_VERSION\\\\convert.exe&quot;IMAGEMAGICK_BINARY = &quot;D:\\\\MySoftware\\\\VideoCut\\\\ImageMagick-7.1.0-Q16-HDRI\\\\convert.exe&quot; 第三步，给选定环境中的moviepy 设置 ImageMagic路径 在上一步中安装了ImageMagic，但此时仍无法使用，因为Python不知道ImageMagic安装在哪里，需要在Python的库文件中找到moviepy/config_defaults.py， 并在最后一行加入IMAGEMAGICK_BINARY = &quot;C:\\\\Program Files\\\\ImageMagick_VERSION\\\\convert.exe&quot; （此处修改为你的安装路径） 至此，moviepy安装完毕！ eg: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&quot;&quot;&quot;Configuration of MoviePyThis file enables you to specify a configuration for MoviePy. Inparticular you can enter the path to the FFMPEG and ImageMagickbinaries.Defaults must be done BEFORE installing MoviePy: first make the changes,then install MoviePy with [sudo] python setup.py installNote that you can also change the path by setting environment variables.e.g.Linux/Mac: export FFMPEG_BINARY=path/to/ffmpegWindows: set FFMPEG_BINARY=path\\to\\ffmpegInstructions--------------FFMPEG_BINARY Normally you can leave this one to its default (&#x27;ffmpeg-imageio&#x27;) at which case image-io will download the right ffmpeg binary (at first use) and then always use that binary. The second option is &#x27;auto-detect&#x27;, in this case ffmpeg will be whatever binary is found on the computer generally &#x27;ffmpeg&#x27; (on linux) or &#x27;ffmpeg.exe&#x27; (on windows). Third option: If you want to use a binary at a special location on you disk, enter it like that: FFMPEG_BINARY = r&quot;path/to/ffmpeg&quot; # on linux FFMPEG_BINARY = r&quot;path\\to\\ffmpeg.exe&quot; # on windows Warning: the &#x27;r&#x27; before the path is important, especially on Windows.IMAGEMAGICK_BINARY For linux users, &#x27;convert&#x27; should be fine. For Windows users, you must specify the path to the ImageMagick &#x27;magick&#x27; binary. For instance: IMAGEMAGICK_BINARY = r&quot;C:\\Program Files\\ImageMagick-6.8.8-Q16\\magick.exe&quot;&quot;&quot;&quot;import osFFMPEG_BINARY = os.getenv(&#x27;FFMPEG_BINARY&#x27;, &#x27;ffmpeg-imageio&#x27;)IMAGEMAGICK_BINARY = os.getenv(&#x27;IMAGEMAGICK_BINARY&#x27;, &#x27;auto-detect&#x27;)IMAGEMAGICK_BINARY = &quot;D:\\\\MySoftware\\\\VideoCut\\\\ImageMagick-7.1.0-Q16-HDRI\\\\convert.exe&quot; 视频文件的读取 剪辑处理视频，首先需要读取到视频文件，主要有VideoFileClip、clips_array、CompositeVideoClips这三种方法 Anaconda常用命令小结 菜鸡日志 沉迷学习 29 人赞同了该文章 简介 入门机器学习、深度学习，有个神器不得不了解下，最好熟练有它。这就是Anaconda Anaconda是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项. 用它来管理、开发等，及其方便，里面集成了相当多的有用的吧，比如：numpy、pandas等。 还有个神器也在里面，jupyter notebook，这个用来调试代码等非常方便。现在就简单介绍一些anaconda常用的命令，方便大家早些上手。 首先，官网文档地址贴上： https://conda.io/docs/user-guide/index.html 更详细的教程可直接查询官网~ Anaconda安装配置 安装过程在这里就略掉不展开了，在TensorFlow环境配置那有详细讲过，可以翻阅。 再贴个其他博客的地址，供参考（Windows版） https://blog.csdn.net/wz947324/article/details/80205181 安装好记得检查下环境变量，配置好环境变量 conda管理相关命令 conda自身相关 查看当前conda工具版本号 1conda --version 查看包括版本的更多信息 1conda info 更新conda至最新版本 1conda update conda 查看conda帮助信息 1conda -h 关注公众号“学习与成长资源库”获取更多最新资料 环境管理相关 查看conda环境管理命令帮助信息 1conda create --help 创建出来的虚拟环境所在的位置为conda路径下的env/文件下,,默认创建和当前python版本一致的环境. 1conda create --name envname 创建新环境时指定python版本为3.6，环境名称为python36 1conda create --name python36 python=3.6 切换到环境名为python36的环境（默认是base环境），切换后可通过python -V查看是否切换成功 1conda activate python36 返回前一个python环境 1conda deactivate 显示已创建的环境，会列出所有的环境名和对应路径 1conda info -e 删除虚拟环境 1conda remove --name envname --all 指定python版本,以及多个包 1conda create -n envname python=3.4 scipy=0.15.0 astroib numpy 查看当前环境安装的包 12conda list ##获取当前环境中已安装的包conda list -n python36 ##获取指定环境中已安装的包 克隆一个环境 123456# clone_env 代指克隆得到的新环境的名称# envname 代指被克隆的环境的名称conda create --name clone_env --clone envname#查看conda环境信息conda info --envs 构建相同的conda环境(不通过克隆的方法) 1234567891011# 查看包信息conda list --explicit# 导出包信息到当前目录, spec-file.txt为导出文件名称,可以自行修改名称conda list --explicit &gt; spec-file.txt# 使用包信息文件建立和之前相同的环境conda create --name newenv --file spec-file.txt# 使用包信息文件向一个已经存在的环境中安装指定包conda install --name newenv --file spec-file.txt 查找包 12345#模糊查找，即模糊匹配，只要含py字符串的包名就能匹配到conda search py ##查找包，--full-name表示精确查找，即完全匹配名为python的包conda search --full-name python 安装更新删除包 1234567891011121314151617181920##在当前环境中安装包conda install scrapy ##在指定环境中安装包conda install -n python36 scrapy##在当前环境中更新包 conda update scrapy ##在指定环境中更新包conda update -n python36 scrapy ##更新当前环境所有包conda update --all ##在当前环境中删除包conda remove scrapy ##在指定环境中删除包conda remove -n python2 scrapy Python管理 查找可以安装的python 12345# 查找所有名称包含python的包conda search python# 查找全名为python的包conda search --full-name python 安装不同版本的Python 1234567891011121314#在不影响当前版本的情况下,新建环境并安装不同版本的python#新建一个Python版本为3.6 名称为 py36 的环境conda create -n py36 python=3.6 anaconda#注:将py36替换为您要创建的环境的名称。 anaconda是元数据包，带这个会把base的基础包一起安装，不带的话新环境只包含python3.6相关的包。 python = 3.6是您要在此新环境中安装的软件包和版本。 这可以是任何包，例如numpy = 1.7，或多个包。#然后激活想要使用的环境即可conda activate py36#更新Python# 普通的更新pythonconda update python# 将python更新到另外一个版本/安装指定版本的pythonconda install python=3.6 分享环境 如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。一个分享环境的快速方法就是给ta一个你的环境的.yml文件。 首先通过activate target_env要分享的环境target_env，然后输入下面的命令会在当前工作目录下生成一个environment.yml文件 1conda env export &gt; environment.yml 小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境 1conda env create -f environment.yml 参考文档 https://conda.io/docs/user-guide/index.html https://blog.csdn.net/wz947324/article/details/80229560 https://blog.csdn.net/menc15/article/details/71477949 常用命令Conda官方文档 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051:: 获取版本号conda --versionconda -V:: 获取帮助conda --helpconda -h:: 查看某个子命令的帮助conda config --helpconda update --helpconda remove --helpconda install --help:: 查看环境管理的全部命令conda env -h:: 创建Python版本的环境conda create --name your_env_name python=3.7conda create --name python38Video python=3.8conda create --name p28 python=2.8 -yconda create --name p30 python=3.0 -yconda create --name p35 python=3.5 -yconda create --name p36 python=3.6 -yconda create --name p37 python=3.7 -yconda create --name p38 python=3.8 -y:: 确定Python版本：activate envnamepython -V:: 创建包含某些包的环境conda create --name your_env_name numpy scipy:: 创建指定Python版本下包含某些包的环境conda create --name your_env_name python=3.8 numpy scipyconda create -n your_env_name3.6 python=3.6 numpy scipyconda create -n ksDjango3.8 python=3.8:: 列出当前所有环境conda info --envsconda env list:: 激活某个环境activate your_env_nameactivate python38Video:: 关闭某个环境conda deactivate :: 克隆某个环境12345678# clone_env 代指克隆得到的新环境的名称# envname 代指被克隆的环境的名称conda create --name clone_env --clone envname#查看conda环境信息conda info --envsconda create -n HelloPython38 --clone TestPythonHelloconda create -n base20211023Python38 --clone base 构建相同的conda环境(不通过克隆的方法)123456789101112131415# 查看包信息conda list --explicit# 导出包信息到当前目录, spec-file.txt为导出文件名称,可以自行修改名称conda list --explicit &gt; 2021年11月16日·星期2·4·09·54·15conda-p38-file.txt# 使用包信息文件建立和之前相同的环境conda create --name newenv --file spec-file.txtconda create -n p38Video -conda-base-env-spec-file.txtconda list --explicit &gt; 2021年10月23日·星期6·23·12·15conda-base-env-spec-file.txt# 使用包信息文件向一个已经存在的环境中安装指定包conda install --name newenv --file spec-file.txt 1234:不可以如此应该先创建环境，然后倒入conda create --name p38Proxy python=3.8conda install --name p35 --file spec-file.txt 查找包123456789101112#模糊查找，即模糊匹配，只要含py字符串的包名就能匹配到conda search py ##查找包，--full-name表示精确查找，即完全匹配名为python的包conda search --full-name pythona:: 列出当前激活环境的所有包conda list:: 列出一个非激活环境的所有包conda list --name your_env_nameconda list -n HelloPython38 查找可以安装的python12345678# 查找所有名称包含python的包conda search python# 查找全名为python的包conda search --full-name python 安装不同版本的Python123456789101112131415#在不影响当前版本的情况下,新建环境并安装不同版本的python#新建一个Python版本为3.6 名称为 py36 的环境conda create -n py36 python=3.6 anacondaconda create --name p38Proxy python=3.8 -y#注:将py36替换为您要创建的环境的名称。 anaconda是元数据包，带这个会把base的基础包一起安装，不带的话新环境只包含python3.6相关的包。 python = 3.6是您要在此新环境中安装的软件包和版本。 这可以是任何包，例如numpy = 1.7，或多个包。#然后激活想要使用的环境即可conda activate py36#更新Python# 普通的更新pythonconda update python# 将python更新到另外一个版本/安装指定版本的pythonconda install python=3.6 安装包12345678910111213141516171819202122232425262728293031323334353637##在当前环境中安装包conda install scrapy ##在指定环境中安装包conda install -n python36 scrapy:: 为指定环境安装某个包conda install -n env_name package_nameconda install -n TestPythonHello moviepycmd中运行activate p38 &amp;&amp; pip install pyexecjs记得关闭代理activate p38Proxy &amp;&amp; pip install -r requirements.txtactivate p38 &amp;&amp; pip install -r requirements.txtactivate p38 &amp;&amp; pip install -r G:\\Demo_Git\\哔哩哔哩\\上传\\biliup\\requirements.txtactivate p38 &amp;&amp; conda install --name p38 --file requirements.txt -y activate p38 &amp;&amp; conda install --name p38 tensorflow -y pip install -r requirements.txt ## conda install --yes --file requirements.txtconda install --name ksDjango3.8 autopep8 -yconda install --name ksDjango3.8 --file requirements.txt -y activate HelloPython38conda deactivateconda uninstall moviepy通道conda config --add channels conda-forgeconda install djangoconda install -c conda-forge moviepyconda install -c conda-forge ruiaconda install pytorch torchvision torchaudio cudatoolkit=11.0 -c pytorch naconda 安装在线/离线(.whl或者.tar.gz)包的一些方法在线包对于命令行窗口安装，有两种终端窗口1、“win”+R，输入”cmd“，如下2、右键开始菜单，选择“Windows Powershell(I)”个人建议可以用后面这个，命令更多。 将命令行的所在文件目录cd/d到有conda或者pip的文件夹下，进行conda install “文件名”pip install “文件名”–&gt; conda 环境中也可以使用哦 离线安装·请关闭代理–&gt; 可以直接在cmd中进行 1231、安装.whl文件--&gt; **请关闭代理**在Anaconda文件目录下打开Anaconda Powershell Prompt输入pip install “路径\\文件名” pip 指定某个路径安装包 场景： 有的时候我们安装了annconda环境，有很多的python环境，比如py36, py37, py27。此时，我们使用pip安装包的时候，经常可能安装在一个不知道的路径，或者不是我们期望安装的路径。 这就是本文要解决的问题了。 方法一 指定安装numpy包到固定文件夹下，比如这里“文件夹”是安装路径 1pip install -t 文件夹 numpy 方法二 设置 pip 默认安装路径 找到 site.py 文件。（windows：可以通过自带的查找，或者使用 everything软件；Linux直接使用find命令即可） 我的目录：D:programAnacondaenvspy36Libsite.py 修改 USER_SITE 和 USER_BASE 两个字段的值(之前是null). 1234#自定义依赖安装包的路径USER_SITE = null#自定义的启用Python脚本的路径USER_BASE = null 我这里修改为 12USER_SITE = &quot;D:\\program\\Anaconda\\envs\\py36\\Lib\\site-packages&quot;USER_BASE = &quot;D:\\program\\Anaconda\\envs\\py36\\Scripts&quot; 使用命令查看、验证 1python -m site 结果 1234567891011121314151617sys.path = [ &#x27;C:\\\\Users\\\\z2010&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\python36.zip&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\DLLs&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\lib&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages\\\\torchvision-0.2.1-py3.6.egg&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages\\\\tqdm-4.28.1-py3.6.egg&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages\\\\pyahocorasick-1.4.0-py3.6-win-amd64.egg&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages\\\\win32&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages\\\\win32\\\\lib&#x27;, &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages\\\\Pythonwin&#x27;,]USER_BASE: &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Scripts&#x27; (exists)USER_SITE: &#x27;D:\\\\program\\\\Anaconda\\\\envs\\\\py36\\\\Lib\\\\site-packages&#x27; (exists)ENABLE_USER_SITE: True 12345672、安装.tar.gz文件（1）将解压后的文件直接放在…/Anacoanda/Lib/site-packages目录下，删除版本号哦注：需要将不带版本号的子文件放在目录下（2）在Anaconda文件目录下打开Anaconda Powershell Prompt·输入：python setup.py install 12345678910离线安装-方法2下载安装包:复制网址https://pypi.tuna.tsinghua.edu.cn/packages/42/02/7b2fb0b81266aa3243dd8f392d48db1a206cc9a1856a14228e75c515616e/opencv-contrib-python-4.5.1.48.tar.gz到浏览器下载安装包解压安装包:tar -zxvf opencv-contrib-python-4.5.1.48.tar.gzcd opencv-contrib-python-4.5.1.48python setup.py build提示错误:ModuleNotFoundError: No module named ‘skbuild’解决:pip install scikit-build提示错误:解决:编译OpenCV 以及 openc_contrib 提示缺少boostdesc_bgm.i文件出错的解决python setup.py install 配置环境变量了，cmd中也是可以操作 11、安装.whl文件--&gt; **请关闭代理** 更新12345678##在当前环境中更新包 conda update scrapy ##在指定环境中更新包conda update -n python36 scrapy ##更新当前环境所有包conda update --all 删除123456789101112:: 删除某个环境conda remove -n your_env_name(虚拟环境名称) --all， 即可删除。##在当前环境中删除包conda remove scrapy ##在指定环境中删除包conda remove -n python2 scrapyconda remove -n python38Video --allconda clean -p //删除没有用的包conda clean -t //tar打包conda clean -y --all //删除所有的下载的安装包及cache 分享环境如果你想把你当前的环境分享给朋友，让对方也可以快速拥有一个和你相同的环境（相同的版本和包），那么就给TA一个当前环境的.yml文件。 首先通过activate target_env要分享的环境target_env，然后输入以下命令，生成一个.yml文件 1conda env export &gt; share_env.yml 对方拿到后，放在指定目录下，然后通过命令创建该环境 1conda env create -f share_env.yml 如果你够厉害的话，这个文件完全可以手写，里面详细记录了每个包的名字和对应的版本号 问题1：新建环境可解决123456789101112131415161718192021222324252627发生异常: ImportError (note: full exception trace is shown but execution is paused at: &lt;module&gt;)IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!Importing the numpy C-extensions failed. This error can happen formany reasons, often due to issues with your setup or how NumPy wasinstalled.We have compiled some common reasons and troubleshooting tips at: https://numpy.org/devdocs/user/troubleshooting-importerror.htmlPlease note and check the following: * The Python version is: Python3.8 from &quot;D:\\Java\\Python\\Anaconda3\\envs\\HelloPython38\\python.exe&quot; * The NumPy version is: &quot;1.20.1&quot;and make sure that they are the versions you expect.Please carefully study the documentation linked above for further help.Original error was: DLL load failed while importing _multiarray_umath: 找不到指定的模块。During handling of the above exception, another exception occurred: File &quot;H:\\douyinVideo\\视频拼接.py&quot;, line 2, in &lt;module&gt; (Current frame) from moviepy.editor import VideoFileClip,concatenate_videoclips requirements.txt使用许多Python项目中都包含了requirements.txt文件，该文件记录了当前程序的所有依赖包及其精确版本号。 生成requirement.txt文件 pip freeze &gt; requirements.txt 安装requirement.txt文件依赖 pip install -r requirements.txt 除了使用pip命令来生成及安装requirement.txt文件以外，也可以使用conda命令来安装。 12345## conda install --yes --file requirements.txtconda install --name ksDjango3.8 autopep8 -yconda install --name p38 --file requirements.txt -y 但是这里存在一个问题，如果requirements.txt中的包不可用，则会抛出“无包错误”。使用下面这个命令可以解决这个问题 $ while read requirement; do conda install –yes $requirement; done &lt; requirements.txt 如果想要在conda命令无效时使用pip命令来代替，那么使用如下命令： $ while read requirement; do conda install –yes $requirement || pip install $requirement; done &lt; requirements.txt 也可以这样子操作 导出到.yml文件 conda env export &gt; freeze.yml 直接创建conda环境 conda env create -f freeze.yml Reference：Install only available packages using “conda install –yes –file requirements.txt” without error 添加已安装的应用如果已经安装Pycharm Community和Vscode（这个会自动识别）；可以把Pycharm社区版手动添加到Anaconda Navigator里面 File -&gt; Preference -&gt; PyCharm CE path:”D:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.3.2” MiniConda Miniconda一个Conda的免费最小安装程序，它是Anaconda的小型启动程序版本，仅包含Python、Conda；最小的依赖包和少量的其他软件，属于精简版Conda； MiniConda下载地址/官方文档选择建议 如果选择Anaconda，则： 是Conda或Python新手； 完全集成的环境安装大量软件包 多余的磁盘空间（占用大约3G）和节省安装插件或配置的时间； 不想单独安装每个所用的包或解决包依赖关系。 自动导入装一下这个插件，在 TS 和 TSX 模块中可用。例如在这边导出一个 compose 函数：在另一个模块中输入 compose 然后按回车：即可自动导入： python pip 安装 requirements.txt 报错ponponon发布于 6 月 6 日 English 错误描述12345pip install requirements.txt Defaulting to user installation because normal site-packages is not writeableERROR: Could not find a version that satisfies the requirement requirements.txt (from versions: none)ERROR: No matching distribution found for requirements.txtvagrant@vagrant:/vagrant$ sudo pip install requirements.txt 解决办法少了 -r 参数，换成如下命令 1pip install -r requirements.txt python 阅读 1.3k发布于 6 月 6 日","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"Anaconda","slug":"Anaconda","permalink":"https://muyangit.github.io/tags/Anaconda/"}],"author":"MuyanGit"},{"title":" moviepy在win上找不到ImageMagick    ","slug":"moviepy在win上找不到ImageMagick","date":"2021-10-19T20:06:13.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/10/20/cl3sojxft00245cbhgdfa18f1/","link":"","permalink":"https://muyangit.github.io/2021/10/20/cl3sojxft00245cbhgdfa18f1/","excerpt":"","text":"moviepy在win上找不到ImageMagick—IMAGEMAGICK_BINARY = “C:\\Program Files\\ImageMagick_VERSION\\convert.exe”2021-10-20 04:03:16 发布 您现在位置：Python中文网/ 问答频道 */*正文 网友 男 | 程序猿一只，喜欢编程写python代码。 在64位Windows 7上的Anaconda3 4.1.1发行版上，我使用pip install moviepy安装了moviepy 0.2.2.11。现在我想用需要ImageMagick的动画文本测试一些示例。因此，我下载并安装了ImageMagick-7.0.3-4-Q16-x64-dll.exe，但根据windows上的https://zulko.github.io/moviepy/install.html，需要手动指定路径。如果我理解正确，这必须在编译之前完成。然而，当我使用pip进行安装时，我不知道如何告诉moviepy路径。在 第二，似乎没有转换.exe. 但是我可以使用例如magick convert image.png image.gif。那么这个版本的ImageMagick与moviepy完全兼容吗？在 2条回答 跳转到主要内容 航行学园 首页前端分类编程语言移动开发 [Python图像处理] 二十九.MoviePy视频编辑库实现抖音短视频剪切合并操作首页 &gt; 栏目 &gt; [Python图像处理] 二十九.MoviePy视频编辑库实现抖音短视频剪切合并操作 &gt; 该系列文章是讲解Python OpenCV图像处理知识，前期主要讲解图像入门、OpenCV基础用法，中期讲解图像处理的各种算法，包括图像锐化算子、图像增强技术、图像分割等，后期结合深度学习研究图像识别、图像分类应用。希望文章对您有所帮助，如果有不足之处，还请海涵~ 前面一篇文章详细讲解了OpenCV快速实现人脸检测，涉及图像、视频、摄像头。这篇文章将介绍MoviePy视频编辑库，实现视频的自定义剪切和合并操作，基础性文章，希望对你有所帮助。同时，该部分知识均为杨秀璋查阅资料撰写，转载请署名“CSDN+杨秀璋”及原地址出处，谢谢！！ 该扩展包缺点：速度太慢，真的很慢，后面看看有没有更好的替代方法。 该系列在github所有源代码： https://github.com/eastmountyxz/ImageProcessing-Python https://github.com/eastmountyxz/CSDNBlog-ImageProcessing-Python 前文参考：[Python图像处理] 一.图像处理基础知识及OpenCV入门函数[Python图像处理] 二.OpenCV+Numpy库读取与修改像素[Python图像处理] 三.获取图像属性、兴趣ROI区域及通道处理[Python图像处理] 四.图像平滑之均值滤波、方框滤波、高斯滤波及中值滤波[Python图像处理] 五.图像融合、加法运算及图像类型转换[Python图像处理] 六.图像缩放、图像旋转、图像翻转与图像平移[Python图像处理] 七.图像阈值化处理及算法对比[Python图像处理] 八.图像腐蚀与图像膨胀[Python图像处理] 九.形态学之图像开运算、闭运算、梯度运算[Python图像处理] 十.形态学之图像顶帽运算和黑帽运算[Python图像处理] 十一.灰度直方图概念及OpenCV绘制直方图[Python图像处理] 十二.图像几何变换之图像仿射变换、图像透视变换和图像校正[Python图像处理] 十三.基于灰度三维图的图像顶帽运算和黑帽运算[Python图像处理] 十四.基于OpenCV和像素处理的图像灰度化处理[Python图像处理] 十五.图像的灰度线性变换[Python图像处理] 十六.图像的灰度非线性变换之对数变换、伽马变换[Python图像处理] 十七.图像锐化与边缘检测之Roberts算子、Prewitt算子、Sobel算子和Laplacian算子[Python图像处理] 十八.图像锐化与边缘检测之Scharr算子、Canny算子和LOG算子[Python图像处理] 十九.图像分割之基于K-Means聚类的区域分割[Python图像处理] 二十.图像量化处理和采样处理及局部马赛克特效[Python图像处理] 二十一.图像金字塔之图像向下取样和向上取样[Python图像处理] 二十二.Python图像傅里叶变换原理及实现[Python图像处理] 二十三.傅里叶变换之高通滤波和低通滤波[Python图像处理] 二十四.图像特效处理之毛玻璃、浮雕和油漆特效[Python图像处理] 二十五.图像特效处理之素描、怀旧、光照、流年以及滤镜特效[Python图像处理] 二十六.图像分类原理及基于KNN、朴素贝叶斯算法的图像分类案例[Python图像处理] 二十七.OpenGL入门及绘制基本图形（一）[Python图像处理] 二十八.OpenCV快速实现人脸检测及视频中的人脸 文章目录一.MoviePy简介及安装 二.MoviePy基础用法 三.MoviePy抖音短视频剪切 四.MoviePy抖音短视频合并 五.总结 一.MoviePy简介及安装MoviePy是一个用于视频编辑的Python模块，包括切割、连接、标题插入、视频合成、非线性编辑，视频处理等功能，甚至可以用它增加一些自定义的高级的特效。此外，MoviePy可以读写绝大多数常见的音频和视频格式，包括GIF格式，并且可以在Windows / Mac / Linux上运行，这也以意味着，MoviePy项目可以部署到服务端，在服务端进行视频处理。该扩展包带有Python 2.7+和Python3版本，是一个视频编辑良好扩展包（ffmpeg亦推荐学习）。 下载地址： https://pypi.org/project/moviepy/ Github： https://github.com/Zulko/moviepy 本文主要通过MoviePy实现短视频的剪切和合并操作。随着自媒体公司频繁在各个平台进行视频搬运，对于视频原创性的要求越来越高，用MoviePy可以批量实现视频编辑，结合MoviePy的跨平台特性，可以实现在服务端视频采集，自动处理，发布的流水线作业。推荐ucsheep老师的部分文章： MoviePy - 中文文档(一个专业的python视频编辑库)教程 MoviePy安装如下图所示： pip install moviepy 常见错误安装MoviePy运行代码如果报错缺少ImageMagick或decode转码错误，“This error can be due to the fact that ImageMagick is not installed on your computer”，这是需要安装ImageMagic可执行文件。ImageMagic是用在视频中填入文本信息的工具，需要单独下载exe程序安装。可以参考下面这篇文章解决。 https://blog.csdn.net/weixin_42081389/article/details/104322629 https://imagemagick.org/script/download.php#windows 安装过程注意勾选Install development headers and libraries for C and C++ 。 安装ImageMagick成功之后如下图所示： 接着修改MoviePy模块下的config_defaults.py文件，修改IMAGEMAGICK_BINARY值，改为刚刚安装ImageMagick的目录下。比如此时的安装目录，接着即可成功运行代码。 C:\\Program Files\\ImageMagick-7.0.10-Q16-HDRI 1234567import osFFMPEG_BINARY = os.getenv(&#x27;FFMPEG_BINARY&#x27;, &#x27;ffmpeg-imageio&#x27;)#IMAGEMAGICK_BINARY = os.getenv(&#x27;IMAGEMAGICK_BINARY&#x27;, &#x27;auto-detect&#x27;)#修改为刚刚ImageMagic的安装路径IMAGEMAGICK_BINARY = r&quot;C:\\Program Files\\ImageMagick-7.0.10-Q16-HDRI\\magick.exe&quot; 二.MoviePy基础用法案例一：视频翻转下面首先看一个简单的官方例子，它将视频翻转。 12345678910111213from moviepy.editor import *#视频旋转180度clip = VideoFileClip(&quot;cat01.mp4&quot;).rotate(180)#The size of the clip, (width,heigth) in pixelsprint(clip.size) #(720, 1280)#播放视频#clip.ipython_display(width=100)#写入视频clip.write_videofile(&quot;cat01_rotate.mp4&quot;) 输出结果如下图所示，成功将视频翻转，但是视频加载的时间较长。 案例二：自定义logo再来看一个示例，它将在视频5s和10s之间的子剪辑屏幕中央添加一个标题，然后将结果写入一个新文件。 123456789101112131415161718192021from moviepy.editor import *#加载视频5-10片段clip = VideoFileClip(&quot;cat02.mp4&quot;).subclip(5,10)print(type(clip))#降低音量x0.8clip = clip.volumex(0.8)#生成文本 自定义颜色字体text = &quot;CSDN Eastmount 2020&quot;txt_clip = TextClip(text, fontsize=70, font=&#x27;Simhei&#x27;, color=&#x27;blue&#x27;)#屏幕中央显示5秒txt_clip = txt_clip.set_position(&#x27;center&#x27;).set_duration(5)#Overlay text on videoresult = CompositeVideoClip([clip, txt_clip])#写入文件result.write_videofile(&quot;cat02_edited.mp4&quot;) 输出结果如下图所示，可以看到成功增加了水印“CSDN Eastmount 2020”。 进一步修改视频，可以实现随机时间、随机位置出现logo水印的功能，代码如下。 12345678910111213141516171819202122232425262728from moviepy.editor import *import random#加载视频5-10片段video = VideoFileClip(&quot;cat03.mp4&quot;).subclip(5,10)times = video.duration#在不同位置出现4次n = 4 times_list = [i * (times / n) for i in range(n + 1)]#[0.0, 1.25, 2.5, 3.75, 5.0]print(times_list) logos = []#生成文本 自定义颜色字体for i in range(n): txt_clip = TextClip(&quot;CSDN Eastmount 2020&quot;, fontsize=50, font=&#x27;Simhei&#x27;, color=&#x27;blue&#x27;) #显示时间 位置 txt_clip = (txt_clip.set_start(times_list[i]).set_end(times_list[i + 1]) .set_pos((random.randint(0, video.w), random.randint(0, video.h)))) logos.append(txt_clip)#Overlay text on videoresult = CompositeVideoClip([video, *logos])#写入文件 mp4文件默认用libx264编码 比特率单位bpsresult.write_videofile(&quot;cat03_edited.mp4&quot;, codec=&quot;libx264&quot;, bitrate=&quot;10000000&quot;) 输出结果如下图所示： 案例三：MoviePy作者官方实现电影字幕 https://zulko.github.io/moviepy/examples/star_worms.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import numpy as npfrom moviepy.editor import *from moviepy.video.tools.segmenting import findObjects# WE CREATE THE TEXT THAT IS GOING TO MOVE, WE CENTER IT.screensize = (720,460)txtClip = TextClip(&#x27;Cool effect&#x27;,color=&#x27;white&#x27;, font=&quot;Amiri-Bold&quot;, kerning = 5, fontsize=100)cvc = CompositeVideoClip( [txtClip.set_pos(&#x27;center&#x27;)], size=screensize)# THE NEXT FOUR FUNCTIONS DEFINE FOUR WAYS OF MOVING THE LETTERS# helper functionrotMatrix = lambda a: np.array( [[np.cos(a),np.sin(a)], [-np.sin(a),np.cos(a)]] )def vortex(screenpos,i,nletters): d = lambda t : 1.0/(0.3+t**8) #damping a = i*np.pi/ nletters # angle of the movement v = rotMatrix(a).dot([-1,0]) if i%2 : v[1] = -v[1] return lambda t: screenpos+400*d(t)*rotMatrix(0.5*d(t)*a).dot(v) def cascade(screenpos,i,nletters): v = np.array([0,-1]) d = lambda t : 1 if t&lt;0 else abs(np.sinc(t)/(1+t**4)) return lambda t: screenpos+v*400*d(t-0.15*i)def arrive(screenpos,i,nletters): v = np.array([-1,0]) d = lambda t : max(0, 3-3*t) return lambda t: screenpos-400*v*d(t-0.2*i) def vortexout(screenpos,i,nletters): d = lambda t : max(0,t) #damping a = i*np.pi/ nletters # angle of the movement v = rotMatrix(a).dot([-1,0]) if i%2 : v[1] = -v[1] return lambda t: screenpos+400*d(t-0.1*i)*rotMatrix(-0.2*d(t)*a).dot(v)# WE USE THE PLUGIN findObjects TO LOCATE AND SEPARATE EACH LETTERletters = findObjects(cvc) # a list of ImageClips# WE ANIMATE THE LETTERSdef moveLetters(letters, funcpos): return [ letter.set_pos(funcpos(letter.screenpos,i,len(letters))) for i,letter in enumerate(letters)]clips = [ CompositeVideoClip( moveLetters(letters,funcpos), size = screensize).subclip(0,5) for funcpos in [vortex, cascade, arrive, vortexout] ]# WE CONCATENATE EVERYTHING AND WRITE TO A FILEfinal_clip = concatenate_videoclips(clips)final_clip.write_videofile(&#x27;coolTextEffects.avi&#x27;,fps=25,codec=&#x27;mpeg4&#x27;) pip install scikit-image安装相关扩展包。 三.MoviePy抖音短视频剪切我们通常在看抖音短视频过程中，通常会下载视频，但视频最后有个抖音的logo，我们能否用Python剪切视频去除logo，再合成集合呢？比如将某个UP主的猫视频自动处理成集合。 假设文件夹中有5个抖音短视频，如下图所示： 完整代码如下： 12345678910111213141516171819202122232425262728293031# -*- coding: utf-8 -*- import osfrom moviepy.editor import *#递归获取文件名称def file_name(file_dir): L=[] for root, dirs, files in os.walk(file_dir): for file in files: if os.path.splitext(file)[1] == &#x27;.mp4&#x27;: L.append(os.path.join(root, file)) return L #主函数if __name__ == &#x27;__main__&#x27;: filePath = &#x27;vedio&#x27; file_list = file_name(filePath) k = 1 for name in file_list: print(name) #获取视频总时间 video = VideoFileClip(name) times = video.duration print(times) #剪切视频广告 省略最后4秒 video = VideoFileClip(name).subclip(0,times-4) result = &quot;save&quot; + str(k) + &quot;.mp4&quot; video.write_videofile(result) k = k + 1 如果运行速度较慢，可以使用线程进行优化或ffmpeg开启GPU加速。输出结果如下图所示，成功将视频LOGO删除。 四.MoviePy抖音短视频合并案例一：视频常规合并接着将视频合并生成合集，先给出一个最简单的代码，如下所示。 12345678910111213141516171819202122232425262728293031# -*- coding: utf-8 -*- import osfrom moviepy.editor import *#递归获取文件名称def file_name(file_dir): L=[] for root, dirs, files in os.walk(file_dir): for file in files: if os.path.splitext(file)[1] == &#x27;.mp4&#x27;: L.append(os.path.join(root, file)) return L #主函数if __name__ == &#x27;__main__&#x27;: filePath = &#x27;vedio&#x27; file_list = file_name(filePath) k = 1 L = [] for name in file_list: print(name) #获取视频总时间 video = VideoFileClip(name) times = video.duration L.append(video) print(times) #视频合成 帧数大致就是24 final_clip = concatenate_videoclips(L) final_clip.to_videofile(&#x27;./final.mp4&#x27;, fps= 24, remove_temp=True) 运行结果如下图所示： 其中 final.mp4 是最终生成的文件，fps是每秒钟传输的帧数，比如人眼一般一秒钟能看到的帧数大致就是 24，而程序最终会生成一个临时文件，remove_temp=True 指的就是将这个临时文件删除。 注意：在我的电脑上，如果一次性合成的文件数过多，程序会崩溃，并且速度是真的慢！！！ 案例二：视频预处理合并同时，补充知乎“大坚果”老师读取视频文件合并的核心代码。 1234clip1 = VideoFileClip(&quot;1.flv&quot;).subclip(10,20) #读取视频，并截取10-20秒的内容clip2 = VideoFileClip(&quot;2.webm&quot;).resize(0.60) # 将视频画面尺寸缩小到60%final_clip = concatenate_videoclips([clip1,clip2]) #视频合并final_clip.write_videofile(&quot;hebing.mp4&quot;) 将多段视频以列表展现的形式显示 1final_clip = clips_array([[clip1, clip2],[clip3, clip4]]) 推荐CompositeVideoClips方法，可能比concatenate_videoclips、clips_array好用，它可选择起止位置，也可设置渐进切换。 123456video = CompositeVideoClip([clip1, #starts at t=0 clip2.set_start(5), #start at t=5s clip3.set_start(9)]) #start at t=9s，fade-in 的形式转换video = CompositeVideoClip([clip1, clip2.set_pos((45,150)), clip3.set_pos((90,100))]) 案例三：多视频按规定合并该案例也是MoviePy官方提供，这里参考ucsheep大佬的代码供大家学习，推荐大家去学习。 https://zulko.github.io/moviepy/examples/compo_from_image.html https://blog.csdn.net/ucsheep/article/details/82787821 它需要按照我们指定的图片进行投影，注意是PNG透明图片。 这个特殊的合成任务要花费很长的时间，这里仅给出完整代码。 123456789101112131415161718192021222324252627from moviepy.editor import *from moviepy.video.tools.segmenting import findObjects # 加载用来指定区域的图像im = ImageClip(&quot;../../ultracompositing/motif.png&quot;) # 加载这些区域返回一个ImageClip列表regions = findObjects(im)# 载入美国国家公园的7个clipclips = [VideoFileClip(n, audio=False).subclip(18,22) for n in [ &quot;../../videos/romo_0004.mov&quot;, &quot;../../videos/apis-0001.mov&quot;, &quot;../../videos/romo_0001.mov&quot;, &quot;../../videos/elma_s0003.mov&quot;, &quot;../../videos/elma_s0002.mov&quot;, &quot;../../videos/calo-0007.mov&quot;, &quot;../../videos/grsm_0005.mov&quot;]] # 把每一个clip都放置在对应的图片中的区域comp_clips = [c.resize(r.size) .set_mask(r.mask) .set_pos(r.screenpos) for c,r in zip(clips,regions)] cc = CompositeVideoClip(comp_clips,im.size)cc.resize(0.6).write_videofile(&quot;../../composition.mp4&quot;) 五.总结本篇文章主要讲解MoviePy视频编辑库基础知识，主要实现视频处理、视频剪切和视频拼接。但该扩展包也存在缺陷，速度非常慢。后续随着作者深入，希望能够分享更好的代码。希望这篇基础性文章对读者有一定帮助，也希望这些知识点为读者从事Python图像处理相关项目实践或科学研究提供一定基础。 2020年8月18新开的“娜璋AI安全之家”，主要围绕Python大数据分析、网络空间安全、人工智能、Web渗透及攻防技术进行讲解，同时分享CCF、SCI、南核北核论文的算法实现。娜璋之家会更加系统，并重构作者的所有文章，从零讲解Python和安全，写了近十年文章，真心想把自己所学所感所做分享出来，还请各位多多指教，真诚邀请您的关注！谢谢。 (By:Eastmount 2020-10-06 深夜10点夜于武汉 http://blog.csdn.net/eastmount/ ) 参考文献：[1] https://pypi.org/project/moviepy/[2] https://github.com/Zulko/moviepy[3] MoviePy - 中文文档(一个专业的python视频编辑库)教程[4] https://blog.csdn.net/weixin_42081389/article/details/104322629[5] https://blog.csdn.net/SnailPace/article/details/107016442[6] https://zhuanlan.zhihu.com/p/46341173[7] https://www.jianshu.com/p/98a0c091c4bf[8] https://blog.csdn.net/mp624183768/article/details/81434408[9] https://zulko.github.io/moviepy/examples/moving_letters.html[10] https://blog.csdn.net/weixin_43354181/article/details/104272789 来源url https://blog.csdn.net/Eastmount/article/details/108929561 栏目 前端 最新内容 【linux】shell 和 权限 Linux 下Xorddos的木马清除 C++——vector的模拟实现 Linux vim的基本使用 RHCSA——第四天 Hadoop实战——对英文单词文本进行统计和排序（超详细教学，算法分析） 互联网公司的完整开发流程是怎样的？ 使用Redis工具自动部署cluster集群（十三） 【C++】vector 做完自动化测试，但别让不会汇报毁了你… 免责声明 联络表 科文园 Copyright © 2021. All rights reserved","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" 批量下载抖音单用户所有无水印视频    ","slug":"python去除水印-程序员的人生A","date":"2021-10-19T18:53:45.000Z","updated":"2022-05-23T15:37:33.103Z","comments":true,"path":"2021/10/20/cl3sojxfv00295cbhbuhg9vdu/","link":"","permalink":"https://muyangit.github.io/2021/10/20/cl3sojxfv00295cbhbuhg9vdu/","excerpt":"","text":"5行Python代码实现批量打水印技巧，值得收藏工作的时候，尤其是自媒体，我们必备水印添加工具以保护我们的知识产权，网上有许多的在线 / 下载的水印添加工具，但他们或多或少都存在以下问题： 在线工具需要上传到对方服务器，信息不安全。 很多工具不具备批量处理功能。 很多工具自定义的功能太少，如水印透明度，字体等。 操作繁琐。这里还要注意：光理论是不够的。这里顺便总大家一套2020最新python入门到高级项目实战视频教程，可以去小编的Python交流.裙 ：七衣衣九七七巴而五（数字的谐音)转换下可以找到了，还可以跟老司机交流讨教！ 现在只要你会使用命令，我们就能教大家怎么使用 Python 超级简单地为图片添加水印，而且具备以下特点： 支持自定义水印字体。 支持自定义文本内容、颜色。 支持批量处理。 支持设定水印与水印之间的空间。 支持设定水印字体大小。 支持设定透明度。 自己的代码，安全。 是不是超棒，已经具备你所需要的所有功能了 ？ 下面进入正题。 我们需要使用的是 2Dou 的开源项目：github.com/2Dou/watermarker非常有用的开源项目，感谢原作者。 有三种方法可以下载这个项目： 如果你那边的网络可以上 github，你可以进入该页面，点击 clone or download 然后点击 Download Zip. 如果你有下载 git ，可以用 cmd/terminal 进入你想放置的文件夹，输入命令: 12git clone https://github.com/2Dou/watermarker.git. terminal位置如下： 如果你都没有，则下载本站为你提供的源代码，而且修复了一个 windows 下的字体文件为中文的问题（后面会为大家详细介绍），点击下载 下载解压到你想要放置的任意一个文件夹下。路径中最好不要带中文名，如果你是用前两种方法下载的，而且是 windows 系统用户，注意要把该项目的字体文件名改为英文，而且 marker.py 里也有一个地方需要改动，如下: 将 font 文件夹里的 青鸟华光简琥珀.ttf 改为 bird.ttf， 什么名字不重要，重点是不要用中文名，否则 pillow 会无法使用改文件。注意 marker.py 文件里的第十行要改成相应的名字，与 font 文件夹下的字体文件名相对应。 刚刚我们提到了 pillow 这个库，这个包的运行需要使用到这个第三方库，它是专门用来处理图像的，打开 CMD/Terminal, 输入以下命令即可安装： 1pip install [pillow](https://pythondict.com/tag/pillow/ &quot;pillow&quot;) 安装完毕后，我们就可以试一下了！最普通的例子如下，将你所需要加水印的图片放在该项目的 input 文件夹下，然后在 cmd/Terminal 中进入你存放该项目的文件夹输入以下命令： 1python marker.py -f ./input/baby.jpg -m python实用宝典 各个参数的含义如下： -f 文件路径：是你的图片的路径-m 文本内容：是你想要打的水印的内容 其他参数不设置则为默认值，运行完毕后会在 output 文件夹下出现相应的加了水印的图片，效果如下： 添加水印 默认水印的颜色是… 屎黄色的？但是没关系，我们可以修改它的颜色，添加 - c 参数即可！（参数默认格式为 #号后加 6 位 16 进制），利用图像工具，我们可以找到你喜欢的颜色的值： 找出颜色 然后我们输入命令： 1python marker.py -f ./input/baby.jpg -m python实用宝典 -c #232862 看看效果： 修改颜色 恩！变好看了，但是好像水印的颜色有点深，我们可以修改一下透明度让它变浅一点，默认的透明度为 0.15，可以让这个值变得更小，设定 opacity 参数： 1python marker.py -f ./input/baby.jpg -m python实用宝典 -c #232862 --opacity 0.08 结果如下： 变更透明 其实还有其他参数可以，我们就不一一展示了，一共有这些参数： -f 参数，指定打水印的文件，如果你想打印整个文件夹，则输入该文件夹路径即可。 -m 参数，指定水印内容。 -o 参数，指定输出水印文件的位置，默认为 output 文件夹。 -c 参数，指定水印的颜色，默认值为 shi.. 啊不，黄色，#8B8B1B. -s 参数，指定水印与水印之间的空隙，默认值为 75. -a 参数，指定水印的旋转角度，我们的例子中都是默认值 30 度。 –size 参数，指定水印文本字体大小，默认值为 50。 –opacity 参数，指定透明度，默认为 0.15，数值越小越透明。 接下来给大家试试批量处理功能，首先把所有图片放置到项目的 input 文件夹下： 放到 input 下 然后输入命令里，指定文件夹即可！ 1python marker.py -f ./input -m python实用宝典 -c #232862 --opacity 0.05 你会看到 input 文件夹名后没有 /baby.jpg 了，这表明将 input 文件夹下所有的图片打水印。 看到文件名 succes 则说明批处理成功！ 还有一个隐藏功能！如果你想要修改字体也可以哦！还记得我们前面怎么修复 windows 的中文名问题吗？如图，你只要将新的字体文件放到 font 文件夹下，然后修改 TTF_FONT 变量里的字体名字，与 font 文件夹下的新字体名字相对应即可改成你想要的字体了！ 都会了吧？最后注意：光理论是不够的。这里顺便总大家一套2020最新python入门到高级项目实战视频教程，可以去小编的Python交流.裙 ：七衣衣九七七巴而五（数字的谐音）转换下可以找到了，还可以跟老司机交流讨教！","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" 正则表达式    ","slug":"正则表达式","date":"2021-10-12T07:58:05.000Z","updated":"2022-05-23T15:37:33.003Z","comments":true,"path":"2021/10/12/cl3sojxge003l5cbhceqc1ufd/","link":"","permalink":"https://muyangit.github.io/2021/10/12/cl3sojxge003l5cbhceqc1ufd/","excerpt":"","text":"捕获组123([a-z]&#123;2&#125;)\\1(\\d&#123;2&#125;)\\2 非捕获组匹配到了，但无法继续使用\\1 预搜索(零宽断言) （最精简有用的）补充三:（看例子直接上手用） (?=exp):零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。 匹配后面为_path，结果为product ‘product_path’.scan 1(product)(?=_path) (?&lt;=exp):零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp 匹配前面为name:，结果为wangfei ‘name:wangfei’.scan 1(?&lt;=name:)(wangfei) (?!exp):零宽度负预测先行断言，断言此位置的后面不能匹配表达式exp。 匹配后面不是_path ‘product_path’.scan 1(product)(?!_path) 匹配后面不是_url ‘product_path’.scan 1(product)(?!_url) (?&lt;!exp):零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp 匹配前面不是name: ‘name:angelica’.scan 1(?&lt;!name:)(angelica) 匹配前面不是nick_name: ‘name:angelica’.scan 1(?&lt;!nick_name:)(angelica) 各种电话正则1/^400[0-9]&#123;7&#125;|^1[34578]\\d&#123;9&#125;$|^0[0-9]&#123;2,3&#125;-[0-9]&#123;8&#125;/ 识别html标签-注意url解析的源码编码12&lt;a[\\s\\S]+?&lt;/a&gt; 1href=\\&quot;.+?/&quot; 通过零宽断言-截取网址移除左侧符号1(?&lt;=(href=\\&quot;))(.+?/&quot;) 移除首尾符号1((?&lt;=(href=\\&quot;))(.+?))(?=/&quot;) （最精简有用的）补充三:（看例子直接上手用）(?=exp):零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。 匹配后面为_path，结果为product ‘product_path’.scan 1/(product)(?=_path)/ (?&lt;=exp):零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp 匹配前面为name:，结果为wangfei ‘name:wangfei’.scan 1/(?&lt;=name:)(wangfei)/ (?!exp):零宽度负预测先行断言，断言此位置的后面不能匹配表达式exp。 匹配后面不是_path ‘product_path’.scan 1/(product)(?!_path)/ 匹配后面不是_url ‘product_path’.scan 1/(product)(?!_url)/ (?&lt;!exp):零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp 匹配前面不是name: ‘name:angelica’.scan 1/(?&lt;!name:)(angelica)/ 匹配前面不是nick_name: ‘name:angelica’.scan 1/(?&lt;!nick_name:)(angelica)/ 再次提醒，如果由于同样表达式在不同地方的断言方法名（断言表达式叫法）不一致引起不适的话请以补充三中的为准。溜了溜了。 谢谢大家的阅读。 要求校验中文名校验银行卡号校验身份证号校验邮箱地址 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116/** * 判断是否为合法的中文名 * @param $name 名字 * @return bool */function isChineseName($name) &#123; if (preg_match(&#x27;/^([\\xe4-\\xe9][\\x80-\\xbf]&#123;2&#125;)&#123;2,4&#125;$/&#x27;, $name)) &#123; return true; &#125; else &#123; return false; &#125;&#125;/** * 判断是否为合法的银行卡号 * @param $banknum 银行卡号 * @return bool */function isBanknumByLuhm($banknum) &#123; $n = 0; for ($i = strlen($banknum); $i &gt;= 1; $i--) &#123; $index=$i-1; //偶数位 if ($i % 2==0) &#123; $n += $banknum&#123;$index&#125;; &#125; else &#123;//奇数位 $t = $banknum&#123;$index&#125; * 2; if ($t &gt; 9) &#123; $t = (int)($t/10)+ $t%10; &#125; $n += $t; &#125; &#125; return ($n % 10) == 0;&#125;/** * 判断是否为合法的身份证号码 * @param $idcard 身份证号 * @return bool */function isIdcard($idcard)&#123; if(strlen($idcard)==18)&#123; return $this-&gt;idcard_checksum18($idcard); &#125;elseif((strlen($idcard)==15))&#123; $idcard = $this-&gt;idcard_15to18($idcard); return $this-&gt;idcard_checksum18($idcard); &#125;else&#123; return false; &#125;&#125;// 计算身份证校验码，根据国家标准GB 11643-1999function idcard_verify_number($idcard_base) &#123; if(strlen($idcard_base)!=17)&#123; return false; &#125; //加权因子 $factor=array(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2); //校验码对应值 $verify_number_list=array(&#x27;1&#x27;,&#x27;0&#x27;,&#x27;X&#x27;,&#x27;9&#x27;,&#x27;8&#x27;,&#x27;7&#x27;,&#x27;6&#x27;,&#x27;5&#x27;,&#x27;4&#x27;,&#x27;3&#x27;,&#x27;2&#x27;); $checksum=0; for ($i=0; $i&lt;strlen($idcard_base); $i++) &#123; $checksum += substr($idcard_base, $i, 1) * $factor[$i]; &#125; $mod = $checksum % 11; $verify_number = $verify_number_list[$mod]; return $verify_number;&#125;// 将15位身份证升级到18位function idcard_15to18($idcard) &#123; if (strlen($idcard) != 15) &#123; return false; &#125; else &#123; // 如果身份证顺序码是996 997 998 999，这些是为百岁以上老人的特殊编码 if (array_search(substr($idcard,12,3), array(&#x27;996&#x27;,&#x27;997&#x27;,&#x27;998&#x27;,&#x27;999&#x27;)) !== false) &#123; $idcard = substr($idcard,0,6).&#x27;18&#x27;.substr($idcard,6,9); &#125;else&#123; $idcard = substr($idcard,0,6).&#x27;19&#x27;.substr($idcard,6,9); &#125; &#125; $idcard = $idcard.$this-&gt;idcard_verify_number($idcard); return $idcard;&#125;// 18位身份证校验码有效性检查function idcard_checksum18($idcard)&#123; if (strlen($idcard)!=18) &#123; return false; &#125; $idcard_base = substr($idcard,0,17); if ($this-&gt;idcard_verify_number($idcard_base) != strtoupper(substr($idcard,17,1))) &#123; return false; &#125; else &#123; return true; &#125;&#125; /** * 判断是否为合法的邮箱地址 * @param $email 邮箱地址 * @return bool */function isEmail($email) &#123; $pattern = &quot;/^([0-9A-Za-z\\\\-_\\\\.]+)@([0-9a-z]+\\\\.[a-z]&#123;2,3&#125;(\\\\.[a-z]&#123;2&#125;)?)$/i&quot;; if (preg_match($pattern, $email)) &#123; $reply = &quot;您输入的电子邮件地址合法&lt;br /&gt;&lt;br /&gt;\\n&quot;; $user_name = preg_replace($pattern ,&quot;$1&quot;, $email); $domain_name = preg_replace($pattern ,&quot;$2&quot;, $email); $reply .= &quot;用户名：&quot;.$user_name.&quot;&lt;br /&gt;\\n&quot;; $reply .= &quot;域名：&quot;.$domain_name.&quot;&lt;br /&gt;\\n\\n&quot;; return true; &#125; else &#123; $reply = &quot;您输入的电子邮件地址不合法&quot;; return false; &#125;&#125; sublime筛选指定的文件1H:\\学习\\WEB\\,*.md","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"    使用bat命令打开cmd，并打开某目录-并执行命令1+并执行命令2+并执行命令3··· ","slug":"使用bat命令打开cmd，并打开某目录-并执行命令1-并执行命令2-并执行命令3···","date":"2021-09-29T17:15:36.000Z","updated":"2022-05-23T15:37:33.028Z","comments":true,"path":"2021/09/30/cl3sojxg900365cbh7wn42n40/","link":"","permalink":"https://muyangit.github.io/2021/09/30/cl3sojxg900365cbh7wn42n40/","excerpt":"","text":"bat脚本输出日志到文件只保留异常在cmd窗口我们在使用bat进行压测的时候往往不仅需要看自己打印log，还需要在cmd看相应的报错，而我们自己打印的log往往又会覆盖掉cmd上出现的报错，这时候可以使用命令： 12345cmd窗口打开bat所在的目录--&gt;如下执行，可以把屏幕打印到文件D:\\MySoftware\\云盘\\阿里云盘\\阿里云盘同步\\sync-alidisk\\config&gt; 启动阿里云盘.bat &gt;&gt;sync-alidisk-log.txt bat打开cmd指向某个目录，并执行命令樱花博客+环境变量快捷备份 1234@echo OFFrem 注意1：命令之间只需要一个&amp;符号rem 注意2：cmd /k &quot;cd /d cmd /k &quot;cd /d F:\\本地 &amp; hexo s &amp; hexo cl &amp; hexo d&quot; 下面的不行，仅供参考 1cmd /k &quot;cd /d F:\\jm\\tms-web&amp;&amp;npm run build-prod&amp;&amp;xcopy F:\\jm\\tms-web\\dist\\* D:\\nginx-1.21.3\\html\\jm\\ /Y /E /I /Q&quot;","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" 张至顺真人讲解《炁體源流》    ","slug":"张至顺真人讲解《炁體源流》","date":"2021-09-24T19:15:17.000Z","updated":"2021-09-29T22:17:28.171Z","comments":true,"path":"2021/09/25/cl3sojxgg003r5cbh58a9a2ox/","link":"","permalink":"https://muyangit.github.io/2021/09/25/cl3sojxgg003r5cbh58a9a2ox/","excerpt":"","text":"张至顺真人讲解《炁體源流》｜天篇｜正式版 张真人：你回去好好地多看书，就是看这个《炁體源流》这一本书。先看《清静经》注解第二十三章，然后看《太乙金华宗旨》。把这一本书看清楚，就是你们打坐的一条（路上）指路的明灯，永远不会走错路，也就跟大海的行船样的，大海的一盏灯嘛。千万要记住，这个光，就是大海的那一盏灯。啊，就是那大海的一盏灯，会能给你们照清楚（前进的方向）。 **** 炁體源流｜自序 余自十七岁于华县半截山碧云庵参入道门，就志学道，参生死之变，习长生之术。尝于北京白云观藏经楼偶得《太清元道真经》一部，直指生死，长生久视，至道不烦也，指示修道本体，安静和柔，不移自性，常守虚无，湛然不劳，乃得自然之道也。 道祖为万法之王，玄之又玄，真空妙有，妙有真空，即是先天一点真阳之光。 以道心观天心，真阳发动处，当用之时，元神、元炁，同称谓玄。元炁谓玄，元神谓玄又玄。静者为性，动为元神。 燃灯佛，两目之光也，住西天极乐国雷音寺。道祖，住真空无极真境静土之天。 余常对门下弟子言：儒释道三家，同是一母生，何须争上下。一母者乃先天一点灵火之光，性也。 佛曰众生平等，道谓至善之地、性命之源、造化之理也。 邱祖曰：“人生先生两目，死先死两目。” 又曰：“一目之中，元精、元炁、元神，皆在内也。” 《素问》曰：“人之一身精华上注于目”，学者思之，慎之，慎之。 住眼于心神，二目之光，乃是元神真意之体，即真性也。千佛万祖皆不肯说破此光真性，今泄天机难免天遣。 作偈一首： 巽风吹到水面上，海底常送无油灯。 千言万语难说尽，一字道破定南针。 余云游四海，收集道书，皆佛道二祖玄妙秘密天机，生死之根本，辑录成册，望同道侣友藉此省却数十年参访功夫，早日证果。 “炁”化三清，“体”能载道，“源”乃先天道统，“流”为老君法脉，故曰《炁體源流》。 余略言几句粗浅，权作非道之道，不道之处尚冀仁人志道多多指教，是为序。 全真龙门派第二十一代 张至顺『号米晶子』 丁亥三月初三日书 自序终 张真人讲解炁體源流｜天篇｜文字版 黄剑：也就是三年前，三年前差不多这个时间，我记得是11年的最后几天了，有一个特殊的机缘让我见到了张道长，在海南玉蟾宫见到师父，然后这个缘分就这么开始了。 当时刚好老道长自己身体不舒服，不小心喝了一杯放了好几天的蜂蜜，喝完以后身体不舒服了，然后上吐下泻，他想完蛋了，我这一身的功夫没有传出去，我如果就这样子走掉的话，我对不起祖师爷。然后这时候刚好有一个傻乎乎的记者，这个，冒冒失失地闯进了他的生活，然后就开始了一段，这个我都其实觉得很不可思议的一个故事。 当时呢老道长就有一个心愿，他觉得他要把他自己这么几十年、大几十年修行的心法、感悟、从《道藏》里面学到的那些宝贵的东西，他要把他这本书，他自己用几十年的时间写了一本、手抄了一本，他读到最好的经书、最经典的东西，跟他的修行有感应的，他都把它抄下来。 然后这个小册子、手抄本，用毛笔一笔一划地抄下来的一个册子，他很希望能够集结成册传出去，让更多真正在实修的人、在修行的人、或者对道家很有兴趣的人，他们能够有一本很好的一个借鉴和引导的书，所以呢，这就是老道长的第一个心愿，要把《炁體源流》这本书出版出来，让世人都能够看得到。我们有几个师兄，广东的一些师兄，海南的一些师兄，包括是李辛，尤其是李辛夫妇和一刀师兄，他们用一年半的时间，终于把这本《炁體源流》的书给整理出来。 老道长还有一个心愿，就是他觉得，除了修行外，最重要的是人活着要健康。最好的办法呢，是每天有，除了有一颗很安宁的心、宁静的心，还有每天最好多做一些运动，尤其是像一些道家秘传的八部金刚的功法，传给大家。所以呢，我们也在这一次，也把八部金刚的书，也刚刚好是明天是首发。 还有一本他自己平时，这么几十年行医总结和收集到的一些偏方、验方的书，《米晶子济世良方》，明天也会一起拿出来跟大家分享。所以很巧，这个好像三年时间把这个心愿给了了，师父，三本书出来，这个三年大家的任务都完成的不错吧。我想，我想知道一下，今天这个从全国各地，飞广州的，来到这边的朋友有多少？师父，他们都不是广州，都是从外地来的朋友，专门来听您的课。有坚持练八部金刚的有哪一些？练八部金刚的？他们都在练，你看看，传播的还是很广泛的。平时有打坐修行的有哪一些？都在学习打坐。所以今天你有很多东西要告诉他们，所以我的废话少说，我们请老师父。 今天我们还很感激除了师父的一些弟子以外呢，还有很多这个聚友会的朋友，还有一些全国各地的朋友，今天请一刀师兄做一些板书。因为师父讲的话呢，可能有一些地方的方言，不是太容易听懂。好，师父，轮到你了。 张真人：我们这个，那么从全国各地方来的一些朋友们，反正我们就说一些同学们、好道的道友们，我们都是中国人啊，要记住。道教是我们，道家是中国最古老的一个文化的古国（中国是四大文明古国之一，道教是我国土生土长的宗教）。我们道家现在，反正最近来说嘛，大家远地方来的，辛辛苦苦地，千里万里来的，为了什么？大家都来要听我跟大家来说，究竟我有没有经验，反正总的来说，大家都辛苦了。我们要感谢大家，在这里，我希望大家身体健康、长寿，谢谢大家。 拐回来再说嘛，我要在这个会上讲什么，要必须要达到大家的要求。我是一个中国人，那么既然是个中国人，要爱我们的祖国，要爱我们的人民，爱教，爱党。没有中国共产党，没有今天的幸福，你们要注重这个，是不是？当然，这么几十年来，也有出些偏差，在前进的道路上，他必然要有些偏差，终究我们中国共产党为了人民，为了人民的幸福，才有了今天。我们年老（老年）人的话，每一个月还有生活补助，坐车坐什么东西，有了老年证的话什么都不要，这就是我们的幸福。 我们今天要讲，大家就是，就是讲这一本书。这一本书我准备了80年了，把一些《道藏》，一些中医东西都看作必要的东西，我才选在这个上边。这个上边，经过他们几个文化人整顿（整理）了一年半，才整顿（整理）出来的。这是第一个，《炁體源流》。我先把这个《炁體源流》四个字（讲一下）。那么，上边两个字最后说，那么“源”是上清派，“流”是老子派，“源”是发源，海源嘛，它比海要大得多。 那么，我们现在都有考察世界的一个同志，在社会上跑了10个月，才把我们地球转过来。那么，这个地球有多大？这是有限制的。那么，这个“源”，大小，不知道，没有限制。那么我们大家都知道有三山五岳。三山，就是蓬莱山(蓬壶)、丈方山(方丈山、方壶)、瀛洲山(瀛壶)，这三座山，每一座山要超过一个地球还要大，那你要知道这个“源”，这个海源有多大。那么我们的地球有限制，他们去考察地球时候他望（地球）外边水，根本没有边，无边无岸，是那个源。 那么，“炁”、“體”，那么大家看过《阴符经》，那是黄帝《阴符经》，黄帝《阴符经》在早，《阴符经》是从神上开始，从神上开始转入炁，它从阴转阳。《道德经》是从道，是从炁上开始，是阳转阴。他讲道，不离阴阳，一阴一阳谓之道嘛，大家都知道。 那么这个“炁”、“體”，我们大家都知道，老君爷一炁化三清，是从炁上开始的。“炁”、“體”，炁不离體，體不离炁。“炁”、“體”谁也不能离开谁，这是一个“炁”。你看那个“炁”，你慢慢地看那个“炁”，把那个，那是，实际上那是一个，也是个“九”，炁九嘛。 今天上午有的人讲，七返九还嘛。七不离九，九不离七，七去九回。那么把那一个字去掉，上面就还一点，搁那一点是个“无”，现在是简单的（简体的）一个“无”。那么上边一点，下边四点，你看一看，下边四点，上边一点，那是五炁朝元的东西。那么中国，我们国家的国旗，你看一看，五星红旗是不是像这个字？像那个五个点点，这是很清楚的。 那么这一个“體”，这半边是个骨头的骨，这半边是个豊节的“豊”。那么你看看那个“骨”，那么是中间一个“山”，上边一个太阳，下边一个月亮，那个“山”下边是月亮，“山”上边那是个太阳，还没有离开“山”。那一半边，离开“山”了，一半边，上半边离开“山”了，下半边没有离开“山”。这是“山”上一离开的话，“山”上有太阳，“山”下有月亮。正当午时，那么太阳在上，那么月亮在下。等半夜子时，那么月亮在上，太阳在下。它是昼夜循环，这就是一阴一阳。 那么这个“骨”，当然这个骨头的“骨”字，要是写到这个里头的“豊”字上边，那都看不见了。实际上这个骨头的“骨”话，你再慢慢地看看，上边是个“曲”，那么那个豊节的那个“豊”，上边是个“曲”，那个“曲”上下看，里头有三个“日”，三日二目，你慢慢地看。 这么上下看，是三个日头，那么横着看，上边一个“目”，下边一个“目”，三日二目，那都是五行的东西。那么中间有两个主人，两个“王”，那么有“王”就有“土”。那么八卦就在这一个里头，完全都加到里头了，一点都不错。那么下边是个“豆”，是不是？那个“豆”字上边有一道，下边有个“口”，下边有两点一横。那么两点一横，你看看像不像那个“道”字，两点一横，放到下边了。 那么“道”，那就是一阴一阳，那就是下边那个太极，那是后天的东西。那么中间那个“口”，就是无极，那个就是无极。那实际上把上边一道，下边一道，把那边一个“口”拿走，那是个离卦。上面一道，下边两点，下边又一道，那就是离卦，那个坎离嘛，那么坎离就在那里头的。那实际上那上边，那个大圈圈，是一个“田”，一个“田”包括两个田，一个国家包括两个国家，这是很简单的东西。 要说单讲这个东西，我记得25年以前，在南岳，七个省里那个气功大师，来了40多个人。那么第一个要讲出神，他出阳神了嘛。那么大家叫我去讲，我根本没有准备，那个意思就是，一来试试我有没有东西，二来是给我办难看。到讲课的时候了，还丢下五分钟。那么到上面我随便讲，就是拿“炁體”。“炁”我不讲，我光讲那一个“體”字。讲一个“體”字讲了三个小时，还光讲这个字，还不讲道。我们这个中国这个文化字，哪一个字都包括大道，没有道不成字，这是很简单的东西。 那么我刚才就说哩，这上边这个，这个五个炁，这个中间是一个“天”，那么这个“天”是怎么来的呢？我们朝这一站，是个“人”，这都不假嘛。我们把两个手一张开，就是个“大”，我们人朝这一站是个“人”，这么一张开就是个“大”，这个一点都不错。 那么我在江西龙虎山，我去不知道，这么往舞台上一走，又没有准备，随便就讲一个“火”。为什么我今天还要讲“火”？那么那个写一个“人”，“人”字两边点两点，是个“火”，是不？我为什么要肯讲那个“火”？“火”是自动的，“水”是被动的。那么，这个“火”里头有“人”，那么先有“人”吗，先有“火”？这个大家要分辨这个。 那么这个“人”在哪里？这个“火”在哪里？这个“人”字上边两点就是“火”。大家知道这个，为什么我要讲那个“火”？那么五行里头，金木水火土嘛，五行嘛，是不是？那么金木是两边、左右。天地，上边为天，下边为地。上边为离卦，下边为坎卦，左右这是后天的。那么水火相对，金木相对，那么土在中间，万物不离土嘛。但我们修大道、炼功，始终不要离开“土”，离不开“土”。今天上午我就说“能舍万两金，不舍一寸土。”这是最重要的。 张真人：我们今天时间不多，那么千里万里来到这儿来了，时间太少了，要是三两句讲清楚，是很不容易的。我只有跟大家（说），只要你好道，只要你把这一本书拿上，你慢慢地看，我先给你指挥看哪儿，看这一本书，《清净经》注解，看第二十三章，二十三章是“河图洛书”。 河图生，洛图死，先从生死上，下功夫。我刚才讲那个“火”，就是这个道理。我们生，人生，就从火里生；我们死，还是从火里死。从哪里来，从哪里去；从哪里生，从哪里死。那么这个事情，可以我跟大家说明。 那么这个“人”在哪里？过去有一句话“指鼻为我，你把我怎么样？你把我怎么样？”我是谁呀？指的就是我这个人。还有些人骂人说“你把老子怎么样？”指着鼻子，“你把老子怎么样？”这一句话，真真实实说出来实话了。那么老子就在这里头哩（鼻子）。那么老君，他属土，真土真意。生我们的时候，就先生这一点。大家都知道我们这个胎衣，有些人都守脐轮。守这个脐轮，我们是守脐轮，而不是守这个脐轮。 我们人生有三个母亲，大家知道有没有三个母亲？第一个母亲是谁，第二个母亲是谁，第三个母亲又是谁？生我的这个母亲，那么如果我这个脐轮跟我这个母亲脐轮连吗？不会连。如果我们把这个脐轮剪断，是不是把我母亲的脐轮剪断了呢？没有。是我们这个母亲，是生我这个母亲。生我哪一个？不是我这个后體，是生我先天那个母亲，那个母亲跟我这个脐轮连着哩。为什么我要说这？我先指挥大家知道这个。 好多人讲胎息，有些人讲胎息，哎呀，讲得很好。我们来看的话，太远了，越讲越远。为什么呢？实际上，天有五阳，地有五阴，那么阴阳两个五，合到一块儿，十大天地。十大天地合作起来以后，先生外衣。那么六祖慧能说过，那么“人生如同活牛剥皮，人死如同滚油浇心。”那么人生的时候，就像那个牛活着把皮扒掉了。 那么知道这个，才是生我们的母亲，先生这一个，然后先生两点。先生了两点，五官长全以后，下来以后，先结肾脏，肾脏就像一个藕，开一朵莲花，往上去。那么那个莲花就是心，心似莲花嘛，那么莲花一开开以后，它往上直接顶住天地。 另外一个大家看过《西游记》，那么孙悟空为什么叫“火眼金睛”？“火”、“眼”是一个事，“金”、“睛”又是一回事。火眼金睛，金属天，在“天”的那个金位上，站着哩，火眼嘛。那么我们刚才就说的这个“火”，这个“火”里头就有两个眼睛。先生那两个眼睛。 那么这个《炁體源流》，那么第三章“太极”，无极生皇极，皇极生太极，你把太极那个图看一看，那画得最清楚。 那么今天大家远地方来了，只要好道的同志，道友们都在，也辛苦。我今天已经说实话了。那么我十七岁出家，一直地到现在。那么七岁我就要出家，因为我们那儿唱小戏，唱那个板噹噹道情（地方戏曲剧种），唱的《韩湘子出家》。那么韩湘子是七岁，那么我也七岁了，他能出家，我不能出家？是不是？十二岁偷偷跑一回，被我父母找了一回。 后来跑了三四天了，才跑了四十多里路。还是我父亲的朋友知道了，在路上拉马车，把我送回来。最后咧到十七岁，真正地遇到师父，才正式的出家。那么出家就没有什么研究，就是直接，师父直接指挥着我。先指挥着我“八部金刚”，那时候一身病，练了还不到两个月，病完全好了。 大家刚才就说，我们这个“八部金刚”。现在“八部金刚”，就最近还不到两年，才一年多，好了17个癌症。那癌症，国家治不好的病，17个癌症都好了。但老年，三十年里，二十多年里（痼疾），好了就有一百多了，那就是这么一个“八部金刚”。那么明天要把这个《八部金刚》和这个《济世良方》（拿出来）。 我这个《济世良方》，现在我还有四个单方，四个单方，他们买两个，要给我三百万。三百万，不允许我拿这两个方子在中国治病。我说你别说三百万，三千万我也不要，我要你的钱做什么用？我有这个良方，能在全国要治好多少病？人家治不好，我用这几个方子，是绝对能好。那也不能说百分之百，是不是？能60%、70%那就很好了嘛。 因为他们给我介绍了几个病是癌症。第一次介绍六个，我治好三个。开头一治好，还不到二十天，把一个死了，还不到四十天，把两个死了，我说我不治了。那么政府就说，死了与你无关，都是他们介绍的。最后咧到了一年多，好了三个。最后一个，在两年以后才死的。最后咧国家又介绍了七个，我治好四个。一共13个癌症，我治好了七个，那还超过半数了。 因为我们要学这么一个东西，大家今天见面，也都要感谢这个黄剑同志，都要感谢他。为什么呢？我见了他以后，他把我详细的情况问一问，我跟他说一说，这么大家才见面了，才见面了，才有了今天吧。（鼓掌） 为什么要感谢他，还要感谢李辛啊，孙浩啊，还有徒弟们，他们准备了一年半，才把这个书准备出来。我准备了80来年嘛，没文化嘛，可是在这个中间哪有讲错的地方，请大家原谅，因为我没读过书，没文化，反正我就是按照我心里知道的（说），不知道的不说。毛主席有一句话：“不经过实践论，不经过调查了解，没有发言权。” 这是一个真理，你没有经过实践，都是拿这个书，靠着这个字。但我在哪讲课，没有底稿。为什么？不会写。大家提出来什么，咱们就讲什么。我知道了，我就回答。我不知道怎么办？我再回去把老师问一问，把老先祖问一问，这一句话在哪里，什么意思，跟大家再说。 刚才我讲了一个“火”字，大家要注意这个。这个人你到了慢慢地看一看，天上有五斗，有五星，地下有五岳，我们人身上有五官。“天有日月，人有二目。”这是书上肯说这个话。“天有三光日月星，地有三光水火风，人有三光精气神”，一点都不错。 我们先说那个“神”。好多人打坐，我问了十个、二十个、三十个，还是一样，都是这样子说。实际上我们看见，心里同情。为什么？我们明看着错了，你在这个会上，你敢说谁呀？你说谁错，谁起来马上就打你，是不是？社会上有真的就有假的，那么有一个高就有个低，那是肯定的，有黑的就有白的。这是避免不了的。那么有个真道，就有个假的。我们大道，我们道家有三千六百旁门，佛家有八万四千旁门，是吧，有你就有他嘛，这是必然的话。 我们今天看一看，这么多的炼功的人，为什么这么多的病，啥道理？我在海南，每一个月都要去一个两个，一个两个都找我，都是打坐炼功炼出来的毛病。死不得死，活不得活，可怜人。那么你去问老师教给你的什么功？那你可以问他，叫他给你治啊，他本人也治不了。因为炼功（炼）出来的毛病，神仙也难治。我经过（见过）好几个。我们主要先说出来这一个。什么问题？就是这个“火”。 那么你这么一看，一撇为“人”，这么一撇为阳，这么一捺为阴，我们这个“人”就在这里。那么“人”字两边点两点，就这两点，这不是“火”嘛？我们生，先生这个，先生这两点，实际上这两点不是一起生的。第一个月前七天生左眼，生左眼瞳人，生里头那个小仁。那么第六个月，第六个月从17到24，这个八天属少阴；那么第一个月前七天属少阳；九天属老阳；那么到24，这个八天属于少阴；那么到25、26、27、28、29、30，六天属老阴。 他这个少阴、老阴是在背后；少阳、老阳在前。后六个月才生右眼瞳人。这个要知道这个。人生，先生左眼瞳人，那么后生右眼瞳人。死，先死眼睛。眼睛一看不着，你不要治了，眼睛一看不着，多则三天，少者一天，再少点一两个小时。死，先死两个眼睛；生，先生两个眼睛。大家记住这个。 那么最近我们就先跟大家讲什么？先讲二十三章“河图洛书”。那么，大家没拿书的话，就不说了。拿着书，你把《炁體源流》，把那个二十三章找着。刚才我说的，我跟大家提出来，最要紧的，生，先从这儿生；死，先从这儿死。我们就从生死这个地方下功夫。 那么这个第二十三章，它是“河图洛书”。大家有书的话就拿出来，没有书的话，你就听我讲。这个是，河图生，洛书死。上面那个圈圈里头，那么它这个一点点，点错了。那么，1对9是个10，3对7是个10，中间有个5个白圈圈，对外边那个10个黑圈圈。 它这是中间是戊，外边那个黑圈圈属己，戊属阳，己属阴。那个己，就是一个守家的一个狗，守家的一个犬。那么四个口，上边两个口，中间一个犬，下边两个口，那就是那个“器”。大器晚成，这个“器”就是包括五脏，就是真正的大道。那个犬，就是个狗。那么黑眼仁里头外边，还有一个黄圈圈，它就是那个黄圈圈，那个黄圈圈属己土，我们外边这个眼皮属戊土，戊土在外，己土在内，它打个颠倒了。 那么这个下边这个《洛书》，它是斜着，南北东西为四正，东南、西北、东北、西南这是四隅。四隅属阴，四正属阳。每一个生数它都有阴阳，我们现在离开阴阳没话说，一阴一阳谓之道嘛。 它这上边第一句话，这也是《清静经》注解的最后了。那么“生死品”第二十三，“便遭浊辱，流浪生死，常沉苦海，永失真道。”那么这一共是四句，十六个字。他就写，这一个字一讲。“便者、是定要也。”必定的，我们一定要这个。“遭者、逢临也。”碰见了，碰上了。“浊者、下贱也。辱者、欺凌也。”受辱，受欺凌了。 这一句话就很难说。那么为什么受欺凌呢？我见过，那么自己的父母残废，㞎尿不接，那么自己的儿女为什么不伺候？为什么要雇个保姆？那么这个保姆是不是有钱的人？那么这个保姆擦尿、喂饭，受不受这个欺凌？你考虑考虑。所以，这个穷人受欺凌，就是这个道理。 “便遭浊辱者，是言人生在世，贪心不了，名利恩爱之中。”那么人大部分那么贪心，尤其是我们这个修道人，要扫除一切贪妄。既然有贪心，必然要除去。那么“种种波浪，但失陷处，必受五浊之辱也。”那么有钱的费脑筋，办工厂，也要费心血；没有钱的人，在家的话，出去打工啊，弄啥啊，也是黑明昼夜劳累，也要受苦。这就是脑力有劲，能养活千口万口；肩担有劲，只能养活三口五口，五口人都养活不了。人家脑筋有劲，人家一办个大工厂，养活几千人，上万人，这是人家脑筋有力。 那么我们这个修大道，也是这样子，但跟社会上不同。社会上要用心用力，我们修道不需要，大道不需要用心用力。原因在哪里？那么邱祖爷的大徒弟李道纯，他提过这个问题，“用心用力枉大功，不用心力道自成。”你考虑考虑。 有好多人打坐，我问得太多了，一打坐舌顶上颚，心意守丹田，用呼用息，这样子，那样子，对不对哩？我也说对，因为啥？因为我不敢说不对，是吧？不对，人多了就要起来辩问你，是不是？“善者不辨。”那么就是老子的《道德经》最后一章，“知者不博，博者不知。善者不辩，辩者不善。信言不美，美言不信。” 说的好得很，不可信，那个真正能相信的人，他没有多余的话，你看我的对了，你就要，不对了，不要。那么我也是这样子，你看着我说得对，那你就照着听；不对，你就这个耳朵听，那个耳朵出。反正我也不能说全部对，不过是一个问题。 道家，杀盗淫妄酒，是三百六十五大戒，前五戒，戒杀、戒盗、戒淫、戒妄、戒酒。不能打妄语，一个出家人不能说妄话。只要你跟我说一回妄话，一回可以，第二回我还能容忍，等到第三回你再跟我说，你说一百个实信，我一个都不信，因为你前两遍你把我欺骗了嘛。所以这个人说话，要给话作主，你能说，就要做。既然说出来不做，言行不一致，人家说，说话言行一致嘛，我的言语怎么说，我的行动跟我的言语要一致，这才是人。嘴里这样子说，行动另外一个样子，那就这种人不可相信。因为他说话不作主，这是一个重要的问题。 “流者、沉下也。浪者、事叠也。生者、河图也。死者、洛书也。”那么“流浪生死者，言人在世，迷于酒色财气。不知生从何来，死从何去。夫生仙生人之道者，河图而已矣。人生之初，秉父母之元气。”大家刚才我就说的那嘛，人生之初，秉受父母的阴阳之元气，而结一颗明珠。那么受父母的双方十大元气，才结这一颗明珠。 这一颗明珠，刚才我就给你说了，那就是左眼的眼仁，结这一颗明珠。好多人，那么到子时来了，都是捏住鼻子往上吸。是吸，怎么吸啊？我也吸过。那么把这个东西，那么子时一到，那么捏住鼻子往上吸，吸不上去是你的福，如果你吸上去了，那你这个病就不好治了。因为我吸上去了，最后咧先化黄水，从鼻子往外流，最后了化的黄脓，那个臭气难闻的很。但我会治病，我自己那么改了一年多才改过来。 那么吸不是用这个鼻子吸，也不是用舌顶上腭，用什么？就用这一颗珠。“一粒火珠入海底，炼干了四海的大水。”就这一颗，如同一颗豆子那么大的一颗小珠，那么入到海底，烧的龙王躲都躲不及，把四海的大水全部炼干，是用它来吸。那很简单，大家我们也要讲这个东西。千万你们不要用鼻子捏住再吸。你吸上去的话，你有了病，谁也治不好。因为我受过这种磨难，受过这种灾害。 是用那一颗宝珠，那个宝珠是谁啊？前面我们也说了，守观世音。“静守观世音，倒卷黄河上昆仑。”那你只要在那一静，万法归于静嘛。那么你一动，从哪儿来的？动从静中来的。那么清，是从浊中起来的。那么你动，是从我这个静中，那你只要在这儿一静，静不了一个小时，马上天气自动。 它一动，你就用你的静，在那个地方静，一静，那一颗宝珠就像神光，就像你们现在照相的相机，你往那一照，把一切的东西都往上吸收到你这里头来了。你洗出来那个相片，你拿火一烧，里头有血，你们都不注意这个。那么只要一照，把你的身上那个最高等的能量，全部吸过来了。你是不知道这个东西，有些人要照相，我一般的不让他照。你照的相多了，把你身上的东西全部吸走了。你不相信吗？ 那么它这就说这了么。那么上边这个，“结一颗灵明宝珠，名曰无极。”那一颗珠子，就是无极，别说无极，无极在天地以前。那么“得父母之精血，名曰太极。”得父母的精血，才生后天的五脏。那是，先天的五行生无极，后天的五脏生太极。太极属于后天。在上，大家知道这么？天一生壬水。大家都知道这个十天干吗？甲乙丙丁戊己庚辛壬癸，十个字。甲属阳，乙属阴。甲生乾卦，乙生坤卦。那么二木生火，生丙丁。南方火，那么丙火属阳，丁火属阴。 丙火生艮卦，丁火生兑卦。那么二火生中央戊己土。那么土不生四象，不生八卦，它包括四象，它这个土分四季，它分四位，丑土、辰土、未土，亥土，它是分这四个土，包括四季，它能掌握这个四大天的真气，它把这四大天的真气能团结在一起，归回中央。它是这个戊，它不生卦。那么戊土生二土，生庚辛。土能生金嘛，生到西方庚辛金，土生金嘛。那么庚生震卦，那么辛生巽卦。那么二金生水，生北方壬癸水，那么这个壬水属阳，癸水属阴。壬属白虎，癸属青龙。 壬生南方离卦，南方离卦是壬，那么癸水生北方坎卦。那么壬癸和坎离两个对起来。大家都记着看书，坎离不是心或肾，这个你掌握住，坎离不是心肾。坎离就是，天地让位，坎离当家。大家记住看书，以后不要把离卦当心，坎离不是心肾。这是吕祖爷说的，也不是我说的。 那么“天一生壬水。在上生左眼瞳人。”这就跟我说的那个“火”，是一样。在上，先生左眼瞳人，在下而生膀胱，膀胱属六腑，膀胱属肾脏的阳经。脏属阴，腑属阳。那么“地二生丁火，那么天一生左眼瞳人。”那就你先把天地掌握住。那么“地二生丁火，在上生右眼眼角。”右边的眼睛眼角，属火。 那么，天一生水，地二生火，那么水火既济嘛。有水就有火，你记住，那么左眼眼仁属水，右眼眼角属火，水火两个东西。为什么先讲这一卦？先叫你知道天在哪里，地在哪里。天是左眼，左边，地是右边。以后你看书弄啥的，你不要天在上边，地在下边。 那么“地二生丁火，在上生右眼眼角，在下生心脏。”在下边生心脏，反正左边属阳，右边属阴。凡是属阳，都在左眼这边。属阴，都在右眼。那么“天三生甲木。在上生左眼黑球。”左眼的大黑球，生左眼黑球。“在下生胆”，那么胆也属阳。那么“地四生辛金。辛金属阴。在上生右眼白球。在下生肺。”这就是地所生的。那么白眼球属肺。那么把眼睛里头的东西你先掌握清楚。 “天五戊土”，天的第五，属于戊土。“在上生左眼眼皮”，在上边生左边那个眼的那个外眼皮，包括五行在内的。“在下生胃”，胃属腑，腑属阳，脾属阴。那么地六看见了吗？“地六属癸水。在上生右眼瞳人。在下生肾。”在下生两肾，这就是五脏五行的话，很清楚。 “天七成丙火”，那么地二是丁火，天七是丙火，在上生左眼眼角，在下而生小肠。小肠也是心的那个，心属脏，小肠属腑。“地八成乙木。在上生右眼黑球。”“在下生肝”，在下的时候是生肝，肝属阴。“天九成庚金。在上生左眼白球”，这么才生出来左边眼睛的那个白球，“在下生大肠”。“地十成己土。在上生右眼眼皮。在下则生脾脏。”这就是五脏里头的生克变化。 凡是脏都在右眼，凡是腑都在左眼。那么天在左边，地在右边。为什么我要先讲这个？那么在这个眼睛里头，包括了有五脏。那么天是从内往外生，那么地是从外往内生，这么一内一外，一里一表。那么这个图，你慢慢地细看，这个图比这个书上讲的还明白，你把图看清楚，那你修大道一点问题都没有。 “以全周身三百六十五骨节。八万四千毫毛孔窍。莫不由河图而生。生凡如此。生圣也如此。夫人死之由洛书。”人死从洛书上找，原因在哪呢？为什么年老人眼睛花，耳朵聋，牙落，头发白？为什么现在老人都得高血压？那个高血压是普通的东西，每一个人都到老年的话，都要有高血压、糖尿病。那么你吃药的话，你只要吃西药，从今天开始你一直吃到老死为止，那么你一天不吃血压又高了。 那为什么这个八部金刚会能治高血压、糖尿病？那么你考虑考虑。因为这八个动脉，那么最要紧的就是那一道冲脉。冲脉和带脉。背后有督脉，前面有任脉，中间是一道冲脉，上下直冲。冲脉和带脉相连，带脉在这一周围。那么，上边有阴维脉、阳维脉，下边有阴跷脉、阳跷脉，有督脉、任脉，一共八个脉络。那么八个脉络内炼，内炼可以成仙得道，可以超脱了死；那么外炼，可以健康祛病，延年长寿。也就这一点个东西。 那么这个八个动脉，张紫阳研究的八脉，那么白玉蟾把这八个脉络又加到外边，外边加了八个动作，八个动作就代表人身上八个脉络。那么你不管哪儿有病，你把这个八个脉络八个气结凝结在一起，你跟病打，只要在你身上的病，把它一定能打出去。那打出去很明显，有时候你没有病，好像没有病，你一练，哎呀，这个病就起来了，那你就继续打，你不要停。我们用药也是这样子。 所以我们在下边，这个洛书。洛书的意思，大家都知道五行相克，顺者为生，逆者为死，那么从中央土，去克北方水，那么北方受害。在天上有五星，在地下有五方。那就北方受害，北方有灾。那么水去克南方火，是南方有灾，心上有病，那是一定的。这个东西也可以说，也没有啥意思。那么五行相克，那么五脏五行都要受亏，那么身上一受亏，那你必然有病。那么有病，好了，你还能治一治；不好的话，那就没办法治。因为炼功出来的病，医生没办法下手。 那么这个底下就是说，那么最后的，有两句诗，我们就看看是谁作的，题了四句词。那么第一个是薛道光，薛道光人家是南三祖，和尚薛道光。张紫阳访道，访了三十年了，最后咧他碰见北五祖，第四祖刘海蟾，把这个道才传给张紫阳。那么直到白玉蟾，十三岁就出外访道，访到四十三岁，访了三十年。他有两句诗，在哪么，南方那个玉蟾宫，那几句诗里头看着很悲惨，因为钱也没有了，到处也受困难。 他这个薛道光，这个几句诗是这样子题的，“苦劝人修不肯修，常沉苦海为何由。百年富贵电光灼，”活一百年就如同那个电光一样。这个电光，还明一下子黑一会儿，有一个人就说如同石中之火，那火的光焰就像那个石头，那么一碰，啪，就那么一点点光，那比电光还快，如同电光灼。“口气不来万事休。”一口气不来，什么都没有了。 那么翠虚真人也提出来了，“老君清净度人经，指出身中日月星。生死死生由自主，佛仙仙佛在心灵。”人的生死死生，都在乎一个心。为什么？心为祸本，心为道宗，你若是作恶作祸，也是在心，那么你成仙成佛，也在心。就看你这颗心怎么用。 这一本讲完了，我们继续来讲下边。 黄剑：课间休息时间，师父，休息十五分钟。 张道长：啊，休息十五分钟。 张至顺真人讲解《炁體源流》｜地篇｜正式版 张真人讲解炁體源流｜地篇 **黄剑：**我们很幸运，能见到这样一个很真实的一个人，我甚至可以问他那种问题，我觉得这个棍子都会打下来的问题，他都很诚恳的告诉我他的想法。我觉得这才是修行修到最后，我们怎么去做一个最真实的人，真人，这才是最高的一个境界，至少做人的方面。 很有幸，师父一直在强调，这个大家千辛万苦赶到这边，时间最宝贵，他说累他一点点，他就累一会儿，不要紧，所以他希望跟大家做更多的分享。事实上我觉得，大家也别指望就靠今天能够，能够悟到什么大道啊，什么之类的，很多高深的，能够，能够读懂这个道家最高深的玄机，没有这样的、这么简单的事情。 其实我觉得大家已经非常幸运，因为在座有很多老道长的弟子，比如说前面这个胖乎乎的刘德会师兄，他就知道，站起来认识一下大家，他也是我们的针灸医生，非常棒的针灸师。当年医道会的时候，他为了拜师，每天晚上开完会跪在师父的门口，跪了一个通宵的跪在那。 可是呢，第二天、第三天，我们每天开会看他都筋疲力尽的那种、好无精打采的，我说你这么没力气跑来开会干嘛呀？后来才知道他都在半夜，都是跪在师父门口呢。结果后来被那个小慧师兄批评了，你跪得这么角落的地方，师父出来也看不见你啊。按照刘师兄的话，是跪得他裤带都松了，但是终于敲开了师父的门。所以呢，其实他们跪的这么辛苦的拜师，师父教给他们的东西不会超过今天说的话，不会超过今天说的话。所以如果你懂得珍惜的话，我觉得你应该今天能听到很多很多的东西了。 至少你可以看到一个一百岁的人，可以站着、很认真的、把他心里想的东西告诉你，很诚恳地告诉你。因为我们很难站在一个一百岁的人的角度去想象，这个时间是多么的宝贵，像手中的沙、手中的水，你已经很难抓住它了，所以呢我们下面，我们继续抓紧时间。师父说他现在讲一段，讲完以后，然后回答一些大家的问题。师父，继续加油哦。 张真人：大家要尊重这个时间，这个光阴是最要紧不过，快得很，一转眼就是几十年。刚才这个黄剑提出来的，他们介绍一个，啊，从远地方来的，八十多岁咧。那么来的目的要干什么？这么远，噢，受这么地波动，不过是这有些话告诉大家。这是道祖爷说的，八十岁，八十岁遇正道，俱能成道，一百二十岁还可以返老还童，这是人家道祖爷说的，他不说瞎话。 关于这个男和女，大道不分男女，原因在哪儿呢？那么道就是一阴一阳谓之道，那么男女就是一阴一阳。我们这个女，也是父母生的，那个男也是父母生的。不过是有一个问题，如果父亲的炁到得早，母亲的炁到得后，那么，母亲这个炁，阴炁包阳炁，那么生下来就是女孩子。那么母亲的炁到得早，父亲的炁到得迟，那么阳炁包阴炁，阳炁在外，阴炁在内，那就生下来就是男孩子。男女就是这一点分别。 男女有分别，男女虽然不同，神、炁无二异。这一句话，是七真里头孙不二说出来的。孙不二就说男女，好多人说男的怎么修，女的怎么修，我们道家没有这回事。我知道他们北京有几个那个大学的那个老师，编一个《女丹经》。那么你要知道，我知道在西安一个26岁的一个高中毕业生，《访道记》，叫我去看，我说我不看你的书，你这个书的名字，他起的这个书名字，我就问他那两个字什么意思，我把他问的满头大汗往下流。我说：“你今年28咧，有你这个书在，你知道你害死了多少中国人，你知道不知道？你访得没头没尾，到这问几句，到那问几句，你编来教后边的学你，学个什么？ 反正你们看书，是道祖爷的原书，你只管看。不管他是什么人，大师、二师编的这个书，这儿一部分，那儿一部分，少头缺尾，不记完全。那么我也没文化，但我不编书，但我这个《炁體源流》，我没加一个字，我没减少一个字，或者打错，这是肯定有的。人家的原文原书你给人家改吗？你有多大的力量？你超过祖师爷的力量吗？不可能。因为我刚才说的这个意思，让大家看书，看一个正正规规的书。 那么一些书一沓厚这么，你看三年也看不完，你怎么记？这有一句话说得一点都不假：真传几句话，假传万卷书。那么《道藏》里头这一藏，那一藏，这一部，那一部，是道祖爷的哪一个人说的，哪一个人说的，在哪一藏，都有。我这个书对了一年半，才成功。 今天我跟大家讲，刚才讲的人生死，生死嘛，讲《河图洛书》嘛。我讲的那个“火”，“生在火中生，死在火中死。”就是代表那个《河图洛书》。人先生二目，死先死二目，这你记住。左边为天，右边为地，天地里头让位，天地不当家，坎离当家。坎离是后天，代表了天地。因为我给你讲这八卦五行，我先教你这个五行嘛，生这么天干地支，都生出来了，所以我先给你指挥这，你弄不错。 那么这回讲，讲什么？讲《太乙金华宗旨》。第一章，“天心第一”。第二章，“元神识神”，要知道。什么是元神，什么是识神，也要知道。第三章，“回光守中”，千言万语不如守中。那个“中”可不是“中间”的“中”，那是中宫天心，那是老君爷在那儿住着哩，先指挥这个。那么这第一章，天心第一，先知道位置。为什么非要指出来天心第一位？不管你佛教、道教、儒教，离开天心，你想成功皆不可能。 因为你离了那个位，离了你转世投胎原位的东西，你没离开那个胎息。胎不离息，息不离神，神不离炁，三个东西谁也不能离开谁，三个东西才成。有日就有月，有火就有水，那么中间水火都有，日月都有，离不开土，离不开土。那么我今天说的话，就是直接给你指挥，天心第一，就是我们人身上的真土、真意，就在那儿。生就是在那处，在上为金鼎，在下为玉炉，在地为炉，在天为鼎，天地的中间日月都有，我先给你指挥这个天心。 那么“天心第一”，“吕祖曰，自然曰道”。这，多简单，在《太乙金华宗旨》上边，就是说的这么……，自然。大家都知道，道法自然。既然知道道法自然，为什么不去自然呢？为什么要这样子做，那样子做？把人闹得心里不得安然，那么你心里这个，比如我们练这个八部金刚，你要是用气用力，那你越用越差。你自然吗？不自然，你要一用心，就把身上的这个五脏的气控制了，它不自由。它本当是自由的，那么你一用心，把它控制了，它不自由嘛。心在莫言心，意在莫思意。心本当没动，就在这儿。意，生你就在这儿，死它才动。那么你要知道这个真东西，它不动。 为什么老君爷叫，叫你学婴儿？那个婴儿没出世，他会做什么？你们考虑考虑。那么在怀里他不成胎，他不成体，那他会做什么？能会叫你这样的动，那样的动，这样子炼，那样子炼吗？不可能。所以那么，讲大道不离目前，大道不离身，不离目前。离开目前，谈玄说法，就是背道而行。那你就是违背了大道了，你背着道，你越走越远了，最后哩走到死亡，谁都是这样的。 那么“天心第一”，吕祖爷第一句话就说，“自然曰道，”自然就是大道。那个“自”，你考虑考虑，要知先天真无极，把头装到肚子里。头装到哪块？头说的是上边。那么这个自己的“自”，装到身体里头，那个身体里的“身”字，你看看里头有没有那个“自”，自己的那个“自”？你慢慢考虑考虑那个“身”。 你看，那不过就是底下加一个腿加一个撇，那是个走路的一个人哪。那么一个脚抬起来，一个脚往（前）朝着往前走，那就是那个本身的“身”。“日藏月内丹作母”嘛，这是我做的诗。日头能藏到月亮里头，“月”能藏到丹经里头那个“丹”。“有人识破天外天，我把日月一丹担。”那么日月，我拿这个“丹”字，就把你拿走了，那个“丹”字两头出来咧。如果那两头不出来的话，那不是个月亮的“月”吗？月亮的“月”里头有日，日头能藏到月亮里头。这个《清静经》注解都有，有这两句话。 那么吕祖爷说“看破红尘早悟空，太阳隐在月明中。”那么韩湘子他咋么说的嘛？他是这样子说的，那么“虚心实腹悟铅光，月里分明见太阳。”那么一个太阳藏到月亮里头，他再说，月亮里头见太阳，修性不离命，修命不离性。你炼日光，日光的背后，黑色就是月光，黑色的前面发亮发白，那就是日光。 你炼月，日光在前，你炼日，月光在日光的背后。那么说明你炼谁都离不开谁。刚才给你们讲的这一个，白眼睛里头有黑眼仁。那不就是日月两个东西吗？人身上有两个天地，四个日月。你不知道两个天地四个日月，你到什么时候都修不成。 那么他这是“天心第一，自然就是道”。那么上边，我再说一说，那么谭长真，七真里头有个谭祖。他在这个《金华宗旨》上边起到一个序文，他就，前后都不说了，中间那几句，那么就是说他说的，“千经万典，千经万典，”不管多少经，多少典，多少道藏，那么“千佛万祖，千言万语，千佛万祖，千言万语，就是叫你知道性光。”这么多的书，这么多的经典，就是指挥叫你知道一个性光。那么性中间有光，光有性。 那么六祖慧能他就说过这，是不是？那么你两目之光，那是元神真意之体。就像我们这个电灯，外面是个外壳，那么里头有什么？里头有两个东西，有一个火电，一个阳电，一个火线，一个零线，那么一个阴，一个阳，阴阳一对就会明。我们本身上的阴阳，那么合在一起，你说它生什么？社会上的男女一配合，生下后代。 飞禽走兽也是一样，阴阳一配，它就留下东西。我们本身上的阴阳合在一起，它不长胎吗？你考虑考虑。所以，人乱动、乱说，这么越说越离道越远。道无名相，道没有什么名相，又没什么可说的。无形无声，无声无色，什么都没有，是个空空荡荡的，没法子说。 就说“一性而已，一元神而已。”这个书上面就说，那么大道没有什么可说的，无形无相，无声无色，无头无尾，那么就是一性一元神，一性而已，一元神而已。那么“性命不可见，寄之天光。”性命你看不着，那么天光，寄之天光，就托给天光，“天光不可见，寄之两目。”它这个就是给你指挥清楚了。 “性命不可见，寄之天光；天光不可见，寄之两目。”刚才我说的谭长真说的什么，就是叫你知道性光。那个性光，他就说了么，你炼性也是炼的性光，你炼命也是炼的性光，你采药也是采的性光，你修大道，成仙得道，也就是一个性光。谭长真就是这么几句话，我背书背了几十年，看了多少遍，看了八九十遍了，心里糊里糊涂的。就他，从这两句里头提醒了。我把这两句弄明白，我看书，大部分才知道。悟开一个日月合到一块儿是“明”，日月上下堆着是个“易”，那是很简单的。那么悟开一个“明”，悟开一个身体的“體”。在山东住了一年，就悟开那两个字。从那两个字，才慢慢，慢慢才走向大道的。 那么以前修这么快，人问我怎么修的？不知道。人问你修这么快，不知道。那么我修前后连出家，带炼到那个高层的话，才八个月。前两个月还祛病，师父还没说。最后哩，才炼了六个月，六个月我超过他们三十年。你考虑考虑。那个时候年轻，小。心，意志坚决，那把什么都忘掉了。那么就从那会儿，在快要登空，快要变化的时候，就在这个时候败坏了。那么修道的人你总记住，不要过劳，劳动伤丹，小了伤丹，大了伤命，这一点都不假，就因为那个时候我才明白了。 那么今天，那么再跟大家说的这个命，“性命不可见，寄之天光，天光不可见，寄之两目。”接着“古来的仙真，皆口口相传，传一得一。”他这上边最要紧的就是说的这个“天心”，“性命”，“性光”。这是前几句就是说的这个东西。底下就是说的这个谁传谁，谁传谁，南北两宗，一直地到今天。“凌替极矣，滥泛极矣。”这两句话，因为我们考虑都是中国人嘛，那么明明知道看着走错了，错了你还不敢说，你还不敢拦，是不是。 我的对着呢。那好，你的对。因为我们在这个地方，大家这么千里万里费尽心血来，是不是，我耽搁两个小时问题不大，那么要解决很多个问题，是不是？那么你看人家几十岁了，从东北这么大远路来的，来了就是为了健康，再多点就是为了想逃脱生死。刚才我也说了，八十岁遇正道俱能成道，一百二十岁还可以返老还童，那一点都不假，祖师爷的话他不会去说假的。 那么到今天为止，我们的大道基本上，算消灭的基本上算没有了。我们就今天跟大家见面，也都感谢黄剑同志，把这个大道从海底拉出来。今天，才真正的大道见到日月了，才有了今天。因为这个事情，我知道的我说，我不知道的我不敢乱讲。你错讲一句，你要知道害死了多少个人，多少中国人。上边有我的父母，下边有我的兄弟姐妹，我害谁啊，都是中国人。我们都是一个天地的父母，一个日月照临的兄弟姐妹，是不是？我今天所说的，都是我的实际经过，不经过实际，我也不敢解释。 那么“千劫难逢，受者一时法会。皆当仰体许祖心”。我们现在这个大道，许祖在社会上传播了三十年，教给他的徒弟，他的徒弟又传了几十年，最后哩失败了，最后哩失踪了。这个《太乙金华宗旨》是从什么时候，从清朝康熙时候的，吕祖爷亲自奉旨下来在康熙传道。原来是叫《太乙宗旨》，后来吕祖下来传道，又加了个“金华”两个字。 他说的这个“金华”两个字，直接说明我们生的时候这两个东西，这是两个金丹，这是两个生的是先天的金丹；后天的金丹，是从后天下手：炼精化气。实际上炼精还精，炼阴精补阳精，阴跷穴藏的有先天的真炁，那么阴精一合到一起，它就要作怪，作怪它就要动，它一动，它发出来这个精，人容易烧，容易作怪。往上通肾脏，肾脏再一通心脏，心脏一知道，天光就知道了，天光一知道搁这儿下来，有真意就把它收回来了。 那么，不经过这些东西，人（家）说上等人固穷，下等人伤命，就在这里。下等人一得到这个东西，他必然要去找男女，男的找女的，女的找男的，这是必然的，社会上的事情。那么上等人，你要给他收，炼回来。你不炼，那好多人，我不炼，我不伤。你不伤，这么东西一长，散到外边，你一天一天的阳寿，也是散，也是照样的散。所以他一动，要把他收回来，炼。 炼在哪里？他们现在，你要从下元炼，炼精还元精，炼元精还元炁，炼元炁成金丹。金丹炼成，你活个三百年，五百年，一千八百年，都不准走呢。但你不好，说坏，阴丹最容易坏。那么不要叫它坏，从阴丹再转一个，第二个阶层，炼成道胎，炼成道胎以后，那就不会生死了。但你还要炼神，道胎还要炼成神，炼神还虚，到那时候才能飞腾，变化。光有道胎不能飞腾，但你在社会上能活年代，不会再死了。这是第二层。第三层，要炼神还虚。 但我说这一个，我们是最高上的一层。刚才我们给你，为什么要讲这个天心，讲那个河图洛书？我们先从生死上下功夫。老君爷就在这儿住着，我们为什么要感谢许祖？许祖这一句话说的正确：“在人伦日用间，立定脚跟方可修真悟性。” 在人伦日用间，立定脚跟，脚跟扎稳当，不要动，方可修真悟性。我就从他这个里头，才感谢许祖。“人伦日用间”，我想日用，不是用两个眼睛，就是用心脏，结果他们给我拿一个《麻衣相书》，还是在两个眼睛，还是在这个地方下功夫。那么他这底下就说，把这个天心的位置给你指定了。 “然后再细为开说，太乙者，无上之谓。”太乙那么是最高无上的丹诀。“丹诀甚多，总假有为而臻无为，非一超直入之旨。我传宗旨，直提性功，不落第二法门。”那么他这就是说的嘛，丹诀多得很，就从有为而臻无为，这是从有到无，无中生有，有中转无。 那么“所以为妙，”最高为妙，“金华即光。”他说的这个金华就是这个光。那个(灮guang)你再看，那么上面是个“火”字，下面打个“几”字，这个人都不认得这个字。那么我跟他们讲过，那么这个“火”，光不离火，光没有火不生光，那么写这个“光”字就认得了，那个“光”字，中间一道，两边两点，中间这么两点，下边一道。 那是什么意思？那是一个“丁”，往上的一个“丁”，顶两边，倒坐天门嘛，那是个丁火，两边是两点。我为什么给大家讲那个“火”？那么许祖就说，我们在人伦日用间，在这两个眼睛的中间，立定脚跟，方可修真悟性。我把这个事情给大家解释明白。 “金华亦秘一光字”，最秘密的这个“光”字，没人说，最秘密的就是这个“光”字。“在内，是先天太乙之真气，水乡铅只一味。”那么这里头东西，就是水中金，又叫水中铅。人炼就是铅、汞，铅汞就是阴阳，就是日月，就是性命，就是神和炁。大家都要记住这个“光”。刚才我就是说的这个“光”。 这个光……什么时候由黄剑同志能把，那么《清静经注解》二十三章，完全讲得明明白白 ，又把这个《太乙金华宗旨》十三章完全讲清楚了，再把这个博客打出去，你不用找我，你就找这个书上，找他这一个讲话。那么《清静经注解》二十三章，都讲了。《太乙金华宗旨》十三章完全讲明白了。反正只要说是我讲的，我把道祖爷的事情（讲了）。那么你说的，你说出来，我再讲出来。 那么我就说，感谢天地，七八十年不明白的东西，在两个月以前全部明白了。这么我就跟大家说。反正你们没曾看书，先把书放那儿，把手洗一洗，自己烧根香，你把他坐到那儿，稳稳当当的，你不要在那儿嗨儿（方言，那里）头上腿上放住，不要放到腿上。上边有老君爷的像，有吕祖爷的像，有灵官爷的像。 为什么我放这三个像？任何人的经书超不过老君爷。那么吕祖爷时时都在社会上。那么灵祖爷，不管你男的女的，只要有一心向道，有一分的道心，他有三分的保护，你有三分的道心，他立即保护。所以你看书，你就认为你这安安静静，你慢慢地看，你脑筋里头、背后会有人给你指挥。 因为我把这个两本书讲的清清楚楚，为什么？我说，现在全国这么多人都求道，遍地金莲一起开，就在目前。万朵金莲啊，无数啊！只要你大家认为这个书是正确的，张道不说瞎话，我知道的我说，我不知道的不说。但我说的只是老君爷、老祖师爷说明白的东西，他不敢提明，他就比方这个“金华”，“金华”就光，“金华”就是光。一阴一离，真阳之气就是水中金。只这一味此也。 “回光之功，全用逆法。”人生，从生到死，都是往外看，没有人往内看。那么这一句话说多清楚，往外看为离，往内看为坎。坎离交媾就是一周天，那么阴阳一交换，就是一个周天，在什么地方？在天心。天心就是，玉炉也是它，金鼎也是它。有天就有地，有地就有天。有坎就有离，有离就有坎。 那么你还上哪里找啊？反正我给大家在这个书上，提前，时间太短。那么你也，只要你好好地炼，不要乱跑，就在天心下功夫。你跑来跑去，你跑到哪儿？老君爷没有路，你说上到三十六天以上，他就是三十六天的主人；你想到北京，他就是北京一个主人嘛；你想到西天极乐国，他是极乐国的王子，你要叫他上哪走？老君爷没路走，无路之路。那么我们修有一个方向，有一个路，你跟着老君爷，你听他的指挥，他会把你带到最你理想的位置，不要乱动。 天心，“注想天心，天心居日月中。”那么人要想打坐，就在天心注想。天心居日月中，刚才不是说日月都知道了么？日月是天地的灵魂。那么在这个日月的中间。“黄，中黄，日月中，”那么《黄庭经》说的，那么，我们道家有个《黄庭内经》、《黄庭外经》。“寸田尺宅可治生，寸田尺宅可治生”，它这个底下，“尺宅面也”，尺宅就是说的面，“尺宅面也，面上寸土（田），非天心而何？” 就是说，那么七尺之身不如一尺之面，一尺之面不如三寸鼻，三寸鼻不如一寸心。它指挥这个天心，天心就住在日月之中间。那么寸田尺宅嘛，可以指说能知人的生死。这才是，说这两句就是指挥你这个天心的位置，天心的位置就在这儿，左边为日右边为月，在这个日月的中间，也就是天地的中间。“非天心而何？”不是天心是什么？ “方寸中具有玉罗萧台之胜，玉京丹阙之奇。”那么这一个说的这个位置，就是元始天尊住的玉京山，住的玉京山，在玉京山给天上的高仙讲经说法，就在这个地方。“玉京丹阙之奇，乃至虚至灵之神所住。”最虚、最灵明、最巧妙能变化的这个神，在这儿住着。儒教说“虚中”，孔圣人把它这个地方叫“虚中”，那么释家说“灵台”，道家说什么？道家说“祖土”，说我们祖先的土地，又叫“黄庭”，又叫“玄关”、又叫“先天窍”。 他把这一个地方说了四个位置，叫祖先的土地，又叫黄庭宫，又叫玄关，又叫先天窍，说四个位子。那么张紫阳把这说了一百七十几个样子，那么南极仙翁就批评了张紫阳，说你说了这么多，群众哪能知道你这么多的位置，你说的位置太多了，太复杂。说南极仙翁把张紫阳批评了一顿，你说的位置太多了，别人没办法下手。 “天心犹如宅舍一般”，这个天心、这个位子就像我们住的这个宿舍，住的这个宅舍一般。“光乃是主人翁”，我们这个光就说是这个宅舍里的这个主人。那么最后讲到这个光上面。不过是……光，刚才我说性光嘛，炼性也是它，炼命也是它，采药也是它，成仙得道还是它，这是许祖说的，这不是我说的。 那么说明性光，这个光就是药，药就是心，心就是光。那么心就是光，光就是药，药就是心。那么你们要记住这个，我们这一点灵光里头，采药也是它，炼性也是它，炼命也是它，你要把这个记清楚。为什么要指示这个，让大家成仙得道，你不要乱跑。 在这个时候，我可以公布一下，公布什么？大家都来找我，我也不是什么，我不是平常一个人嘛？那么我现在常住就是江苏南京茅山乾元观，那是我常住的地方，另外一个，西安八仙宫是我常住的地方。另外一个宝鸡那么钓渭镇烽火台万圣宫，是我住了六十年的地方，那是我常住的地方，你们再找的话不要乱跑，你跑来跑去把钱也花了，浪费了也找不着我。 反正你这三个地方，你问，他们都有电话，你不管问谁都可以，我现在跟大家宣布，你们来找我不要乱跑了，乱跑浪费钱。有的有钱，那没钱的呢，怎么办？上回一个人找我，手表也卖了，手机也卖了，痛苦不痛苦。没吃的没啥的，是吧？你不要乱跑，找我就在这三个地方，你打电话都可以问。我现在跟大家宣布，我就是常住这三个地方，我哪里也不跑了。 那么，回光“但故一回光，周身之气皆上朝。”只要你这个光一回，光回祖窍万神安，只要我们的这个光回到原来的祖窍，周身三百六十神，阴神全部都归，你不要乱跑。那么只要一回光，全身的炁全部往上跑。 “如盛王定都立极，执玉帛于万国；又如主人精明，奴婢自然奉命，各司其事。诸子只去回光，便是无上妙谛。光易动而难定。”我们都说一打坐，那个无数的头绪都撞上来了，可是你要保护你的正光，不管他千言万绪都撞上来了，你不理它。变得好的让你爱，变得不好的吓你，你不管它什么吓你，变大蛇大虎，你知道是个假的，你把你的心稳定，你把你的光掌握好，那这个光一点一点的会大，一大，就把这一切的东西全部杀掉。 杀掉以后就剩一点儿个亮光。那个光就像一个玻璃一样，透白刷亮。那么这个女的，可能带一种紫色、黄色，那个光是你的正光。你保护你的正光不动，那个正光里头杂光事情多，你保持你的正光，直接定住它不动，他一点一点的起那个……你越静这个光越大，光越大，把那个杂光完全吃掉，光剩下那个静光。等你那个静光静得久，你不知道自己在哪里。如果外边要来个人，你那个光就发现了，就像看电视一样。那个电视机里头一按什么东西都出来了，它出来个什么人你知道什么人，哪一天要来，你提前知道。 甚至于，早知三天事，富贵万万年。那么你提前的事情你提前都知道，你不至于伤害。因为那么人都问我，你知道吗？多少知道一点。那个时候炼功，是正确的，三年以后要提前什么东西，提前都知道。为什么呢？那么有经验了嘛。那么现在呢？现在不行。为什么？你别说打坐炼功，我们连命都顾不住，你还能炼功吗？你考虑考虑。那么今天跟大家说，因为我这三个东西我托不出去，我心里放不下。 因为有一回，喝一点水，中了毒了，吐得要死，我说我死了怎么办呢？我这些东西怎么办？我死了以后，我不能跑到地府里给鬼看病去嘛，是不是啊？那么我学了这几十年的东西，这么好的东西没有托出去，我这个单方你们谁拿着谁会看病，这是最要紧的。那么你把王清任的《医林改错》再买一本，你有了这两本书的话，超过你三十年的学习。为什么？那都是经验的良方，一百个能治好六七十，这里不说。另外这个大道，那么我十七岁出家了，那么光听老人说，光听人们经验，我也多少知道一点，所以我把这个东西也要托出去。这个八部金刚，是从我手里才公布到社会上，那我们道家都好多人不知道，现在群众都知道了。 那么不管你几十年的病，练不到三个月都好嘛，这都是实践的东西。你们回去你只管把这个八部金刚练一练，不管你有老人父母，他有什么病，你叫他练，练不上三个月自动就会好。那能不能百分之百，那我不敢保证。反正最好也要是百分之七十八十以上，都能会好。 我今天说的这个光，“光易动而难定，回之既久，此光凝结，即是自然法身。”你这个光能回得长远，久守不动，它自然而然结胎，自然而然成道。那么我问了很多人，都说炼功。那么可能我问的多少人，大部分都是这样子，不要说你们，连我们道家也是这个样子。舌顶上腭，意守丹田，用这气那气，这样子气那样子气，又是肝气啊，肝气属心，转心脏，心脏转脾脏，这样子转那样子转，那你只管转嘛。你在地狱里找路终究是地狱里，你在天上下功夫，你不找路就是天上的路。 反正总的来说，我跟大家说，只要你炼，知过必改嘛，就怕我炼得好着呢，那你就炼得好着呢。我说的是我的事情，你炼的是你的事情，炼好炼坏最后就知道了。最后你了尾的时候，看你怎么走，看你是害病走嘛，是成仙得道走，你没走以前你都知道，什么时候什么时候我要走了，怎么走？跟你说话：我走啦。啦字还没说完咧，气就断了。要是这样子的走，那么走和走不同。 那么“心印经所谓，默朝飞升者，此也。金华即金丹，神明变化，各师于心。”这个心是道心，以道心观天心，刚才是指挥的是天心，指挥的那个位置，指挥的那个地方，你不要离开那个地方。现在是以道心观天心，久守不动，自然结胎，自然成道，大道出于自然。现在么我跟大家说的，如果黄剑同志这么常……，又把这《金华宗旨》，连那个《清静经》，把这两本书公开的宣说，你只要能听见，你就看书，你看哪一个书你都懂，都明白。 “金华即金丹，神明变化，各师于心，此中妙诀，虽不差毫米，然而甚活，全要聪明，又须沉静，非极聪明人行不得，非极沉静人守不得。”那么你在这炼这个的时候，你心乱，心贪这贪那，你不要炼。那么你一炼就走火入魔，叫你心静，那么你心不静你一炼，就容易出邪。因为你本身邪着，那个阴神当家，元神不当家。那么自然而然的，有时候阴神它要静，因为阴神背后是元神，元神的前边就是阴神。一转眼就是阴神，一转眼就是阳神。阳神一当家，它是最安闲，它不爱动，它最喜欢快乐。 这个“天心第一”就给大家直接指挥天心。天心就在两个目的中间，就在鼻的上边，直接守胎息。这是刚才跟大家说胎息嘛。反正前后左右都不要离开胎息，不要离开中间。那么两个目光是从中间慢慢就这样一个电，把这个电那一个电，那么我从这个电的基本上下功夫，这两个光自然会亮。那么今天我就讲到这里。先给大家指挥天心，指挥生死的道路。我讲到这儿，要请大家多提些问题？ 黄剑：那么休息几分钟，师父累了。 张真人：对，那么我们就休息了。 张至顺真人讲解《炁體源流》｜人篇｜正式版 张真人讲解炁體源流｜人篇 黄剑：坐我们的前排的这些都是我们的顾问老师，包括我们那个乾元观的当家，一当家，都亲自过来，他也是老道长的弟子，我们要好好地感谢他，还有他身边的两个道人，那几个师兄，都是他们一直在照顾师父，照顾的非常细心，所以老人家，有这么……师父哦，这些徒弟不错吧？照顾你照顾的不错吧，这几个徒弟。 让师父有一个好身子，好身板，能够继续地有机会出来传播大道，我觉得他这个心思非常非常地可以理解。因为道家是都躲在深山里面，现在能浮现出来的高道真的很少很少了，所以师父觉得自己应该出来多传播一些，那种道家的文化，让人家（知晓）。 有一次我们问他，为什么现在这个佛家的、基督教的都传播的那么好啊，都做的那么好啊，然后老人家非常骄傲地说，你看天上这个，这个山里头是蘑菇多还是灵芝多啊，你看海里是龙多还是鱼多啊？他非常以自己的道家为自豪，所以他觉得这些东西是真正的宝贝，然后鼓不敲不响，你不求我我还不教你呢，你不想学我还不告诉你呢，所以他愿意跟这些真正喜欢道家文化的人分享这些宝贝。 那我们现在问一些问题。有很多人提了很多问题，我看有的人一下问了六个问题，我觉得这个有点，有点过了，可能老道长任何一个问题够他回答一整天了，所以呢，我们就选择一些吧。师父，不能每个问题都回答啊，我选一个字写得比较好一点的啊。先来一个简单的问题，说这个炼完八部金刚以后，还可以站桩吗？ 张真人：可以，可以。站桩有一个问题啊，久行、久动、久走，伤筋；久立伤骨；久坐伤血；久睡伤脉。这站桩，你站到那儿，我们就说你站到那儿做什么？抱元守一，是不是？那这都是古代的，在这个八几年啊气功全国普遍啊，光一个上海都有一百几十样子气功，那我都知道。为什么我们在那个时候，大家叫我出来，第一次教，就是在北海舰队，李司令，李司令，济南军区的李司令，北海舰队的于司令，他们都是气功协会的人。 那么他就说，你会不会气功？我说我不会气功。他讲那你们道家会什么？就是在山东崂山下边有个大石头，混元石嘛，有邱祖爷画的图，还有张三丰画的图。那一天是我在上边，8点以后就到那个上边，一直地到下午4点才下来。 那时候，欠人家外债，三万八千七，把我愁死了。在那儿一下子，连哭带磕头，一下子磕了十几个小时。下来就碰见他们，他说你这能不能给我们讲一讲这个？这两边的讲了，中间的看你能不能讲？我说中间的，我一来不敢讲，二来我讲不了。中间这个图，是混合图，那个中间的图，就是今天的天心。讲日好讲,讲月好讲。 那么这是刚才你问的这个站桩，你问我行不行？那你要站你就站。我说的这个事情，是我的理解，那么人家教站桩功的老师，他必然要说出来很多的好处。你站了多年了，究竟站了出现什么东西？你问问你自己就对了。你问我，这个话，我也不敢多说。 黄剑：先不讨论站桩好不好。 张真人：对。 黄剑：可以站。还有人问这个玄关一窍在哪？这是在问银行号码密码一样的啊。这能说吗？ 张真人：怎么不能说嘛，我给你说的，祖土、黄庭、玄关、先天窍，这不是给你说明了吗？ 黄剑：都是一个东西。 张真人：那不就是天心嘛，就是胎息嘛，我们坐胎就在那儿。那就是天心，那就是祖土，祖先住的土地。老君爷就在这儿住的。老君爷道传谷神嘛，那么“谷神不死，是谓玄牝，玄牝之门，是谓天地之根，万物之母。”那人（方言，指上文老君爷的那段话（出自《道德经·第六章》），这个不是说的这，又是什么？ 黄剑：这个没有认真听课，过去吧。刚才“天心”一章全讲了啊。大家非常关心如何正确地打坐、修行，道家和佛家的打坐，有区别吗？ 张真人：没有区别。道家也是炼的性和命，佛家光炼性不炼命。那么佛家炼到最后，他为什么一化身有舍利子？他那个舍利子就是后天的渣滓，他把先天的元物都提走了，他后天的他不炼，他不要。所以，佛家有舍利子，道家没有。我们炼后天炼先天，一起炼化。这个他炼的是直接（炼）性，我们是连性带命一起炼。就有这一点区别，别的没有什么区别。 那么性，释迦佛他直接提的天，提的天上。我们道家有三层、有四层。那么你从下元开始，炼阴精转元精，炼元精转元炁，炼元炁化金丹，这是从下元开始。那么还有一个中乘，中乘就是那一道冲脉，跟带脉连着的。那么带脉就像一个，就像一个口口，那个冲脉就是直接向里，从中间向上去冲。那个冲脉就是一个中，那个带脉在这一周围。冲脉从下元开始，从中间，背后有督脉，前边有任脉，中间有冲脉。这三道脉，那是我们修行人呐必然要走的。那么你炼后天，要经过任督，从这个地方开始。我们，那么，下乘，中乘，上乘就是泥丸宫，在泥丸下手，是上乘功。但我们在天心下手，是最上一乘。就是这种分别。那么佛道没有分别。 黄剑：那他们就想知道，打坐到底怎么打坐？是左脚放在上面，还是右脚放在上面？有没有什么规矩？有什么注意事项？ 张真人：佛教最讲究天盘，两个脚都在上面盘着。那么，我们说一句，那如果盘天盘能成仙能成佛，我不怕老了，我就把腿盘断，我也盘。因为盘了，我能成仙成佛。那么你把腿盘得疼、肿、胀，气血不通，那你盘它有啥用嘛？另外，我们道家真正的打坐，不讲究盘，我这样子也可以嘛。那么我咋个弄，我想盘也好，不盘也好，我散坐也好，打坐没有方式。 睡觉有三个东西：第一个折身武睡，那么一个手捂，把耳朵露开；一个手攥住，攥到这个姿势，攥结实，腿张开，那么两个腿抻（读chēn)直。年轻人要这样子睡，武睡，保持你的精不变，甚至于做梦遗精，你能保持那个问题。半文半武，那么一个腿蜷过来，好，这么是抻（读chēn)着一个，蜷着一个，半文半武。这是中年人。 黄剑：一条直的，一条是半屈的。 张真人：老年人把两个腿蜷过来，两个手抱到这，一个手搭到磕膝盖（方言，指膝盖）上。行如风，站如松，坐如钟，睡如弓。睡觉就像一个弓，这么两个手一搭着，这么一弄（方言，这里指蜷），就像一个弓弦。我们睡觉有三个办法，打坐没有形式。 那么你跟我在一起，你坐上一年，我不叫你知道我打坐，你根本不知道，你坐我睡。那么你坐到最后，什么结果？有些人说我睡着，我睡着？我可没睡，我都单看你坐什么样子，是不？打坐没有形式，怎么舒服，怎么自然，要达到自然，不是叫你“人”打坐。 好多人以为我这样子那样子用呼吸，你一开口就知道你错了。不是叫你“人”打坐，是叫你的元神不动，只要你的元神不离身，自然成功。眼不观物耳不听，口不言语自长生。闭关闭谁啊？就是闭的这三关，没有别的。打坐没有方式，正法不叫你折腾，正法是叫你元神打坐，只要你的元神昼夜不离，你再大的年老，不要三百天，你的精神马上转过来。 秉着你们年轻，有志向、有志性、有恒心，最慢是五年，再快三年，再快了一年，可以成功。到底哪个对哪个不对？那么，三茅，三茅一年成道，大茅一年半成道，那么老二是种庄稼，老大老三都走了，我要这个东西干什么？那么三茅人家在四年以内，弟兄三个都成道了。 我刚才说的这个话，人家说要有实践论，那就是我的实践。我炼的还不到六个月嘛，超过他们三十年，那时候才17岁出家嘛，18岁才传带我。因为你打坐，不是叫你……把一切的东西都放下，心上无挂碍，心上、心中不存一丝头啊，你存一点都不行。那么，一分阴气不绝，不能成仙得道，一分阳气不绝，不能死。只要有一分的阳气，人不能死，那么你有一分的阴气没炼完，你不能成仙得道，非把它阴气炼完，纯阳之体，才成仙得道。 黄剑：好，师父其实很强调那个，这个讲的是很重要的一点。 张真人：打坐随便。 黄剑：打坐是当时我们在山里头的时候，李辛，李辛老师就问，被我逼着说，你要去问点问题啊，我好拍电视啊。李辛老师就问，终于想出一个问题，师父啊，怎么打坐？被一顿臭骂，如果大家想看那一段怎么打坐的这个，在视频上面都有，在我的空间的视频都有，打坐是你的元神在打坐，不是你的肉体。师父，有一个问，女性修道有什么注意事项？ 张真人：什么？ 黄剑：女性啊。 张真人：女？ 黄剑：女，女子，女子修道有什么要注意的？ 张真人：呵。 黄剑：是不是也不可以，是不是不适合意守下丹田？ 张真人：呵，刚才我就说了，前边也讲了，大道不分男女。男女虽有别，神炁无二异。都是炼的神和炁，离开神炁，都是骗人的。那么，打坐，妇女有分别，哪儿分别？男子天天到，女子月月来。那么男的什么时候一天能来个五六回六七回，那么你就小心了，你的炁快满了。他一天，男的一天要来几回，那么一会儿你精气满的话，他要不了两个小时，他又来了。要不了几个小时，一天要来个六七回七八回的话，你小心，大药快冲关了，大药冲关怎么办？小则伤丹，大则伤命。那是最要紧的，必然要经过师父跟你说。 那么，你们大家想一想，三人不问道嘛。这么多的人呢，那么必然还有一点个事情不敢明说，不敢在大会上明说。张紫阳说得太明白了，天罚他三次死罪，呵呵，我就看着他那，心里有些害怕，反正我说的这些，这都是书上道祖爷说的，他不敢说明。你说个天，他说个地，你说个这，他说个那，我把这几个人的对到一块，就明白了嘛，是不是？我把这个书都对到一块了，所以把这个大道基本上算说明白了。 以后，你听黄剑还有个最标准的给大家公布，就是我解释的《清静经》、《太乙金华宗旨》，这两本完全说了八天，八晚上，把这个东西说的很详细。你只要听了这个博客的话，你人人都会看，一看书都懂，不管你看哪个书，一看都懂。他说的不对，你就知道不对。不管对也好，不对也好。 对，不生病。那么你的不对，就是我说得对，那么，对，你的心不正，大道归于心嘛，心正即丹，心邪即毁。那么旁门，那么三千六百旁门，旁门里头人家的心正，他道传的不是正道，但他的心正，他的心正，天有指挥，他本身上的元神会给他指挥，人家也是照样子成道。但若我跟你说的正道，但若你的心邪，你必然要走到邪路上去，那不是我跟你说的，天不容。 那么女子们修道有个分别啊，那么月月来，那么连来带闭，一般地都是最多是七天，最标准就是五天。前两天往上朝，第三天，最后的下半天它往下流，往下走，先朝两个乳房。现在他们讲，左转三十六，右转二十四，揉软奶头，那我们男的揉什么呀？那么揉奶头，左转三十六，是从子到巳，六个时辰，刨过卯不用，还就剩五个时辰。 那么，上边为阳，阳爻用九，阴爻用六，（《周易》），四九三十六，一个时辰三十六，那么五个时辰一百八。那么下降由午到亥，六个时辰，除酉不用，它正好五个。那么五个，是不是？四六二十四，一个时辰二十四，那么五个时辰一百二，一百二对一百八，三百，那么正好六十五天，就是在这个卯酉沐浴不计数，对够三百六十五天，是这样子的，不是叫你数，也不是叫你，你转一周天，刚好是三百六。那是个预计，是个比喻，而不是那样子的。 那么你炼，妇女，到最后的那一天，第三天，刨过一二不用，去过四五，第一第二不用，第四第五不用。第四第五再用，那个，那个药已经老了，老了伤丹，嫩了不结丹。就在这个第三，刨过一二，去掉四五，就在第三天，最后的半天，这么你下功夫。前来两三天，你该睡、该坐，你不要动，因为你等它这个药老，你再下功夫。 下功夫跟男的一样，你只要从这边一静，虎降头，龙降尾，那么我们男的那么一动，等那个老虎出来动，动了大叫三声，那个时候你下功夫，它一热，你就敢下功夫，再静，在天心里头，它从天心里动的，你在天心里一静，它就跟那个海水呼呼叫地往上跑。 是不是水？我在这个里头也作了四句顺口溜，“朝朝目视白云飞，欲到天涯水作梯。若人识破风云里，五灵光中好锁龟。”那么，五灵是真意，在这个光，还是不离光，在这个光里头，自然把它锁住，那么一锁住，自然结胎。这么妇女跟男的就这一点区别，别的没有什么区别，都是炼的神炁。 黄剑：好，这个说，请师父喝一口水。请问道长，神气精，就精气神，鬼魂魄，有什么区别？这个人字写的很好。 张真人：鬼、魂，是下边，是阴气；神、气、精，是从阴精里头提出来的、从五脏里头提出来的、最高的东西。这一句话，在这第二篇里头“元神、识神”，在那个里头。“人一身的精华上注于目”，人最高的精华都在两个眼睛里，你还上哪里找？你在下元炼的都完全都是魄阴之气，都是五脏的气，这就分别就很大了，是不是？你炼好了不生病，炼不好最后也是很难说。 你在地狱里头找路，你终究是地狱的路，找不着天上的路。人家从天上下功夫，不找路就是天上的路。不过是，你走到这个正路上，人家有根基的，人家坐飞机，往北京，两个小时到了，再不然坐火车，用七八个小时到了，那么你坐汽车又慢，你地下走更慢，那么到北京你地下走，得一两个月，是不是？这就是你走到正路上，只要不退心，早到也到，晚到也到，终究不离你那个地方，终究能走到。 炼后天，好了还能长远，不好，那就是自找死路，那是一点都不假。就是这种分别了，妇女就这种分别了。 黄剑：这人说，我炼功的感觉腹部有气团在撞，肚子里，眼前有光，后面应该怎么炼啊？ 张真人：什么？你再说。 黄剑：他炼功的时候啊，腹部有气在撞，然后呢，眼前有光，他后面怎么办啊？ 张真人：那是你炼的，你在肚子里头……我有两个学生，常常地就这样子说，就是炼那个王力平的一套东西，怎么好怎么好。他说，我始终也不回答，我笑，我说师父光笑，那我可不如人家的好嘛，那你就慢慢地在肚子里头转就对了，转到最后，就有些东西会给你回答。 你能转得不生病，那就是你的福，生出来病你再看，是不是？那么，为什么现在病这么多？我在海南，每一个月差不多都要来一个两个来问我，有的人教给他八部金刚，人炼上一个月两个月，他这个病好了，有的炼不好。 这些事情，反正你们不管怎么炼，我今天说的，你知道这个路走错了，错了改嘛，错了不怕改嘛，天不杀悔过人嘛。我以前我杀人、放火，我现在改过了，天不杀悔过人。但我路走错了，你改，你不改，那是你的事。我今天你们来听我，为什么？你们来找我，这么几千里路上万里路，你来找我，为什么？那我就是跟你说的，真的，我没事，我从17岁到现在没有感冒过，我的徒弟跟着我多年，你问他我感冒过没有？没有。好，那行吧，你再问。 黄剑：这个是谁写的，六七个问题，请你只提一个问题，再重新传上来好吗？写太多了，而且这个问题太碎了。嗯，还有人说，常言“尽信书不如无书”，任何典籍总有出错，如何分辨学习各派典籍？这不就是老道长做的事情，就是因为怕你出错，他替你整理过了。他说有很多书都讲的不对，也有可能不对，那到底是怎么看？怎么分辨哪一本书说的是对的？ 张真人：哦，刚才我说的这个书，不是书上不对，你得看清楚。但，要是我是个大师，我是个气功，我写出来的文章，写出来的文章怎么写的，这个《道藏》上编一篇，那个《道藏》上弄几篇，自己或者打坐，多少有点知觉，对不对呢？那就看他们的了。 为什么打坐？我到北京，一个国务院的一个主任问我，他说，张道长，你说有神没神？他问我两回，我没答复。结果道观里一个我们办公室的主任说，这是周主任，在我们道观里负责的。我说，你问我有神没神，第一个我说有神，第二个我说绝对有神，第三个肯定不疑有神。他说，你说这三个有神什么意思？我本人出家，我就是修神仙的，我要说没神，没神你出家干什么？这是因为我本身上的问题。 第二个，我是在北京白云观，你问我有神，白云观是邱祖爷开的，那么白云观是我们宗教活动场所，我可以说有神。那你明天叫我到大会堂里开会，有，没有，我也是说的两可之间。 那么第三个说绝对不疑，邱祖是元朝人，在哪儿住姓啥叫啥，有这个人，是他创立的龙门，那么我是邱祖爷的后代，我要说没神，那不是消灭我的先人吗？他就说你真能行，我问过你们好多人，都是讲的马列主义，那么我要给你讲马列主义，讲三天也讲不完，你跟我讲马列主义，是不是？那么就离开本质。 另外一个人，就是他本人问我，他说你们打坐与害病有关没关？我半天，我说你问这啥意思么？那么就是我们陈撄宁，会长嘛，他也不在了，那么我还举手选举表决还选举他了。他说陈撄宁就是得的癌症，他爱人还是得的癌症。他就问他那你们炼功，那么你们害病，他说炼功与害病无关，这一句话说的。 他问我，我说，我师父说过，“得道的童子不计岁月，道能祛病，能延年长寿。道不能祛病，不能延年长寿，怎么能修成大道？”我就跟他回答的是这个意思，是不是啊？道绝对能祛病，有病打针吃药，不用问，口上有道，本身上没有道。这个话，我跟中央好多领导都说过，你不管他气功大师二师，天上的神仙，他就是活佛也好，活神仙也好，你发现他打针吃药，不用问，他没有功夫。 有些人讲道讲得远的很，我都想拜他为师，那么本身病得起不来，我连听都不用听，坐了十分钟，不到十分钟我就走了，我不听了。不管你谁，我说的是实话，考验人真的，你内容看不着，你外形你看着了吧？如果我走着，两个人搀着我，哼哼，走不动，一身的病，身上浮肿，你不用问，没有道。那么有道的人哪能是这个样子呢？道不祛病，就是假的。我个人可以说一句话，道能祛病。不能祛病，你这个道不真，不能延年嘛。 黄剑：非常有信心啊。这个，下面有人问，修行的时候，会出现书里面或者师父说的各种感觉的景象，如何看待这到底是真的还是假的？其实刚才师父有说这个，就是说他打坐修行的时候，会发现很多很多奇怪的现象，你说这个现象是真的还是假的？ 张真人：发现一切的现象，这就是你打坐的内里边三百六十阴神，它给你变这变那，变那变这，变得多得很。我刚才都说了，你打坐，直接定住你的元光，性光，不要动，自然而然就把它消灭了。那是阴气，别的没有什么，它再害怕，你知道它是个假的。你看我，我都经过嘛。 楼观台，蛇告状，蛇会告状吗？那么一个蛇把一个出家人咬着了，那么这个知客就说，啊你们随便咬人的么，不要你们了，你们起单。就这么一句话叫那个蛇起单走。那么第二天，那个蛇多得很啊，爬到桌子下大堂上，那么大堂的县领导说什么意思嘛，赶快骑马到楼观台问问，把知客请来，知客一看都是蛇。 那么一看这个蛇，咬人的这个蛇，是有尾巴有尖，楼观台的蛇，没有尾巴是齐的，两个蛇把一个蛇咬住、咬死，跪到大堂上，楼观台的蛇告状啊，就这么……是不是啊？它不管变什么。那么我心里说，这个，我一想这说么，楼观台这蛇，好一个大蛇在太空里，哎呀，我心里说，你可不敢入到肚里，那呼呼叫地跑到肚里头了，看得清清楚楚，一条大蛇在肚里头，几天吃饭哆嗦害怕，心里说这怎么办？心里说，你能不能消啊？一说心里消，能消不行，它呼变得一点点，哎呀，我说既然你能变小，你不如变一股清风飞走？哎，一股清风飞走了。但你心一动，它就要动，所以我们修道人心不敢动。你心一动，那个鸟不能活。你心里一动，你朝那个鸟一恨的话，那个鸟当时就死。有了功夫，千万你不要恨，你恨谁，谁不能活。大家要记住这个。我们……他不懂，你不要恨他，就这么。 黄剑：这个说十二经脉，在身体的两侧循行，线路是否同时同一个方向的？十二经脉在身体里走的。 张真人：是不是一同时动？ 黄剑：十二经脉在身体两侧的循行线路，是不是同时同方向的？有没有交界？十二经脉在身体怎么走的？是不是同时同方向？ 张真人：这一个，也问的正确。你们往往地形容这个炁，炼着的这个炁那个炁。我问你太阳从东出来，那么日出木心为东，月落西下为酉，在这个昼夜十五六的时候，太阳从东边出来，月亮从西边落下，它是不是昼夜循环？另外，到那二十九、三十、初一，没有月亮，没有月亮，月、日相合，那么合了以后又慢慢地离开，昼夜循环，每一个月是昼夜不停的。 我们睡也好，坐也好，你的呼吸停止了吗？人一呼一吸脉行三寸，一昼夜行一个周天。它这个脉每逢子时到什么？子时开天，丑时辟地。那么寅时万物发生，在这个寅时中间，在这个3点到5点这个中间，你下功夫，正是万物发长的时候，我们人身跟天地的日月行动一丝一毫都不差。 你不要注重你的炁。那么，炁昼夜是循环的嘛，你要一控制，你的气血都不平衡了，你把它控制，不当家，往往的人都是用这个，越用越差，气脉不周流了。那么天地行动、日月循环，一丝一毫也不动。那么睡也好，坐也好，你的呼吸并没停止，脉自然动，动在哪儿呢？ 你只要掌握了天心，天心就是天上的一个紫微，就是五斗的斗姆，那么五个星，四个星为四大天，中间那个星星就是紫微星，紫微星比斗姆星小得多，斗姆星包括紫微星以外，那是个斗姆。那么周天的气血如同周天的星星是一样，这么明白了吗？我们只要是保持天心不动，昼夜的精神循环，循环到这个时间，它自然而然地接上，你不要注意。 黄剑：最后一个问题，这个问题写的我都没看懂，他说，天有定数，是否能不能闻道？炼到何处，能不能炼成？已经决定？然后，一刀帮我翻译了一下，就是天命已定，能否改变？就是说，人的命都是有定数的，是吧？那这个我们炼功，能不能改变这个定数？ 张真人：对！我们不能改变的话，山难改性难移，要得移过性，除非是神仙。你修不成神仙，你动不了寿。这个寿是活的，你做的好事多了，能加寿，你做的坏事多了，能减寿。大家知道，哎，大汉是谁呀？大汉国大汉的是谁啊，知道吗？偶然间想不起来了，韩信吗？知道韩信吗？是不是？韩信不是大汉的一个大帅嘛，官封三齐王嘛，他命里该活72，32岁死了，因为他做的有五个短寿的东西。 那么唐朝的罗成，也是该活72，32岁死了，短了四十年。那么这个寿是活的，你做的好事多了，能给你增寿，你做的坏事多了，能减寿。那么要移动寿的话，除非修成神仙。我们现在就是下功夫，就想与阎王爷拼命地干，我们就跟他斗争。我们能斗争过他，我们就不死，我们斗争不过他，那我们的命就由他来。我们要不能移过性、不能移过命的话，我们就不能成神仙。但能修成神仙，就能移寿移命。这个是很简单的，是不是。 黄剑：好，师父，今天就到这里吧。 张真人：好吧，好吧，好吧，谢谢大家。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":" Markdown转换word（两种方法，实现两者互转）非原创    ","slug":"Markdown转换word（两种方法，实现两者互转）","date":"2021-09-24T18:43:30.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/09/25/cl3sojxf0000k5cbhf4vhfjla/","link":"","permalink":"https://muyangit.github.io/2021/09/25/cl3sojxf0000k5cbhf4vhfjla/","excerpt":"","text":"Markdown转换word（两种方法，实现两者互转）非原创来自Hi丶ImViper 2020-06-15 17:15:43 3113 收藏 8 分类专栏： Tools 文章标签： git github windows markdown Markdown转换成wordTypora+pandoc就可以简单的实现Markdown转换成word啦！ 在日常使用过程中，需要用到其他的格式，typora默认支持 .md文件转 .pdf与 .html格式，其余的常见格式需要使用 pandoc扩展程序来支持。 Typora安装1.打开Typora的官网： 打开链接如下所示：下滑，选择适合自己系统的安装包。 2.下载完成后打开exe文件安装即可。可以简单测试一下 pandoc安装1.pandoc官网获取安装包：https://github.com/jgm/pandoc/releases/tag/2.2.1进入官网如下所示：选择适合自己系统的安装包(博主选择的是win-64位的.msi) 说明： 因为github的服务器在国外，所以下载的速度可能会非常慢。或者链接超时，这里提供一个百度云链接。 链接：https://pan.baidu.com/s/1RmODxICewSbii5Bc_VjNOg 密码：346h 2.安装： 双击安装，一路默认就可以了。安装完成之后测试一下安装结果。 打开cmd控制台，输入pandoc –-version，出现以下结果则说明安装成功。 使用Typora测试导出word说明：在安装完pandoc之后，执行导出word功能时还是提示安装pandoc，此时可重新启动电脑，或者卸载typora，然后再安装–再开始导出word文件。完成上述操作之后，将可以方便的使用pandoc的.md转其他格式。在前面使用Typora随便写了一个.md文件，现在进行导出word。1：.md文件(原始文件)点击左上角文件，选择导出，选择word格式，则可以导出word文档。 word转换为Markdown下载并安装Writage1.打开网站www.writage.com，点击download now开始下载。 2.运行安装程序，按照默认选项即可。安装完成后重启电脑。 3.使用office word新建或打开任意一个文档，在文件 菜单栏下选另存为，查看保存类型中是否有Markdown格式。 ，查看保存类型中是否有Markdown格式。 4.选择Markdown格式保存即可。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"gitbash中npm换源与加速下载方法 ## Git 常用操作命令    ","slug":"gitbash中npm换源与加速下载方法 ## Git 常用操作命令","date":"2021-09-17T10:12:23.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/09/17/cl3sojxfr001y5cbh4w9b3pe5/","link":"","permalink":"https://muyangit.github.io/2021/09/17/cl3sojxfr001y5cbh4w9b3pe5/","excerpt":"","text":"Git使用Git 常用操作命令转载君莫笑贪狼 最后发布于2016-05-27 14:21:12 阅读数 471 收藏 展开 转载：http://tomhat.iteye.com/blog/2065707稍微做了一些补充。 可以创建私有项目的git网站：+ https://bitbucket.org+ http://git.oschina.net master：默认开发分支；origin：默认远程版本库 3限速`完美解决github访问速度慢 月正明 java开发工程师 21 人赞同了该文章 1. 修改本地hosts文件1windows系统的hosts文件的位置如下：C:\\Windows\\System32\\drivers\\etc\\hostsmac/linux系统的hosts文件的位置如下：/etc/hosts 2. 增加http://github.global.ssl.fastly.net和http://github.com的映射 1获取Github相关网站的ip访问https://www.ipaddress.com，拉下来，找到页面中下方的“IP Address Tools – Quick Links”分别输入github.global.ssl.fastly.net和github.com，查询ip地址下面是我的配置140.82.114.4 github.com199.232.5.194 github.global.ssl.fastly.net 3.命令提示符中输入ping github.com配置前 配置后 再次访问流量器https://github.com/，秒出 2.直接用 https://g.widora.cn 就好了赞回复踩举报 \\ 4.Git常见错误与操作：error: src refspec master does not match any解决办法一、 出现错误 error:src refspec master does not match any 原因分析： 引起该错误的原因是目录中没有文件，空目录是不能提交上去的 解决办法： [html] view plain copy 1$ touch README $ git add README $ git commit –m’first commit’ $ git push origin master 1234 (来自：http://www.open-open.com/lib/view/open1366080269265.html)实际上 [html] view plain copy 1$ git init 1 这一步之后创建了一个名为.git的文件夹，不过它在默认状态下是隐藏的，系统将隐藏文件夹显示出来，可以看到有这样一个文件夹。github上传项目方法：http://www.oschina.net/question/159132_86728在你的电脑上装好git 大致流程是： [html] view plain copy 11、 在github上创建项目 2、 使用$ git clone https://github/xx账号/xx项目.git克隆到本地 3、 编辑项目 4、 $ git add .(将改动添加到暂存区) 5、 $ git commit –m”提交说明” 6、 $ git push origin 将本地更改推送到远程master分支 123456 这样你就完成了向远程仓库的推送 如果在github的remote上已经有了文件，会出现错误。此时应当先pull一下，即： [html] view plain copy 1$ git pull origin master 1 然后再进行： [html] view plain copy 1$ git push origin master 1 二、如果输入$ git remoteadd origin &#103;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;:djqiang（github帐号名）/gitdemo（项目名）.git 1提示出错信息：fatal: remoteorigin already exists.解决办法如下：123 [html] view plain copy 11、先输入$ git remote rmorigin 2、再输入$ git remote addorigin git@github.com:djqiang/gitdemo.git 就不会报错了！ 3、如果输入$ git remote rmorigin 还是报错的话，error: Could not remove config section&#x27;remote.origin&#x27;. 我们需要修改gitconfig文件的内容 4、找到你的github的安装路径5、找到一个名为gitconfig的文件，打开它把里面的[remote &quot;origin&quot;]那一行删掉就好了！12345678 三、如果输入$ ssh -T &#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;出现错误提示：Permissiondenied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。 1解决办法如下：1、先输入$ ssh-agent，再输入$ ssh-add ~/.ssh/id_key，这样就可以了。2、如果还是不行的话，输入ssh-add~/.ssh/id_key 命令后出现报错Could not open a connection toyour authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。1234567 四、如果输入$ git push origin master 1提示出错信息：error:failedto push som refs to .......解决办法如下：123 [html] view plain copy 11、先输入$ git pullorigin master //先把远程服务器github上面的文件拉下来 2、再输入$ git pushorigin master 3、如果出现报错 fatal:Couldn&#x27;t find remote ref master或者fatal: &#x27;origin&#x27; doesnot appear to be a git repository以及fatal: Could notread from remote repository. 4、则需要重新输入$ git remoteadd origingit@github.com:djqiang/gitdemo.git 1234 五、Git常见操作 使用git在本地创建一个项目的过程 [html] view plain copy 1$ makdir ~/hello-world //创建一个项目hello-world $ cd~/hello-world //打开这个项目 $ git init //初始化 $ touch README $ git add README //更新README文件 $ git commit-m &#x27;first commit&#x27; //提交更新，并注释信息“first commit” $ git remote add origin git@github.com:defnngj/hello-world.git //连接远程github项目 $ git push -u origin master //将本地项目更新到github项目上去 12345678 六、gitconfig配置文件 1Git有一个工具被称为git config，它允许你获得和设置配置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量可以被存储在三个不同的位置： 1./etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’--system’ 给 git config，它将明确的读和写这个文件。 2.~/.gitconfig 文件 ：具体到你的用户。你可以通过传递--global 选项使Git 读或写这个特定的文件。 3.位于git目录的config文件 (也就是.git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在.git/config中的值覆盖了在/etc/gitconfig中的同一个值。 在Windows系统中，Git在$HOME目录中查找.gitconfig文件（对大多数人来说，位于C:\\Documents and Settings\\$USER下）。它也会查找/etc/gitconfig，尽管它是相对于Msys 根目录的。这可能是你在Windows中运行安装程序时决定安装Git的任何地方。12345 七、配置相关信息： 11 当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：1 [html] view plain copy 1$ git config --global user.name &quot;John Doe&quot; $ git config --global user.email johndoe@example.com 2 你的编辑器(Your Editor)123456 现在，你的标识已经设置，你可以配置你的缺省文本编辑器，Git在需要你输入一些消息时会使用该文本编辑器。缺省情况下，Git使用你的系统的缺省编辑器，这通常可能是vi 或者 vim。如果你想使用一个不同的文本编辑器，例如Emacs，你可以做如下操作： [html] view plain copy 1$ git config --global core.editor emacs 1 3 检查你的设置(Checking YourSettings) 如果你想检查你的设置，你可以使用 git config –list 命令来列出Git可以在该处找到的所有的设置: [html] view plain copy 1$ git config --list 你也可以查看Git认为的一个特定的关键字目前的值，使用如下命令 git config &#123;key&#125;:12345 [html] view plain copy 1$ git config user.name 4 获取帮助(Getting help)12345 如果当你在使用Git时需要帮助，有三种方法可以获得任何git命令的手册页(manpage)帮助信息: [html] view plain copy 1$ git help &lt;verb&gt; $ git &lt;verb&gt; --help $ man git-&lt;verb&gt; 123 例如，你可以运行如下命令获取对config命令的手册页帮助: [html] view plain copy 1$ git help config 1 转载来源：http://blog.csdn.net/s164828378/article/details/52425208 5.GitBash 全局使用 npm,node命令原创Alan_阿兰 最后发布于2017-06-14 17:41:37 阅读数 2957 收藏 展开 命令大全 http://www.cnblogs.com/darrenji/p/5286403.html 常用： npm install –save react react-domnpm install –save-dev gulp browserify babelify vinyl-source-stream 3.全局$ npm install babel -g$ npm install babelify -g$ npm install vinyl-source-stream -g 默认安装路径C:\\Users\\Administrator\\AppData\\Roaming\\npm修改路径：npm config set prefix “D:\\Node\\npm_global_modules\\node_modules” node.js测试http://localhost:3000/ 退出出node命令行：两次ctrl+C或者一次ctrl+D退出终端：.exit; 6.使用Git Bash for Windows本篇体验Git Bash在Windows操作系统上的用法。 什么是Bash? 是一个Shell环境，Bourne Again Shell的缩写。 安装git for windows → http://git-for-windows.github.io/→ Download，选择一个合适的版本→ 安装→ 安装完后有Git Bash, Git CMD, 和 Git GUI这个三个应用程序→ 运行Git Bash,检查当前版本git version→ 退出exit 安装Notepad++ → notepad-plus-plus.org→ download，选择合适的版本→ 安装 在Bash中打开Notepad++ → 找到notepad++的应用程序文件一般在C:\\Program Files(x86)\\Notepad++中，把C:\\Program Files(x86)\\Notepad++赋值→ 右键”我的电脑”，点击”高级系统设置”, 点击”环境变量”， 双击Path,把;C:\\Program Files(x86)\\Notepad++加到最后，点击”确定”→ 运行Git Bash→ notepad++这样，在Bash中就打开notepadd++了。 显示查看当前目录 → 运行Git Bash→ 查看当前目录pwd显示/c/Users/Darren,其中/c/相当于C:\\，→ 列出当前文件夹下的所有文件ls或ls -l 更换当前目录 → 运行Git Bash→ 导航到其它目录cd Videos/→ 退回到上一级cd ..→ 导航到My Documents目录cd My\\ Documents/→ 退回三级cd ../../../→ 回到主目录cd ~→ 导航到一个绝对位置上的目录cd /c/Windows/System32/ 查看命令出处 → 查看ls命令的出处whick ls显示/bin/ls 显示打印 → 显示打印环境变量echo $PATH 查看文件内容 → 查看一个文件内容cat test.txt→ 查看一个文件内容并编辑less test.txt 创建、重命名、移动、删除文件 → 创建一个空文件touch demo.txt→ 重命名一个文件mv demo.txt demo-1.txt→ 删除已知文件rm demo-1.txt 创建、删除目录 → 创建目录mkdir projects→ 删除目录rmdir projects→ 创建多级目录mkdir projects/client-a/awesome-web-project/→ 删除多级目录rm -rf projects/ 清空和退出 → 清空内容clear→ 退出控制台exit 控制台打印信息输出到文件 → 打印信息输出追加到创建文件echo “hi” &gt;&gt; demo.txt→ 打印信息输入重写已知文件echo “hello” &gt; demo.txt 执行Bash脚本 → 查看bash安装在哪里which bash显示：/bin/bash→ 使用notepad++创建打开一个文件notepad++ example.sh→ 输入命令 #!/bin/bash echo “hi, everyone” gitbash中npm换源与加速下载方法第一种·淘宝使用npm 淘宝镜像（http://npm.taobao.org/）。读者可在cmd命令窗口执行： 1npm install -g cnpm --registry=https://registry.npm.taobao.org 接下来读者就通过cnpm代替npm; npm安装 常用npm安装-调用taobao HelloWorld@DESKTOP-UQPPB6C MINGW64 /e/Web_Blog$ npm install –save react react-dom 本地文件夹npm安装 HelloWorld@DESKTOP-UQPPB6C MINGW64 /e/Web_Blog/blog (master)$ npm i hexo-renderer-inferno npm http fetch GET 200 https://registry.npm.taobao.org/react 528ms 选择安装版本官网： npm i &#x62;&#x75;&#x6c;&#109;&#x61;&#x2d;&#x73;&#x74;&#x79;&#x6c;&#117;&#115;&#64;&#x30;&#x2e;&#x38;&#46;&#x30; ​ 提示： 每输入一行，回车，没有任何提示，说明操作成功 1234567npm config set registry https://registry.npm.taobao.orgnpm config set loglevel httpnpm config set progress false vi ~/.npmrc 4.npm的配置被存储在 ~/.npmrc，可以随时改 第二种·nrm1.使用nrm。读者可在cmd命令窗口执行以下命令进行全局安装nrm： 1npm i nrm -g 读者可以使用 nrm ls命令查看常用的镜像源： ```C:\\Users\\WU&gt;nrm ls npm —- https://registry.npmjs.org/cnpm — http://r.cnpmjs.org/taobao - https://registry.npm.taobao.org/nj —– https://registry.nodejitsu.com/rednpm - http://registry.mirror.cqupt.edu.cn/npmMirror https://skimdb.npmjs.com/registry/edunpm - http://registry.enpmjs.org/123456789101112131415161718192021 注：列表中的表示默认选中* 2.使用nrm use XXXX替换默认镜像源,以淘宝（taobao）为例：* ``` C:\\Users\\WU&gt;nrm use taobao verb config Skipping project config: C:\\Users\\WU/.npmrc. (matches userconfig) Registry has been set to: https://registry.npm.taobao.org/ C:\\Users\\WU&gt;nrm ls npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ * taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/ 接下来，读者使用npm会更加快速。 两种进行对比使用nrm test XXXX,进行测速： 12345678C:\\Users\\WU&gt;nrm test npm npm ---- 1358msC:\\Users\\WU&gt;nrm test cnpm cnpm --- 216ms 第三种·vpnwindows下如何代理cmd，加速npm安装 平常用npm安装模块的时候会遇到一个问题，一些库的底层会用到c或者c++，比如 images 模块，npm会从github上去下载这些编译好的二进制文件，下载速度会很慢，开了vpn也不行。如下图。 解决办法 临时代理（推荐）cmd到vpn的端口，cmd窗口关了会恢复成原来的样子。 12set https_proxy=http://127.0.0.1:1080 //端口指向小飞机(vpn)端口复制代码 永久代理（不推荐） 12netsh winhttp import proxy source=ie复制代码 然后就愉快的安装完了。 .-git全局代理#1234567# socks5协议，1080端口修改成自己的本地代理端口git config --global http.proxy socks5://127.0.0.1:1086git config --global https.proxy socks5://127.0.0.1:1086# http协议，1081端口修改成自己的本地代理端口git config --global http.proxy http://127.0.0.1:1087git config --global https.proxy https://127.0.0.1:1087 以上的配置会导致所有git命令都走代理，但是如果你混合使用了国内的git仓库，甚至是局域网内部的git仓库，这就会把原来速度快的改成更慢的了； 下面是仅仅针对github进行配置，让github走本地代理，其他的保持不变； 仅GitHub代理#1234567# socks5协议，1080端口修改成自己的本地代理端口git config --global http.https://github.com.proxy socks5://127.0.0.1:1086git config --global https.https://github.com.proxy socks5://127.0.0.1:1086# http协议，1081端口修改成自己的本地代理端口git config --global http.https://github.com.proxy https://127.0.0.1:1087git config --global https.https://github.com.proxy https://127.0.0.1:1087 相关命令#12345# 查看所有配置git config -l# reset 代理设置git config --global --unset http.proxygit config --global --unset https.proxy 不使用代理的方法# 修改host 把下面两行加到host文件末尾 12151.101.72.249 github.http://global.ssl.fastly.net192.30.253.112 github.com gitbash 全局命令-npm,node常用npm安装：12npm install --save react react-domnpm install --save-dev gulp browserify babelify vinyl-source-stream .全局 123$ npm install babel -g$ npm install babelify -g$ npm install vinyl-source-stream -g 全局的默认安装路径 1C:\\Users\\Administrator\\AppData\\Roaming\\npm 创建目录（D:\\Java\\node\\nodejs\\node_modules） 1mkdir -p D:/Java/node/nodejs/npm_global_modules/node_modules 修改路径： 1npm config set prefix &quot;/d/Java/node/nodejs/npm_global_modules/node_modules&quot; node.js测试 1http://localhost:3000/ 退出出node命令行：两次ctrl+C或者一次ctrl+D退出终端：.exit; 文件目录创建windows =&gt; md + 多级目录 linux/gitbash =&gt; mkdir -p mkdir的-p选项允许你一次性创建多层次的目录，而不是一次只创建单独的目录。例如，我们要在当前目录创建目录Projects/a/src，使用命令 1 mkdir -p Project/a/src 而不是 1 2 3 4 5 mkdir Project cd Project mkdir a cd a mkdir src 当然，如果你有mkcd，就可以直接 1 mkcd Project/a/src 此外，如果我们想创建多层次、多维度的目录树，mkcd也显得比较苍白了。例如我们想要建立目录Project，其中含有4个文件夹a, b, c, d，且这4个文件都含有一个src文件夹。或许，我们可以逐个创建，但我更倾向于使用单个命令来搞定，而mkdir 的-p选项和shell的参数扩展允许我这么做，例如下面的一个命令就可以完成任务。 1 mkdir -p Project/&#123;a,b,c,d&#125;/src","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"Sublime配置     ","slug":"Sublime配置","date":"2021-09-16T11:26:29.000Z","updated":"2021-09-29T22:17:28.098Z","comments":true,"path":"2021/09/16/cl3sojxfb00125cbha30f1n5z/","link":"","permalink":"https://muyangit.github.io/2021/09/16/cl3sojxfb00125cbha30f1n5z/","excerpt":"","text":"","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"MUyangit的Vscode设置     ","slug":"MUyangit的Vscode设置","date":"2021-09-16T09:01:25.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/09/16/cl3sojxey000g5cbh0yoj2m52/","link":"","permalink":"https://muyangit.github.io/2021/09/16/cl3sojxey000g5cbh0yoj2m52/","excerpt":"","text":"界面设置 1·vscode 隐藏右侧进度条-小地图预览Visual Studio Code（VSCode）关闭右侧预览功能 关闭方法：点击文件-首选项-设置,搜索”editor.minimap.enabled”,默认值为打钩,我们只需要把钩去掉即可； 2·调出菜单栏3·VScode如何在浏览器中打开html文件1.新建一个HTML文件 2.点击左侧的扩展，打开扩展栏 3.在扩展栏的搜索栏中输入open in browser，找到open in browser这款插件，点击右下角“安装”字样即可安装。 因为我已经安装了，所以再搜索不会显示安装字样 4.安装完成后可以看一下这款插件的扩展文档，里面有插件的各种信息，及插件的使用方式等 我们可以看到在默认浏览器中打开是：Alt + B，在其他浏览器中显示是：Shift+Alt+B 5.回到我们刚开始建的HTML文件，在文件中鼠标右键单击，在弹出的窗口中选择使用默认浏览器打开或者其他浏览器打开，也可以使用我们上面说的快捷键（Alt + B或Shift+Alt+B）打开。 6.假如你想用其他浏览器打开，就选择Open In Other Browsers（Shift+Alt+B，顶部会出现一个命令框，其中会显示可以使用的浏览器，选择自己需要的浏览器即可，在此，我们使用chrome打开。 VSCode设置网页代码实时预览 接下来修改代码我们只需要ctrl+S保存修改后的代码，浏览器自动刷新 VScode中配置git的路径RadiomM发布于 2020-03-03 最近才开始用VScode写代码，因为之前用的都是webstorm的，虽然好用啊但是经常需要激活，而且激活码变得越来越难找的，所以就改用VScode的。 开始进入主题。今天装完插件Gitlens的时候报错了，说找不到git的路径。 经过十几分钟的百度，终于知道如何配置了git的路径了（前提是你电脑已经安装好了git）。1.打开vs的设置 2.搜索git.path，冰灾setting.json中打开 3.找到你的git.exe的位置，如图这是我的git.exe的位置，将地址复制。 4.直接复制在setting.json中 明显这是个报错，不能用单斜杠，而是用双斜杠。 好了，重启VScode就不会报错了，并且可以使用Gitlens的功能了。希望能帮助大家少踩坑，如果有帮助希望点了赞，谢谢。 在项目中无法正确导入VS code python 环境下提示找不到 module{ // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 “version”: “0.2.0”, “configurations”: [ &#123; &quot;name&quot;: &quot;Python&quot;, &quot;type&quot;: &quot;python&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;stopOnEntry&quot;: false, &quot;pythonPath&quot;: &quot;$&#123;config:python.pythonPath&#125;&quot;, &quot;program&quot;: &quot;$&#123;file&#125;&quot;, &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;, &quot;env&quot;: &#123;&quot;PYTHONPATH&quot;:&quot;$&#123;workspaceRoot&#125;&quot;&#125;, &quot;envFile&quot;: &quot;$&#123;workspaceRoot&#125;/.env&quot;, &quot;debugOptions&quot;: [ &quot;WaitOnAbnormalExit&quot;, &quot;WaitOnNormalExit&quot;, &quot;RedirectOutput&quot; &#125; ] }","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"  2021年 github被墙最新hosts-每日更新   ","slug":"2021年-github被墙最新hosts-每日更新","date":"2021-09-08T20:07:18.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/09/09/cl3sojxe400035cbhbs9932kq/","link":"","permalink":"https://muyangit.github.io/2021/09/09/cl3sojxe400035cbhbs9932kq/","excerpt":"","text":"（2）如何修改hosts那么如何修改hosts呢？下面将介绍windows和Mac系统的设置方法： windows： 1、文本编辑器“管理员权限”打开 C:\\Windows\\System32\\drivers\\etc\\hosts 文件，新增一行，复制上面每日更新的内容并保存即可。 2、命令行执行 ipconfig /flushdns 刷新 dns，或者重启电脑。 mac（苹果PC系统）： 1、文本编辑器打开 /etc/hosts 文件，新增一行，同上，复制上面每日更新的hosts内容即可。 2、 命令行执行 sudo killall -HUP mDNSResponder ，或者重启电脑。 （3）常见问题当然，ip和域名并非一直都绑定不变，一个ip可以绑定多个域名，一个域名也可以设置多个IP。有一些ip在不同地方还是无法访问！所以还是需要检查下资源链接。是否都加载成功： 可以看到 api.github.com 这个没有设置ip，访问就需要3s才加载完成。所以设置就好了。。。 （3）备注host方法并非一定有效，据我所知github采用的是 亚马逊的服务器，而亚马逊和google服务器由于某些总所周知的原因，分布在海外，很多都延时很大，多个数据中心访问延时也不同","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"   auto.js 精品基础教程 2021最新版 auto.js教程  ","slug":"auto-js-精品基础教程-2021最新版-auto-js教程","date":"2021-09-08T18:51:33.000Z","updated":"2022-05-23T15:37:33.106Z","comments":true,"path":"2021/09/09/cl3sojxfp001s5cbh23ivb8n5/","link":"","permalink":"https://muyangit.github.io/2021/09/09/cl3sojxfp001s5cbh23ivb8n5/","excerpt":"","text":"set 限制解除 绿化设定 博客 下载 问答 社区 插件 认证 搜索 登入 会员中心 收藏 动态 创作 Auto.JS 教程（1）+auto.js 精品基础教程 2021最新版 auto.js教程声明： 本教程基于b站up主-笔青居的视频。传送门：https://space.bilibili.com/21486893/video https://www.bilibili.com/video/BV1HZ4y1c7rW?p=18 Auto.JSAuto.js 是个基于 JavaScript 语言运行在Android平台上的脚本框架。Auto.js主要工作原理是基于辅助服务AccessibilityService。 功能介绍： 数据监控：可以监视当前手机的数据。 图片监控：截图获取当前页面信息。 控件操作：模拟操作手机控件。 自动化工作流：编写简单的脚本，完成一系列自动化操作。如：微信/QQ自动点赞，快速抢单等。 定时功能：定时执行某个脚本，来完成定时任务。如：定时打卡签到等。 项目介绍： 项目地址：https://github.com/hyb1996/Auto.js 官方论坛：https://www.autojs.org/ 在线文档：https://hyb1996.github.io/AutoJs-Docs/#/ 简介：一个支持无障碍服务的Android平台上的Javascript IDE,其发展目标是JsBox和Workflow。 主要功能：由无障碍服务实现的简单易用的自动操作函数 协议：基于Mozilla Public License Version 2.0 手机安装使用步骤： ① 开启无障碍服务② 音量上键停止脚本：当脚本处于无法停止的状态时，使用音量上键强制停止脚本。③ 开启悬浮窗：悬浮窗有4个控件： 1）脚本列表2）自动录制3）布局范围分析 与 布局层次分析 4）更多 auto的优点： 1）开源:代码开源，可以查到源码。 2）无需root：Android 7.0以上功能基本不需要root。 3）免费。 4）易用：代码自动生成。 5）语言：标准的JS语法。 6）灵活。 7）扩展：提供JS转JAVA桥梁，存在无限多的扩展。 提倡自动动手编写Auto.JS脚本 1）安全：Auto.JS脚本拥有很大的权限，使用他人的脚本可能存在风险。 2）编写简单：JS 脚本嵌套中文，方便阅读和书写。 3）脚本升级：一旦APP版本升级，原脚本可能不使用了。 4）提升自己的编写代码能力和解决问题能力。 PC环境的搭建VS Code 安装VS Code 入门教程：https://blog.csdn.net/QiHsMing/article/details/87064955 Visual Studio Code 官方下载地址：https://code.visualstudio.com 根据你的电脑平台选择版本下载。新建项目文件夹，右键点击 Open with Code 在VS Code 中打开。 安装 AutoJS 插件点击 扩展 搜索 Auto.js 或 hyb1996 即可找到Auto.JS插件。 使用AutoJS插件开发1.开启AutoJS插件 按 Ctrl+Shift+P 或点击”查看”-&gt;”命令面板”可调出命令面板，输入 Auto.js 可以看到几个命令，移动光标到命令Auto.js: Start Server，按回车键执行该命令。 此时VS Code会在右上角显示”Auto.js server running”，即开启服务成功。2.连接手机终端 将手机连接到电脑启用的Wifi或者同一局域网中。通过命令行ipconfig(或者其他操作系统的相同功能命令)查看电脑的IP地址。在Auto.js的侧拉菜单中启用调试服务，并输入IP地址，等待连接成功。一旦连接成功，VS Code 显示: 在电脑上编辑JavaScript文件并通过命令Run或者按键F5在手机上运行。手机终端运行结果： 3.保存项目到手机终端按 Ctrl+Shift+P 或点击”查看”-&gt;”命令面板”可调出命令面板，输入以下命令，会找到已连接手机终端。 12 Auto.js:SaveToDevice1 点击已连接手机终端，项目就会保存到已连接手机终端。 AutoJS插件常用命令按 Ctrl+Shift+P 或点击”查看”-&gt;”命令面板”可调出命令面板，输入 Auto.js 可以看到几个命令： Start Server: 启动插件服务。之后在确保手机和电脑在同一区域网的情况下，在Auto.js的侧拉菜单中使用连接电脑功能连接。Stop Server: 停止插件服务。Run 运行当前编辑器的脚本。如果有多个设备连接，则在所有设备运行。Rerun 停止当前文件对应的脚本并重新运行。如果有多个设备连接，则在所有设备重新运行。Stop 停止当前文件对应的脚本。如果有多个设备连接，则在所有设备停止。StopAll 停止所有正在运行的脚本。如果有多个设备连接，则在所有设备运行所有脚本。Save 保存当前文件到手机的脚本默认目录（文件名会加上前缀remote)。如果有多个设备连接，则在所有设备保存。RunOnDevice: 弹出设备菜单并在指定设备运行脚本。SaveToDevice: 弹出设备菜单并在指定设备保存脚本。New Project（新建项目）：选择一个空文件夹（或者在文件管理器中新建一个空文件夹），将会自动创建一个项目Run Project（运行项目）：运行一个项目，需要Auto.js 4.0.4Alpha5以上支持Save Project（保存项目）：保存一个项目，需要Auto.js 4.0.4Alpha5以上支持 以上命令一些有对应的快捷键，参照命令后面的说明即可。 简单脚本实例： 实现微信朋友圈点赞 步骤： 找到评论按钮 点击评论按钮 找到点赞按钮 点击点赞按钮 代码： 12345678评论=desc(&quot;评论&quot;).findOne();log(评论);评论.click();sleep(1000);赞 = text(&quot;赞&quot;).findOne();赞的父控件 = 赞.parent();赞的父控件.click(); 1234567","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"5款最佳正则表达式编辑调试器","slug":"5款最佳正则表达式编辑调试器","date":"2021-09-08T18:41:03.000Z","updated":"2022-05-23T15:37:33.107Z","comments":true,"path":"2021/09/09/cl3sojxe900065cbh77ft0kbw/","link":"","permalink":"https://muyangit.github.io/2021/09/09/cl3sojxe900065cbh77ft0kbw/","excerpt":"","text":"程序师 http://www.techug.com/feed) 5款最佳正则表达式编辑调试器+技术胖推荐123456789101112131415161718程序员常用[置顶]1. CodeIf ： https://unbug.github.io/codelf2. DocsChina ： https://www.docschina.org3. any-rule： http://github.com/any86/any-rule4. tool.lu： https://tool.lu5. baomitu： https://cdn.baomitu.com6. typora： https://www.typora.io7. 549.tv： http://www.549.tv8. 硬件安全投屏器： 明基应答秀WDC10，无需网络更稳定 收起 346 分享 正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。 本文推荐五款可以可视化操作的正则表达式编辑器，这些工具可以很好地帮助开发者学习正则表达式知识，并且提升开发技能。 1.RegulexRegulex是一个JavaScript正则表达式可视化工具，由纯JavaScript实现，源码托管在Github上。 123var parse = require(&#x27;regulex/parse&#x27;);var re = /vars+([a-zA-Z_]w*);/ ;console.log(parse(re)); 2.RubularRubular是一个Ruby正则表达式编辑器，由Michael Lovitt开发实现。 3.PyRegexPyregex是一个开源的Python正则表达式编辑器，开源协议为GNU General Public License v2，源码托管在Github上。 4.RegexperRegexper是由Jeff Avallone开发的一款JavaScript正则表达式可视化工具，源码托管在Github上。它能够让正则表达式字符串以 Railroad 形式图形化，便于阅读和理解。同时推荐一款 JavaScript 正则在线测试工具——Regexpal，可以和 Regexper 配合使用。 5.DebuggexDebuggex是一个测试正则表达式的Web应用，它支持JavaScript、Python以及PCRE。 分享这篇文章：相关文章：http://beian.miit.gov.cn/)","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"查看网络连接及其发起程序（进程）的方法------测试是否又成为肉鸡的可能性，检测自己的局域网IP，尝试用端口号查询进程名 非原创","slug":"查看网络连接及其发起程序（进程）的方法------测试是否又成为肉鸡的可能性，检测自己的局域网IP，尝试用端口号查询进程名 非原创","date":"2021-09-08T18:37:06.000Z","updated":"2022-05-23T15:37:33.003Z","comments":true,"path":"2021/09/09/cl3sojxgd003j5cbheiot1mrn/","link":"","permalink":"https://muyangit.github.io/2021/09/09/cl3sojxgd003j5cbheiot1mrn/","excerpt":"","text":"查看网络连接及其发起程序（进程）的方法——测试是否又成为肉鸡的可能性，检测自己的局域网IP，尝试用端口号查询进程名 原创 netside2013-04-12 15:50:19©著作权 文章标签查看进程查看网络连接进程流量文章分类非专业知识阅读数2.2万 一些上网行为管理设备会记录、统计用户发起的网络连接信息，常统计出一些不明的、对一些公网IP的连接请求，依经验往往是由用户机器上装的一些软件（特别是国产软件）引起的，有的还会产生很大的上传流量。部分连接会被上网行为管理设备依据设定的规则来阻止掉，这时候需要把这些进程（应用程序）纠出来，告诉用户，打消疑问。 方法一：命令行下，使用****netstat命令。 第一步，查看TCP连接，找出对应的PID； netstat -ano -p tcp or：netstat -ano | find “ESTABLISHED” 注释：1.如果使用find就不用再使用-p来指定是不是tcp协议了。 2.参数-o表示显示发起连接的进程的ID（PID）。 第二步，使用tasklist命令列出发起连接的进程； tasklist | find “PID” 当然，也可以在“任务管理器”中查看，效果一样。 方法二：图形界面中，通过Windows自带的“资源监视器（Resource Monitor）”来查看TCP连接。 先打开“任务管理器”（Ctrl+Shift+Esc），然后切换到“性能”，在窗口右下角就能找到。 方法三：使用软件 TcpView。","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"ping IP 带时间戳循环显示并写入日志+检测某个IP端口的实时状态（windos版+linux版） ","slug":"ping-IP-带时间戳循环显示并写入日志（windos版-linux版）","date":"2021-09-08T18:29:51.000Z","updated":"2022-05-23T15:37:33.104Z","comments":true,"path":"2021/09/09/cl3sojxfu00275cbh5cg0938p/","link":"","permalink":"https://muyangit.github.io/2021/09/09/cl3sojxfu00275cbh5cg0938p/","excerpt":"","text":"在工作中，判断网络是否通畅，首选命令就是ping，但有时候我们需要持续ping一个或多个地址时，需要加 -t 即可，但有时候需要在ping的时候加入时间戳并把ping记录写入到日志里面，方法如下： windos版： 首选把下面代码复制到文本里去，然后把扩展名更改为.bat 123456789101112131415161718192021@echo off@echo.----------------------------------------------------------@echo. 一 Author： aゞ锦衣卫@echo. 键 Reminder：请以管理员身份运行 @echo. ★ Description：一键ping+时间戳+写日志服务 @echo. 服 Blog：www.cnblogs.com/su-root @echo. 务 Email：1147076062@qq.com VX：zikun868686@echo.-----------------------------------------------------------@echo. ※温馨提醒：终止执行请按: Ctrl+C@echo.-----------------------------------------------------------@echo offset /p host=请输入需要检测的IP地址: set logfile=Log_%host%.logecho Target Host = %host% &gt;%logfile%for /f &quot;tokens=*&quot; %%A in (&#x27;ping %host% -n 1 &#x27;) do (echo %%A&gt;&gt;%logfile% &amp;&amp; GOTO Ping):Pingfor /f &quot;tokens=* skip=2&quot; %%A in (&#x27;ping %host% -n 1 &#x27;) do ( echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A&gt;&gt;%logfile% echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A timeout 1 &gt;NUL GOTO Ping) s 这是注释 文件名 test.bat1234567891011121314151617181920212223242526272829303132333435@echo off:: 关闭回显set /p host=myhost::: 这是备注/p效果是 需要用户输入host，即你要ping的地址:: 设置字符串变量 =后：前为提示set logfile=ping_%host%.log:: 设置文件名 要重用set设置的变量host 需要两边包裹%echo Target Host=%host% &gt; %logfile%:: echo 输出的字符串 &gt;到 输入的对象:: &gt;file.txt 输出字符串到文件；没有&gt; 默认输出到屏幕； &gt;nul 输出到空的对象，指令操作的提示语句不会显示:: 增强for循环:: tokens 选择一行中的分割好的部分 *剩余全部 :: skip 跳过开头几行:: %date:~0,2% 日期字符串从第一个到倒数第三个2021-09-09 2:19:59:: &gt;&gt;a.txt 追加到a.txt里:: &gt;a.txt 无创建a.txt，有清空a.txt:: echo str 输出字符串:: echo str &gt;&gt;filename 输出字符串到文件:: timeout /t waittime /nobreak&gt;nul 等待时间waittime 期间无法停止 &gt;nul 意思不要打印到命令窗口 不显示:: &quot;:loop&quot; &quot;goto loop&quot; 循环:: pause&gt;nul 按任意键继续，不显示提示:loopfor /f &quot;tokens=* skip=2&quot; %%A in (&#x27;ping %host% -n 1&#x27;) do ( echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A&gt;&gt;%logfile% echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A timeout /t 1 /nobreak&gt;nul goto loop)pause&gt;nul 运行.bat文件效果如下： 注：.bat文件放到哪里执行，就会在本地生成相应的.log日志文件。 我们打开日志文件看看： 如果我们需要检测某IP地址的指定端口可将上面代码稍加改动即可： 12345678910111213141516171819202122@echo off@echo.----------------------------------------------------------@echo. 一 Author： aゞ锦衣卫@echo. 键 Reminder：请以管理员身份运行 @echo. ★ Description：一键端口检测服务 @echo. 服 Blog：www.cnblogs.com/su-root @echo. 务 Email：1147076062@qq.com VX：zikun868686@echo.-----------------------------------------------------------@echo. ※温馨提醒：终止执行请按: Ctrl+C@echo.-----------------------------------------------------------@echo offset /p host=请输入需要检测的IP地址: set /p port=请输入需要检测的端口号:set logfile=Log_%host%.logecho Target Host = %host% &gt;&gt;%logfile%for /f &quot;tokens=*&quot; %%A in (&#x27;tcping -d -t -n 1 %host% %port%&#x27;) do (echo %%A&gt;&gt;%logfile% &amp;&amp; GOTO Ping):Pingfor /f &quot;tokens=* skip=2&quot; %%A in (&#x27;tcping -d -t -n 1 %host% %port%&#x27;) do ( echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A&gt;&gt;%logfile% echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A timeout 1 &gt;NUL GOTO Ping) 执行效果如下： 注：去官网下载tcping工具（根据自身系统选择32位/64位）https://elifulkerson.com/projects/tcping.php tcping工具具体用法可参看：https://www.cnblogs.com/su-root/p/10924758.html 我们打开日志文件看看： linux版： 12345678[root@bqh-118 ~]# ping 192.168.0.117|awk &#x27;&#123;print strftime(&quot;%c&quot;,systime()) &quot;\\t&quot;$0&#125;&#x27;2019年07月04日 星期四 23时14分35秒 PING 192.168.0.117 (192.168.0.117) 56(84) bytes of data.2019年07月04日 星期四 23时14分35秒 64 bytes from 192.168.0.117: icmp_seq=1 ttl=64 time=0.223 ms2019年07月04日 星期四 23时14分36秒 64 bytes from 192.168.0.117: icmp_seq=2 ttl=64 time=0.385 ms2019年07月04日 星期四 23时14分37秒 64 bytes from 192.168.0.117: icmp_seq=3 ttl=64 time=0.420 ms2019年07月04日 星期四 23时14分38秒 64 bytes from 192.168.0.117: icmp_seq=4 ttl=64 time=0.291 ms2019年07月04日 星期四 23时14分39秒 64 bytes from 192.168.0.117: icmp_seq=5 ttl=64 time=1.21 ms2019年07月04日 星期四 23时14分40秒 64 bytes from 192.168.0.117: icmp_seq=6 ttl=64 time=1.45 ms 把输出信息写入到log日志中： 1234567891011121314[root@bqh-118 ~]# ping 192.168.0.117 -c 6|awk &#x27;&#123;print strftime(&quot;%c&quot;,systime()) &quot;\\t&quot;$0&#125;&#x27; &gt;ping.log[root@bqh-118 ~]# cat ping.log 2019年07月04日 星期四 23时15分06秒 PING 192.168.0.117 (192.168.0.117) 56(84) bytes of data.2019年07月04日 星期四 23时15分06秒 64 bytes from 192.168.0.117: icmp_seq=1 ttl=64 time=0.231 ms2019年07月04日 星期四 23时15分07秒 64 bytes from 192.168.0.117: icmp_seq=2 ttl=64 time=0.331 ms2019年07月04日 星期四 23时15分08秒 64 bytes from 192.168.0.117: icmp_seq=3 ttl=64 time=0.185 ms2019年07月04日 星期四 23时15分09秒 64 bytes from 192.168.0.117: icmp_seq=4 ttl=64 time=0.347 ms2019年07月04日 星期四 23时15分10秒 64 bytes from 192.168.0.117: icmp_seq=5 ttl=64 time=0.259 ms2019年07月04日 星期四 23时15分11秒 64 bytes from 192.168.0.117: icmp_seq=6 ttl=64 time=0.377 ms2019年07月04日 星期四 23时15分11秒 2019年07月04日 星期四 23时15分11秒 --- 192.168.0.117 ping statistics ---2019年07月04日 星期四 23时15分11秒 6 packets transmitted, 6 received, 0% packet loss, time 5038ms2019年07月04日 星期四 23时15分11秒 rtt min/avg/max/mdev = 0.185/0.288/0.377/0.069 ms 我们也可把任务放到后台运行 123[root@bqh-118 ~]# ping 192.168.0.117 -c 6|awk &#x27;&#123;print strftime(&quot;%c&quot;,systime()) &quot;\\t&quot;$0&#125;&#x27; &gt;ping.log &amp;[1] 1560[root@bqh-118 ~]# 当然也有其他方法检测，以上方法不是唯一的 ping 百度123456789101112131415@echo off@echo.------------------ping指定 IP baidu.com-----------------------------@echo offset host=baidu.comset logfile=Log_%host%.logecho Target Host = %host% &gt;%logfile%for /f &quot;tokens=*&quot; %%A in (&#x27;ping %host% -n 1 &#x27;) do (echo %%A&gt;&gt;%logfile% &amp;&amp; GOTO Ping):Pingfor /f &quot;tokens=* skip=2&quot; %%A in (&#x27;ping %host% -n 1 &#x27;) do ( echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A&gt;&gt;%logfile% echo %date% %time:~0,2%:%time:~3,2%:%time:~6,2% %%A timeout 1 &gt;NUL GOTO Ping) ping 局域网123456789101112@Echo off date /t &gt;&gt; IPList.txt time /t &gt;&gt; IPList.txt echo =========== &gt;&gt; IPList.txt for /L %%I in (1,1,255) do (%SystemRoot%\\System32\\PING.EXE -n 1 192.168.1.%%I ) @Find &quot;Request timed out.&quot; &amp; echo 192.168.0.%%I Timed Out &gt;&gt;IPList.txt &amp; echo off pause cls Echo Finished! @Echo on Notepad.exe IPList.txt","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"正则表达式编辑工具 JGsoft RegexBuddy v4.10免注册汉化版","slug":"正则表达式编辑工具-JGsoft-RegexBuddy-v4-10免注册汉化版","date":"2021-09-08T05:12:10.000Z","updated":"2022-05-23T15:37:32.979Z","comments":true,"path":"2021/09/08/cl3sojxgf003n5cbh1k8edr0u/","link":"","permalink":"https://muyangit.github.io/2021/09/08/cl3sojxgf003n5cbh1k8edr0u/","excerpt":"","text":"RegexBuddy破解版是一款正则表达式编辑工具，帮助你的编写需要的正则表达式，还可以使用它理解别人编写的表达式。RegexBuddy提供可视化的支持、提示、调试方面的便利；在使用正则表达式时，RegexBuddy将正则式转换为多种语言的字串，还提供了代码输出功能。RegexBuddy 是学习正则表达式时的比较好的帮手,它可以容易地建立你想要的正确的正则表达式。清晰地推断他人所写的复杂的正则表达式。它还可以用给出的实例字符串或文件快速地进行测试匹配，从而防止了在实际应用中出现错误。RegexBuddy会在你的源代码中根据你所应用的特殊编程语言，自动生成带有正则表达式的代码段。同时你也可以收集正则表达式到库中，以在未来重新使用。RegexBuddy是使用Regex表达式的强大工具。Rijks是基于计算机科学理论和形式语言主题的字符集合。创建的字符串用于匹配文本并在文本中搜索特定的模式。例如，使用Rijks，您可以找到以前缀开头并以特定号码结尾的文本电话号码。这可以轻松处理正则表达式。制作Rijks模式有时可能很复杂，或者至少是乏味且耗时的。 Rijksbad软件是帮助您构建这些字符串的有效工具。使用此工具，您可以轻松地在Rex中的各种模板中定义，调试，测试和测试模板，甚至可以获取编程语言的代码。如果您在Linux / Unix环境中使用了功能强大的工具和grep命令行，则会在正则表达式中注意到它的强大功能。Wind Rijks通过图形界面在Windows环境中提供了完全相同的性能。 该程序还可用于分析其他人编写的Rexex表达式。可以对文本和文件进行编程，以执行所需的Rijks模式来查找和测试文本。使用该程序，无需在线工具，反复试验和无缝集成环境中可以执行的所有必要操作。这个程序不是用于常规模式的简单工具。 关于破解安装完成后，替换补丁即可激活 汉化教程1、拿到软件后查壳 2、载入OD，运用暂停法将修改报错窗口Nop掉3、同样的方法，将打开弹出的窗口pass掉（多次尝试，随便试的，可能有误）4、软件是英文版本的，使用文件中的汉化文件，可以打开（把汉化文件和RegexBuddy4放在同一目录即可完成汉化） 使用教程\\1. 界面介绍 （1）初始界面选项介绍 （2）如何使用匹配 （3）如何使用正则替换 （4）如何使用Debug 打开RegexBuddy后默认载入的是上一次你所测试的正则信息，选项配置信息都会自动载入上次你所设置的内容。历史记录中显示的是你所测试过得正则信息。 1、测试正则表达式。 a、在正则表达式输入需要测试的正则，如：。可以通过上面的面板选择语言，默认是JGosft，可以指定JAVA，Python等。 b、测试文本面板（Test标签）输入需要测试的文本内容，如：。可以选择Line By Line、Whole File、Page By Page，来指定是每行抽取，还是对整个文档抓取等（如果你的正则匹配信息有包含多行内容，务必要选中Whole File或者Page By Page）。测试文本面板会根据正则表达式和测试内容，实时显示匹配到的高亮预览信息。如：上图中的，全部高亮，如果你选中了HighLight下得HighLight Group1选项，还会实时显示抽取出来的内容：www.lifeba.org。上面2个部分用不同的颜色模块显示区分。当然你也可以不选择预览。 c、输出结果面板，显示的显示了正则表达式的匹配结果。你可以通过List All切换显示的效果。 比如，可以选中List ALL Group Matches in columns显示的效果，就是上面图中的输出结果面板效果。如果，你选中了Update Automatically，则修改正则或文本内容时候，输出结果面板会实时跟着变化。 d、点击 Debug按钮，会自动跳到Debug面板，显示出正则表达式匹配的规则。通过该结果，你可以很直观的分析出正则匹配的过程。 2、使用Libray库文件。 测试好了正则表达式后，你可以把他添加到自定义库里，并保存本地硬盘。这样下次你可以直接调用出来修改。通过Libray按钮，你可以切换到该面板。你首先要把选中Read Only去掉，才编辑该库文件。 a、点击 Add 按钮，可以选择Add Regex Only 或者 Add Regex With Test Subject，指定只保存正则，还是同时保存正则和测试文本。这里选择Add Regex With Test Subject后，可以看到已经成功将规则加入到库中，然后你可以点击保存按钮，来保存该库到硬盘上面。 b、点击 Use 按钮，可以选择使用该正则，同样有3个选项，让你指定是否使用测试文本等信息。 c、点击 Update 按钮，可以把修改后的正则更新到该库中。 上面的操作，可以直接选择该正则，然后点击右键操作。 3、Use面板，可以很方便导出正则为不同的编程语言格式。首先现在Language，指定输出语言为Python；然后use后面选择使用的编程方法；最后指定下变量名，就可以看到生成了Python的代码了。 4、GREP面板。在文件中使用上面的正则来搜索内容。点击GREP按钮可以切换到该面板。指定Folders，File masks类型信息后，再右上角点击GREP按钮，可以看到搜索的结果。 5、Create面板。对这个正则表达式的解释的一个树状展示，其中的每一个节点对照着表达式中的一个元素块，在RegexBuddy中被称为一个“token”,我们点击其中的一个节点，就会在我们所输入的表达式的相应部分进行着重显示。在分析他人所写的复杂的表达式的时候在这里查看会十分方便。 a、点击 Explain Token按钮，指向的正是你所选择的节点的正则表达式的语法规则的解释。 b、点击 Insert Token按钮会弹出一个下拉菜单，其中包含了正则表达式里涉及的所有语法符号，可以进行选择，当然对于语法十分熟悉后，就可以不用这个菜单，直接在上面的文本输入区键入表达式了。 c、Export按钮，可以将当前的表达式导出到文本文件、HTML文件或放入到剪贴板中。打印按钮，可以将当前的表达示打印出来。 上面的这些按钮，也可以直接点击右键来操作。 6、历史记录面板。显示你所编辑过得正则信息，你可以随时点击来切换。 四、其他功能介绍 1、上面的界面是再Match模式下的介绍；如果点击上面的Replace按钮，显示的面板会由稍微的不同。下面的界面显示了，对匹配到的正则内容，替换为HELLO的效果。 2、Split模式下，指定用匹配的正则做分割，可以指定要去的split次数。 3、特殊功能 a、Dot matches newline：是否允许 . 匹配任何字符包括分隔符。Case insensitive：是否不区分大小写。 选中后，测试效果如下：输入的是大写的TITLE，以及多行显示都可以匹配出来。 b、^$ match at line breaks：对^$只会对开始的字符串或者结束的字符串做匹配，如果选中该选项，则可以对前后换行也支持。选中后，效果如下：www.lifeba.org前后都有行，可以匹配出来。 上面的特殊功能只是工具自带的功能，如果你需要这个功能必须在持续中实现，因为这不是正则表达式本身的一部分。https://www.sdbeta.com/)","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"URL Schemes - 汇总,qq,tim,支付宝","slug":"URL-Schemes-汇总-qq-tim-支付宝","date":"2021-09-07T16:39:14.000Z","updated":"2022-05-23T15:37:33.050Z","comments":true,"path":"2021/09/08/cl3sojxfi001d5cbh4t0y1jf3/","link":"","permalink":"https://muyangit.github.io/2021/09/08/cl3sojxfi001d5cbh4t0y1jf3/","excerpt":"","text":"github gitee https://github.com/search?l=JavaScript&amp;q=im%2Fchat%3Fchat_type%3D&amp;type=Code qq对话框 data:”mqq://im/chat?chat_type=wpa&amp;version=1&amp;src_type=web&amp;uin=” + qq, 资料卡 https://github.com/search?q=mqqapi%3A%2F%2Fcard%2Fshow_pslcard&amp;type=code data:”mqqapi://card/show_pslcard?&amp;uin= 以下转发自Ryan URL Schemes - 汇总iOS 本文章将不定时更新、记录和分享 iOS 常用 Apps 的 URL Schemes ，主要是一些近期的新发现或一些实用动作。不同于早前独立成文的 URL Schemes 分享文章，本文章不仔细区分应用，以常用的 URL Schemes 为出发点更新，因此如果你有这方面的需求，却又没有在各大搜索平台上找到自己想要的 URL Schemes ，欢迎不定时查阅本文章哦 :) 更新于2018-07-0712345/* 豆瓣搜索 */douban:///search?q=[URL Encode]/* 豆瓣详细页，分别为电影、影人、书籍、音乐、活动 */douban://v2/[movie|subject|book|music|event]/[id] 更新于2018-05-08123456/* Shared by @sky(TG) *//* QQ 扫一扫 */mqqapi://qrcode/scan_qrcode?version=1&amp;src_type=app/* TIM 扫一扫 */tim://qrcode/scan_qrcode?version=1&amp;src_type=app 更新于2018-04-0712/* Mtime 电影详细页，参数是 URL Encode 的 JSON */mtime://scheme?applinkData=%7b%22handleType%22%3a%22jumpPage%22%2c%22pageType%22%3a%22movieDetail%22%2c%22movieId%22%3a%22[movie id]%22%7d 更新于2018-03-0412/* 安装已签名 IPA */itms-services://?action=download-manifest&amp;url=[plist URL] 更新于2017-09-011234567/* Shared by 搪瓷铁皮 *//* 微软翻译文字 */translator://action/* Shared by 能蟹仔 *//* 小米路由器 */miwifi:// 更新于2017-08-221234567/* 将 http(s) 换成 googlechrome(s) *//* 由 Chrome 打开 http(s) 链接 */googlechrome(s)://[location]/* 或直接传递 URL *//* 由 Chrome 打开 URL */googlechrome://x-callback-url/open/?url=[URL] 更新于2017-08-13123456/* Shared by Forward *//* 打开知乎搜索，唤起键盘 */zhihu://search?q=[URL Encode]/* 知乎具体问题页 */zhihu://question/[id] 更新于2017-07-27123456/* Shared by NEO *//* 淘宝搜索 */taobao://s.taobao.com?q=[URL Encode]/* 哔哩哔哩搜索 */bilibili://search?keyword=[URL Encode] 更新于2017-06-24123/* Shared by Nyaa *//* 微博私信页 */weibo://message 更新于2017-01-22123456789/* Shared by cactus *//* 手机充值 */alipayqr://platformapi/startapp?saId=10000003/* 口令红包 */alipayqr://platformapi/startapp?saId=88886666/* 口令红包，带口令 */alipayqr://platformapi/startapp?saId=88886666&amp;passcode=[code] 更新于2017-01-1512345/* iMark 快速新建 */clover-imark://new/[camera|latest|web|map|library|session]/* iMark 新建画布，尺寸可更改 */clover-imark://new/canvas?width=[1000]&amp;height=[1000] 更新于2017-01-041234/* 115 App 扫一扫 */oof.disk://scan 更新于2016-11-18123/* 万分注意：只能切换店面地区，并不能切换账号 *//* App Store 店面切换，其他地区雷同，请自行修改地区缩写 */https://itunes.apple.com/[us|jp|...]/app/region-changer/id0123456789 更新于2016-08-2412/* 打开AppStore并兑换 [Redeem Code] */itms-apps://buy.itunes.apple.com/WebObjects/MZFinance.woa/wa/freeProductCodeWizard?mt=8&amp;code=[Redeem Code] 更新于2016-06-0912345/* 打开 Safari 并搜索内容，搜索引擎跟随系统设置 */x-web-search://?[URL Encode]/* 打开 AppStore 并搜索内容，显示搜索页面 */itms-apps://search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?media=software&amp;term=[URL Encode] 更新于2016-05-26 新浪微博 1234567891011121314151617181920212223242526272829/* 首页，同时可作刷新功能 */weibo://gotohome/* 发布页 */weibo://share?content=[id]/* 发现页 */weibo://discover/* 搜索页，可带搜索内容 */weibo://searchall?q=[URL Encode]/* 微博扫一扫 */weibo://qrcode/* 微博支付 */weibo://paymentcards?containerid=106403/* 我的收藏 */weibo://cardlist?containerid=2302592168131095&amp;cache_need=1/* 具体文章页，需要自行分析 mblogid */weibo://detail?mblogid=[mblogid]/* 具体内页，如热门博客、热门话题等，需要自行分析 containerid */weibo://cardlist?containerid=[containerid]/* 具体个人页，需要自行分析个人 uid */weibo://userinfo?uid=[uid] 微信 12/* 微信扫一扫，免内置浏览器跳转 */weixin://scanqrcode 支付宝 1234567891011121314151617/* 付款码 */alipayqr://platformapi/startapp?saId=20000056/* 余额宝 */alipayqr://platformapi/startapp?saId=20000032/* 转账 */alipayqr://platformapi/startapp?saId=09999988/* 提现 */alipayqr://platformapi/startapp?saId=20000033/* 卡券 */alipayqr://platformapi/startapp?saId=20000021/* 扫一扫 */alipayqr://platformapi/startapp?saId=10000007 说明动作类 URL Schemes 一般都难以获取，如果你有新的好的发现想要分享交流，欢迎留言哦。也敬请各位尊重大家的劳动成果，愉快交流 :)","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"Typora+PicGO+Gitee图床配置","slug":"Typora-PicGO-Gitee图床配置","date":"2021-09-06T13:28:37.000Z","updated":"2022-05-23T15:37:33.083Z","comments":true,"path":"2021/09/06/cl3sojxfc00145cbhdqzq9wa9/","link":"","permalink":"https://muyangit.github.io/2021/09/06/cl3sojxfc00145cbhdqzq9wa9/","excerpt":"","text":"1·Typora+PicGO+Gitee****图床我们在写markdown文档的时候，如果说写的文档有插入图片的话，图片管理起来非常的麻烦，而且移动或复制文档到其他设备时必须把图片的文件夹也一起复制。图片在markdown文档中就是一个链接，这个链接可以是本地的文件路径也可以是网络路径（url)。所以我们可以把图片放到网络上集中管理（这个就叫着图床），写文档的时候插入图片只要插入相应图片的url就可以了，在其他设备查看文档只要有网络就可以加载图片。 下面我们使用Typora写Markdown文档，用PicGo上传图片，图片放在gitee仓库中。整个过程虽然看起来比较麻烦，但是只要配置好，所有的一切动作都是自动完成的。 1. Typora****安装配置 1.1 安装 下载Typora，Typora的安装比较简单，和普通软件安装一样，可参考B站视频（包括Markdown语法介绍） 1.2 配置 打开Typora，文件-&gt;偏好设置-&gt;图像 按照上图的配置Typora，其中 PicGo****路径 的选项是安装了PicGO会自动检测的，如果没有自动检测到PicGO软件的路径可以手动填写。PicGo软件的安装和配置在下面会详细说明。 Typora软件的配置就这样完成了，安装PicGo再把PicGo路径填好就可以了 2. PicGo****和Gitee图床配置 2.1 PicGo****安装 PicGo下载 ， 我们可以看到在Typora的设置中也有PicGo的下载地址，这个按钮跳转的地址和我给出的是一样的。 若是失败，请检查PicGo端口 2.2 PicGo****插件安装 安装插件之前需要安装Nodejs，因为PicGo的插件需要Nodejs才可以使用， 下载Node.js，版本没有多大的关系，建议下载LTS版的 下载安装Nodejs后，打开PicGo，在插件设置中搜索gitee，下载图中框选的那个，一定要下载这个，其他的gitee插件的配置会有些许的不同 2.3 gitee****仓库创建 仓库的名称可以随意写，这里以ImageBed为例，一定要初始化仓库 生成token，打开gitee的设置，点击生成新令牌 Token的权限设置如下，令牌的描述同样是可以随意写的，权限设置如图，点击提交，会提示输入gitee账号密码 把生成的token复制保存，配置PicGo需要 2.3 PicGo****配置， 若是不配置则自动上传到SM.SM【Error: This image has been blocked, please contact webmaster for more information.++++[PicGo Server] upload failed, see picgo.log for more detail ↑ 】 picgo的文档l#命令行上传) · repo: 填写仓库的名称，这个名称是地址栏的一部分，不是下面绿框中的名称 · branch：填写分支的名称，一般为master · token：填写我们刚刚生成的令牌 · path: 如果图片是放在仓库的根目录可以不填，放在文件夹下可以填写文件夹的名字，如果仓库中没有这个文件夹，它会自动创建 · 后面两个可以不要填 3. 测试 选择gitee图床，从本地上传图片测试是否可以上传成功 在Typora的使用，我们不需要手动上传图片，因为前面配置过了Typora，所以只要把图片插入到markdown文档中，Typora会自动运行PicGo上传图片，并将markdown中的图片链接替换成URL。 解决：picgo+gitee中出现StatusCodeError: 404 - {“message”:“Branch”} 若是上传失败，请检查，404{“message“：”Branch”} 用picgo+gitee作为typora的图床时候，出现下面的错误 Stack Begin------12345678910111213StatusCodeError: 404 - &#123;&quot;message&quot;:&quot;Branch&quot;&#125; at new StatusCodeError (D:\\Program Files\\picgo\\resources\\app.asar\\node_modules\\request-promise-core\\lib\\errors.js:32:15) at Request.plumbing.callback (D:\\Program Files\\picgo\\resources\\app.asar\\node_modules\\request-promise-core\\lib\\plumbing.js:104:33) at Request.RP$callback [as _callback] (D:\\Program Files\\picgo\\resources\\app.asar\\node_modules\\request-promise-core\\lib\\plumbing.js:46:31) at Request.self.callback (D:\\Program Files\\picgo\\resources\\app.asar\\node_modules\\request\\request.js:185:22) at Request.emit (events.js:200:13) at Request.&lt;anonymous&gt; (D:\\Program Files\\picgo\\resources\\app.asar\\node_modules\\request\\request.js:1161:10) at Request.emit (events.js:200:13) at IncomingMessage.&lt;anonymous&gt; (D:\\Program Files\\picgo\\resources\\app.asar\\node_modules\\request\\request.js:1083:12) at Object.onceWrapper (events.js:288:20) at IncomingMessage.emit (events.js:205:15)原因：在创建的仓库的时候，没有初始化readme 解决：初始化就可以解决这个问题。———————————————— 1·插件无法安装-删除以下所有-git clone -https://github.com/lizhuangs/picgo-plugin-gitee-uploader.git 3·再次启用插件后`确认配置","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[],"author":"MuyanGit"},{"title":"五分钟做出炫酷视频片头特效","slug":"五分钟做出炫酷视频片头特效","date":"2019-12-30T11:37:42.000Z","updated":"2020-05-07T15:17:21.000Z","comments":true,"path":"2019/12/30/cl3sojxg7002z5cbh4hfpd131/","link":"","permalink":"https://muyangit.github.io/2019/12/30/cl3sojxg7002z5cbh4hfpd131/","excerpt":"","text":"前言首先感谢UP主Poiesis分享的网站，这次给大家推荐panzoid.com是一个可以在线生成媲美AE特效片头片尾的网站。 食用方式打开网站，点击Creations：挑选喜欢的特效模版：打开模版：点击objects按钮，并修改你需要的logo和标语：修改好后点击download下载按钮，再点击Start video render开始渲染视频。渲染完成后点击Download your video下载视频完成！ 视频教程","categories":[{"name":"资源","slug":"资源","permalink":"https://muyangit.github.io/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":"设计","slug":"设计","permalink":"https://muyangit.github.io/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"资源","slug":"资源","permalink":"https://muyangit.github.io/tags/%E8%B5%84%E6%BA%90/"}],"author":"hojun"},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2021-11-09T19:25:58.733Z","comments":true,"path":"2018/12/12/cl3sojxeu000e5cbheq6gg85r/","link":"","permalink":"https://muyangit.github.io/2018/12/12/cl3sojxeu000e5cbheq6gg85r/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 12345678# Sitetitle: 你的站点名subtitle:description: 站点简介keywords:author: 作者名language: zh-cntimezone: 部署 123456deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） 12345678backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121# site name# 站点名 【改】prefixName: さくら荘そのsiteName: MuyanGit# favicon and site master avatar# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】favicon: /images/favicon.icoavatar: /img/custom/avatar.jpg# 站点url 【改】url: https://sakura.hojun.cn# 站点介绍（或者说是个人签名）【改】description: Live your life with passion! With some drive!# 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpgcdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6# 开启pjax 【选】pjax: 1# 站点首页的公告信息 【改】手机版的喇叭提示notice: hexo-Sakura主题已经开源，目前正在开发中...# 懒加载的加载中图片 【选】lazyloadImg: https://cdn.jsdelivr.net/gh/MuyanGit/CDN@1.5/img/loader/orange.progress-bar-stripe-loader.svg# 站点菜单配置 【选】menus: 首页: &#123; path: /, fa: fa-fort-awesome faa-shake &#125; 归档: &#123; path: /archives, fa: fa-archive faa-shake, submenus: &#123; 技术: &#123;path: /categories/技术/, fa: fa-code &#125;, 生活: &#123;path: /categories/生活/, fa: fa-file-text-o &#125;, 资源: &#123;path: /categories/资源/, fa: fa-cloud-download &#125;, 随想: &#123;path: /categories/随想/, fa: fa-commenting-o &#125;, 转载: &#123;path: /categories/转载/, fa: fa-book &#125; &#125; &#125; 清单: &#123; path: javascript:;, fa: fa-list-ul faa-vertical, submenus: &#123; 书单: &#123;path: /tags/悦读/, fa: fa-th-list faa-bounce &#125;, 番组: &#123;path: /bangumi/, fa: fa-film faa-vertical &#125;, 歌单: &#123;path: /music/, fa: fa-headphones &#125;, 图集: &#123;path: /tags/图集/, fa: fa-photo &#125; &#125; &#125; 留言板: &#123; path: /comment/, fa: fa-pencil-square-o faa-tada &#125; 友人帐: &#123; path: /links/, fa: fa-link faa-shake &#125; 赞赏: &#123; path: /donate/, fa: fa-heart faa-pulse &#125; 关于: &#123; path: /, fa: fa-leaf faa-wrench , submenus: &#123; 我？: &#123;path: /about/, fa: fa-meetup&#125;, 主题: &#123;path: /theme-sakura/, fa: iconfont icon-sakura &#125;, Lab: &#123;path: /lab/, fa: fa-cogs &#125;, &#125; &#125; 客户端: &#123; path: /client/, fa: fa-android faa-vertical &#125; RSS: &#123; path: /atom.xml, fa: fa-rss faa-pulse &#125;# Home page sort type: -1: newer first，1: older first. 【非】homePageSortType: -1# Home page article shown number) 【非】homeArticleShown: 10# 背景图片 【选】bgn: 8# startdash面板 url, title, desc img 【改】startdash: - &#123;url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png&#125; - &#123;url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg&#125; - &#123;url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg&#125;# your site build time or founded date# 你的站点建立日期 【改】siteBuildingTime: 07/17/2018# 社交按钮(social) url, img PC端配置 【改】social: github: &#123;url: http://github.com/honjun, img: /img/social/github.png&#125; sina: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png&#125; wangyiyun: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png&#125; zhihu: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png&#125; email: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg&#125; wechat: &#123;url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png&#125;# 社交按钮(msocial) url, img 移动端配置 【改】msocial: github: &#123;url: http://github.com/honjun, fa: fa-github, color: 333&#125; weibo: &#123;url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39&#125; qq: &#123;url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe&#125;# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true# Valine评论配置【改】valine: truev_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHszv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 12345678910111213141516171819#category# 按分类名创建技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg#tag# 标签名即是标题悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： 123456789---title: commentdate: 2018-12-20 23:13:48keywords: 留言板description: comments: true# 在这里配置单页面头部图片，自定义替换哦~photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg--- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） 123456789101112131415161718192021222324252627282930---layout: bangumititle: bangumicomments: falsedate: 2019-02-10 21:32:48keywords:description:bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。--- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） 1234567891011121314151617181920212223242526272829303132333435363738394041424344---layout: linkstitle: links# 创建日期，可以改下date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改keywords: 友人帐 description: # true/false 开启/关闭评论comments: true # 页面头部图片，自定义修改photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像--- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： 1&#123;% bili video_id [page] %&#125; 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： 1&#123;% fb_img src [caption] %&#125; 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"}],"tags":[{"name":"web","slug":"web","permalink":"https://muyangit.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://muyangit.github.io/tags/%E6%82%A6%E8%AF%BB/"}],"author":"MuyanGit"}],"categories":[{"name":"技术","slug":"tech","permalink":"https://muyangit.github.io/categories/tech/"},{"name":"生活","slug":"live","permalink":"https://muyangit.github.io/categories/live/"},{"name":"资源","slug":"资源","permalink":"https://muyangit.github.io/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":".NET Core","slug":"NET-Core","permalink":"https://muyangit.github.io/tags/NET-Core/"},{"name":"bat","slug":"bat","permalink":"https://muyangit.github.io/tags/bat/"},{"name":"Typora","slug":"Typora","permalink":"https://muyangit.github.io/tags/Typora/"},{"name":"Chrome","slug":"Chrome","permalink":"https://muyangit.github.io/tags/Chrome/"},{"name":"NodeJs","slug":"NodeJs","permalink":"https://muyangit.github.io/tags/NodeJs/"},{"name":"python","slug":"python","permalink":"https://muyangit.github.io/tags/python/"},{"name":"Terminal","slug":"Terminal","permalink":"https://muyangit.github.io/tags/Terminal/"},{"name":"hexo","slug":"hexo","permalink":"https://muyangit.github.io/tags/hexo/"},{"name":"vbs","slug":"vbs","permalink":"https://muyangit.github.io/tags/vbs/"},{"name":"git","slug":"git","permalink":"https://muyangit.github.io/tags/git/"},{"name":"工具","slug":"工具","permalink":"https://muyangit.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"图集","slug":"图集","permalink":"https://muyangit.github.io/tags/%E5%9B%BE%E9%9B%86/"},{"name":"cmd","slug":"cmd","permalink":"https://muyangit.github.io/tags/cmd/"},{"name":"Anaconda","slug":"Anaconda","permalink":"https://muyangit.github.io/tags/Anaconda/"},{"name":"设计","slug":"设计","permalink":"https://muyangit.github.io/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"资源","slug":"资源","permalink":"https://muyangit.github.io/tags/%E8%B5%84%E6%BA%90/"},{"name":"web","slug":"web","permalink":"https://muyangit.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://muyangit.github.io/tags/%E6%82%A6%E8%AF%BB/"}]}